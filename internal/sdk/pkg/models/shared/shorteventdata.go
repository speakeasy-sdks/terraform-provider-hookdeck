// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"hashicups/internal/sdk/pkg/utils"
)

type ShortEventDataBody2 struct {
}

type ShortEventDataBodyType string

const (
	ShortEventDataBodyTypeStr                 ShortEventDataBodyType = "str"
	ShortEventDataBodyTypeShortEventDataBody2 ShortEventDataBodyType = "ShortEventData_body_2"
	ShortEventDataBodyTypeArrayOfany          ShortEventDataBodyType = "arrayOfany"
)

type ShortEventDataBody struct {
	Str                 *string
	ShortEventDataBody2 *ShortEventDataBody2
	ArrayOfany          []interface{}

	Type ShortEventDataBodyType
}

func CreateShortEventDataBodyStr(str string) ShortEventDataBody {
	typ := ShortEventDataBodyTypeStr

	return ShortEventDataBody{
		Str:  &str,
		Type: typ,
	}
}

func CreateShortEventDataBodyShortEventDataBody2(shortEventDataBody2 ShortEventDataBody2) ShortEventDataBody {
	typ := ShortEventDataBodyTypeShortEventDataBody2

	return ShortEventDataBody{
		ShortEventDataBody2: &shortEventDataBody2,
		Type:                typ,
	}
}

func CreateShortEventDataBodyArrayOfany(arrayOfany []interface{}) ShortEventDataBody {
	typ := ShortEventDataBodyTypeArrayOfany

	return ShortEventDataBody{
		ArrayOfany: arrayOfany,
		Type:       typ,
	}
}

func (u *ShortEventDataBody) UnmarshalJSON(data []byte) error {

	shortEventDataBody2 := new(ShortEventDataBody2)
	if err := utils.UnmarshalJSON(data, &shortEventDataBody2, "", true, true); err == nil {
		u.ShortEventDataBody2 = shortEventDataBody2
		u.Type = ShortEventDataBodyTypeShortEventDataBody2
		return nil
	}

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = ShortEventDataBodyTypeStr
		return nil
	}

	arrayOfany := []interface{}{}
	if err := utils.UnmarshalJSON(data, &arrayOfany, "", true, true); err == nil {
		u.ArrayOfany = arrayOfany
		u.Type = ShortEventDataBodyTypeArrayOfany
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ShortEventDataBody) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ShortEventDataBody2 != nil {
		return utils.MarshalJSON(u.ShortEventDataBody2, "", true)
	}

	if u.ArrayOfany != nil {
		return utils.MarshalJSON(u.ArrayOfany, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type ShortEventDataHeadersType string

const (
	ShortEventDataHeadersTypeStr      ShortEventDataHeadersType = "str"
	ShortEventDataHeadersTypeMapOfstr ShortEventDataHeadersType = "mapOfstr"
)

type ShortEventDataHeaders struct {
	Str      *string
	MapOfstr map[string]string

	Type ShortEventDataHeadersType
}

func CreateShortEventDataHeadersStr(str string) ShortEventDataHeaders {
	typ := ShortEventDataHeadersTypeStr

	return ShortEventDataHeaders{
		Str:  &str,
		Type: typ,
	}
}

func CreateShortEventDataHeadersMapOfstr(mapOfstr map[string]string) ShortEventDataHeaders {
	typ := ShortEventDataHeadersTypeMapOfstr

	return ShortEventDataHeaders{
		MapOfstr: mapOfstr,
		Type:     typ,
	}
}

func (u *ShortEventDataHeaders) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = ShortEventDataHeadersTypeStr
		return nil
	}

	mapOfstr := map[string]string{}
	if err := utils.UnmarshalJSON(data, &mapOfstr, "", true, true); err == nil {
		u.MapOfstr = mapOfstr
		u.Type = ShortEventDataHeadersTypeMapOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ShortEventDataHeaders) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfstr != nil {
		return utils.MarshalJSON(u.MapOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type ShortEventDataParsedQuery2 struct {
}

type ShortEventDataParsedQueryType string

const (
	ShortEventDataParsedQueryTypeStr                        ShortEventDataParsedQueryType = "str"
	ShortEventDataParsedQueryTypeShortEventDataParsedQuery2 ShortEventDataParsedQueryType = "ShortEventData_parsed_query_2"
)

type ShortEventDataParsedQuery struct {
	Str                        *string
	ShortEventDataParsedQuery2 *ShortEventDataParsedQuery2

	Type ShortEventDataParsedQueryType
}

func CreateShortEventDataParsedQueryStr(str string) ShortEventDataParsedQuery {
	typ := ShortEventDataParsedQueryTypeStr

	return ShortEventDataParsedQuery{
		Str:  &str,
		Type: typ,
	}
}

func CreateShortEventDataParsedQueryShortEventDataParsedQuery2(shortEventDataParsedQuery2 ShortEventDataParsedQuery2) ShortEventDataParsedQuery {
	typ := ShortEventDataParsedQueryTypeShortEventDataParsedQuery2

	return ShortEventDataParsedQuery{
		ShortEventDataParsedQuery2: &shortEventDataParsedQuery2,
		Type:                       typ,
	}
}

func (u *ShortEventDataParsedQuery) UnmarshalJSON(data []byte) error {

	shortEventDataParsedQuery2 := new(ShortEventDataParsedQuery2)
	if err := utils.UnmarshalJSON(data, &shortEventDataParsedQuery2, "", true, true); err == nil {
		u.ShortEventDataParsedQuery2 = shortEventDataParsedQuery2
		u.Type = ShortEventDataParsedQueryTypeShortEventDataParsedQuery2
		return nil
	}

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = ShortEventDataParsedQueryTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ShortEventDataParsedQuery) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ShortEventDataParsedQuery2 != nil {
		return utils.MarshalJSON(u.ShortEventDataParsedQuery2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type ShortEventData struct {
	Body           *ShortEventDataBody        `json:"body,omitempty"`
	Headers        *ShortEventDataHeaders     `json:"headers,omitempty"`
	IsLargePayload *bool                      `json:"is_large_payload,omitempty"`
	ParsedQuery    *ShortEventDataParsedQuery `json:"parsed_query,omitempty"`
	Path           string                     `json:"path"`
	Query          *string                    `json:"query,omitempty"`
}

func (o *ShortEventData) GetBody() *ShortEventDataBody {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *ShortEventData) GetHeaders() *ShortEventDataHeaders {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *ShortEventData) GetIsLargePayload() *bool {
	if o == nil {
		return nil
	}
	return o.IsLargePayload
}

func (o *ShortEventData) GetParsedQuery() *ShortEventDataParsedQuery {
	if o == nil {
		return nil
	}
	return o.ParsedQuery
}

func (o *ShortEventData) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *ShortEventData) GetQuery() *string {
	if o == nil {
		return nil
	}
	return o.Query
}
