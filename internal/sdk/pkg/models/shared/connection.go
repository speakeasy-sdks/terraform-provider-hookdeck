// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"hashicups/internal/sdk/pkg/utils"
	"time"
)

type Connection struct {
	// Date the connection was archived
	ArchivedAt *time.Time `json:"archived_at,omitempty"`
	// Date the connection was created
	CreatedAt time.Time `json:"created_at"`
	// Associated [Destination](#destination-object) object
	Destination Destination `json:"destination"`
	// ID of the connection
	ID string `json:"id"`
	// Unique name of the connection for this source
	Name string `json:"name"`
	// Date the connection was paused
	PausedAt *time.Time `json:"paused_at,omitempty"`
	// Array of rules applied to connection after factoring for the ruleset
	ResolvedRules []Rule `json:"resolved_rules,omitempty"`
	// Array of rules configured on the connection
	Rules []Rule `json:"rules,omitempty"`
	// Associated [Ruleset](#ruleset-object) object
	Ruleset *Ruleset `json:"ruleset,omitempty"`
	// Associated [Source](#source-object) object
	Source Source `json:"source"`
	// ID of the workspace
	TeamID string `json:"team_id"`
	// Date the connection was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

func (c Connection) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *Connection) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Connection) GetArchivedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ArchivedAt
}

func (o *Connection) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *Connection) GetDestination() Destination {
	if o == nil {
		return Destination{}
	}
	return o.Destination
}

func (o *Connection) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Connection) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Connection) GetPausedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.PausedAt
}

func (o *Connection) GetResolvedRules() []Rule {
	if o == nil {
		return nil
	}
	return o.ResolvedRules
}

func (o *Connection) GetRules() []Rule {
	if o == nil {
		return nil
	}
	return o.Rules
}

func (o *Connection) GetRuleset() *Ruleset {
	if o == nil {
		return nil
	}
	return o.Ruleset
}

func (o *Connection) GetSource() Source {
	if o == nil {
		return Source{}
	}
	return o.Source
}

func (o *Connection) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *Connection) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}
