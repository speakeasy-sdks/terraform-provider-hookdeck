// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"hashicups/internal/sdk/pkg/utils"
)

type TransformRuleType string

const (
	TransformRuleTypeTransformReference TransformRuleType = "TransformReference"
	TransformRuleTypeTransformFull      TransformRuleType = "TransformFull"
)

type TransformRule struct {
	TransformReference *TransformReference
	TransformFull      *TransformFull

	Type TransformRuleType
}

func CreateTransformRuleTransformReference(transformReference TransformReference) TransformRule {
	typ := TransformRuleTypeTransformReference

	return TransformRule{
		TransformReference: &transformReference,
		Type:               typ,
	}
}

func CreateTransformRuleTransformFull(transformFull TransformFull) TransformRule {
	typ := TransformRuleTypeTransformFull

	return TransformRule{
		TransformFull: &transformFull,
		Type:          typ,
	}
}

func (u *TransformRule) UnmarshalJSON(data []byte) error {

	transformReference := new(TransformReference)
	if err := utils.UnmarshalJSON(data, &transformReference, "", true, true); err == nil {
		u.TransformReference = transformReference
		u.Type = TransformRuleTypeTransformReference
		return nil
	}

	transformFull := new(TransformFull)
	if err := utils.UnmarshalJSON(data, &transformFull, "", true, true); err == nil {
		u.TransformFull = transformFull
		u.Type = TransformRuleTypeTransformFull
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u TransformRule) MarshalJSON() ([]byte, error) {
	if u.TransformReference != nil {
		return utils.MarshalJSON(u.TransformReference, "", true)
	}

	if u.TransformFull != nil {
		return utils.MarshalJSON(u.TransformFull, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
