// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RequestRejectionCause - Filter by rejection cause
type RequestRejectionCause string

const (
	RequestRejectionCauseSourceArchived         RequestRejectionCause = "SOURCE_ARCHIVED"
	RequestRejectionCauseNoWebhook              RequestRejectionCause = "NO_WEBHOOK"
	RequestRejectionCauseVerificationFailed     RequestRejectionCause = "VERIFICATION_FAILED"
	RequestRejectionCauseUnsupportedHTTPMethod  RequestRejectionCause = "UNSUPPORTED_HTTP_METHOD"
	RequestRejectionCauseUnsupportedContentType RequestRejectionCause = "UNSUPPORTED_CONTENT_TYPE"
	RequestRejectionCauseUnparsableJSON         RequestRejectionCause = "UNPARSABLE_JSON"
	RequestRejectionCausePayloadTooLarge        RequestRejectionCause = "PAYLOAD_TOO_LARGE"
	RequestRejectionCauseIngestionFatal         RequestRejectionCause = "INGESTION_FATAL"
	RequestRejectionCauseUnknown                RequestRejectionCause = "UNKNOWN"
)

func (e RequestRejectionCause) ToPointer() *RequestRejectionCause {
	return &e
}

func (e *RequestRejectionCause) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SOURCE_ARCHIVED":
		fallthrough
	case "NO_WEBHOOK":
		fallthrough
	case "VERIFICATION_FAILED":
		fallthrough
	case "UNSUPPORTED_HTTP_METHOD":
		fallthrough
	case "UNSUPPORTED_CONTENT_TYPE":
		fallthrough
	case "UNPARSABLE_JSON":
		fallthrough
	case "PAYLOAD_TOO_LARGE":
		fallthrough
	case "INGESTION_FATAL":
		fallthrough
	case "UNKNOWN":
		*e = RequestRejectionCause(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestRejectionCause: %v", v)
	}
}
