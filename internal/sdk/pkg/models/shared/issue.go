// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type IssueType string

const (
	IssueTypeDeliveryIssue       IssueType = "DeliveryIssue"
	IssueTypeTransformationIssue IssueType = "TransformationIssue"
)

type Issue struct {
	DeliveryIssue       *DeliveryIssue
	TransformationIssue *TransformationIssue

	Type IssueType
}

func CreateIssueDeliveryIssue(deliveryIssue DeliveryIssue) Issue {
	typ := IssueTypeDeliveryIssue

	return Issue{
		DeliveryIssue: &deliveryIssue,
		Type:          typ,
	}
}

func CreateIssueTransformationIssue(transformationIssue TransformationIssue) Issue {
	typ := IssueTypeTransformationIssue

	return Issue{
		TransformationIssue: &transformationIssue,
		Type:                typ,
	}
}

func (u *Issue) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	deliveryIssue := new(DeliveryIssue)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&deliveryIssue); err == nil {
		u.DeliveryIssue = deliveryIssue
		u.Type = IssueTypeDeliveryIssue
		return nil
	}

	transformationIssue := new(TransformationIssue)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&transformationIssue); err == nil {
		u.TransformationIssue = transformationIssue
		u.Type = IssueTypeTransformationIssue
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Issue) MarshalJSON() ([]byte, error) {
	if u.DeliveryIssue != nil {
		return json.Marshal(u.DeliveryIssue)
	}

	if u.TransformationIssue != nil {
		return json.Marshal(u.TransformationIssue)
	}

	return nil, nil
}
