// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"hashicups/internal/sdk/pkg/utils"
)

type IssueTriggerDeliveryConfigsConnectionsType string

const (
	IssueTriggerDeliveryConfigsConnectionsTypeStr        IssueTriggerDeliveryConfigsConnectionsType = "str"
	IssueTriggerDeliveryConfigsConnectionsTypeArrayOfstr IssueTriggerDeliveryConfigsConnectionsType = "arrayOfstr"
)

type IssueTriggerDeliveryConfigsConnections struct {
	Str        *string
	ArrayOfstr []string

	Type IssueTriggerDeliveryConfigsConnectionsType
}

func CreateIssueTriggerDeliveryConfigsConnectionsStr(str string) IssueTriggerDeliveryConfigsConnections {
	typ := IssueTriggerDeliveryConfigsConnectionsTypeStr

	return IssueTriggerDeliveryConfigsConnections{
		Str:  &str,
		Type: typ,
	}
}

func CreateIssueTriggerDeliveryConfigsConnectionsArrayOfstr(arrayOfstr []string) IssueTriggerDeliveryConfigsConnections {
	typ := IssueTriggerDeliveryConfigsConnectionsTypeArrayOfstr

	return IssueTriggerDeliveryConfigsConnections{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *IssueTriggerDeliveryConfigsConnections) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = IssueTriggerDeliveryConfigsConnectionsTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = IssueTriggerDeliveryConfigsConnectionsTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u IssueTriggerDeliveryConfigsConnections) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// IssueTriggerDeliveryConfigs - Configurations for a 'delivery' issue trigger
type IssueTriggerDeliveryConfigs struct {
	// A pattern to match on the connection name or array of connection IDs. Use `*` as wildcard.
	Connections IssueTriggerDeliveryConfigsConnections `json:"connections"`
	// The strategy uses to open the issue
	Strategy IssueTriggerStrategy `json:"strategy"`
}

func (o *IssueTriggerDeliveryConfigs) GetConnections() IssueTriggerDeliveryConfigsConnections {
	if o == nil {
		return IssueTriggerDeliveryConfigsConnections{}
	}
	return o.Connections
}

func (o *IssueTriggerDeliveryConfigs) GetStrategy() IssueTriggerStrategy {
	if o == nil {
		return IssueTriggerStrategy("")
	}
	return o.Strategy
}
