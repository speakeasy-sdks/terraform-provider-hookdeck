// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// FilterRuleType - A filter rule must be of type `filter`
type FilterRuleType string

const (
	FilterRuleTypeFilter FilterRuleType = "filter"
)

func (e FilterRuleType) ToPointer() *FilterRuleType {
	return &e
}

func (e *FilterRuleType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "filter":
		*e = FilterRuleType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterRuleType: %v", v)
	}
}

type FilterRule struct {
	// JSON using our filter syntax to filter on request headers
	Body *ConnectionFilterProperty `json:"body,omitempty"`
	// JSON using our filter syntax to filter on request headers
	Headers *ConnectionFilterProperty `json:"headers,omitempty"`
	// JSON using our filter syntax to filter on request headers
	Path *ConnectionFilterProperty `json:"path,omitempty"`
	// JSON using our filter syntax to filter on request headers
	Query *ConnectionFilterProperty `json:"query,omitempty"`
	// A filter rule must be of type `filter`
	Type FilterRuleType `json:"type"`
}

func (o *FilterRule) GetBody() *ConnectionFilterProperty {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *FilterRule) GetHeaders() *ConnectionFilterProperty {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *FilterRule) GetPath() *ConnectionFilterProperty {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *FilterRule) GetQuery() *ConnectionFilterProperty {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *FilterRule) GetType() FilterRuleType {
	if o == nil {
		return FilterRuleType("")
	}
	return o.Type
}
