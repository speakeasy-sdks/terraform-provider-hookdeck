// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type IssueWithDataType string

const (
	IssueWithDataTypeDeliveryIssueWithData       IssueWithDataType = "DeliveryIssueWithData"
	IssueWithDataTypeTransformationIssueWithData IssueWithDataType = "TransformationIssueWithData"
)

type IssueWithData struct {
	DeliveryIssueWithData       *DeliveryIssueWithData
	TransformationIssueWithData *TransformationIssueWithData

	Type IssueWithDataType
}

func CreateIssueWithDataDeliveryIssueWithData(deliveryIssueWithData DeliveryIssueWithData) IssueWithData {
	typ := IssueWithDataTypeDeliveryIssueWithData

	return IssueWithData{
		DeliveryIssueWithData: &deliveryIssueWithData,
		Type:                  typ,
	}
}

func CreateIssueWithDataTransformationIssueWithData(transformationIssueWithData TransformationIssueWithData) IssueWithData {
	typ := IssueWithDataTypeTransformationIssueWithData

	return IssueWithData{
		TransformationIssueWithData: &transformationIssueWithData,
		Type:                        typ,
	}
}

func (u *IssueWithData) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	deliveryIssueWithData := new(DeliveryIssueWithData)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&deliveryIssueWithData); err == nil {
		u.DeliveryIssueWithData = deliveryIssueWithData
		u.Type = IssueWithDataTypeDeliveryIssueWithData
		return nil
	}

	transformationIssueWithData := new(TransformationIssueWithData)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&transformationIssueWithData); err == nil {
		u.TransformationIssueWithData = transformationIssueWithData
		u.Type = IssueWithDataTypeTransformationIssueWithData
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u IssueWithData) MarshalJSON() ([]byte, error) {
	if u.DeliveryIssueWithData != nil {
		return json.Marshal(u.DeliveryIssueWithData)
	}

	if u.TransformationIssueWithData != nil {
		return json.Marshal(u.TransformationIssueWithData)
	}

	return nil, nil
}
