// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"hashicups/internal/sdk/pkg/utils"
	"time"
)

type BatchOperationQueryType string

const (
	BatchOperationQueryTypeMapOfany BatchOperationQueryType = "mapOfany"
	BatchOperationQueryTypeStr      BatchOperationQueryType = "str"
)

type BatchOperationQuery struct {
	MapOfany map[string]interface{}
	Str      *string

	Type BatchOperationQueryType
}

func CreateBatchOperationQueryMapOfany(mapOfany map[string]interface{}) BatchOperationQuery {
	typ := BatchOperationQueryTypeMapOfany

	return BatchOperationQuery{
		MapOfany: mapOfany,
		Type:     typ,
	}
}

func CreateBatchOperationQueryStr(str string) BatchOperationQuery {
	typ := BatchOperationQueryTypeStr

	return BatchOperationQuery{
		Str:  &str,
		Type: typ,
	}
}

func (u *BatchOperationQuery) UnmarshalJSON(data []byte) error {

	mapOfany := map[string]interface{}{}
	if err := utils.UnmarshalJSON(data, &mapOfany, "", true, true); err == nil {
		u.MapOfany = mapOfany
		u.Type = BatchOperationQueryTypeMapOfany
		return nil
	}

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = BatchOperationQueryTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u BatchOperationQuery) MarshalJSON() ([]byte, error) {
	if u.MapOfany != nil {
		return utils.MarshalJSON(u.MapOfany, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type BatchOperation struct {
	// Date the bulk retry was cancelled
	CancelledAt *time.Time `json:"cancelled_at,omitempty"`
	// Date the bulk retry was completed
	CompletedAt *time.Time `json:"completed_at,omitempty"`
	// Number of events that were successfully delivered
	CompletedCount *int64 `json:"completed_count,omitempty"`
	// Date the bulk retry was created
	CreatedAt time.Time `json:"created_at"`
	// Number of batches required to complete the bulk retry
	EstimatedBatch *int64 `json:"estimated_batch,omitempty"`
	// Number of estimated events to be retried
	EstimatedCount *int64 `json:"estimated_count,omitempty"`
	// Number of events that failed to be delivered
	FailedCount *int64 `json:"failed_count,omitempty"`
	// ID of the bulk retry
	ID string `json:"id"`
	// Indicates if the bulk retry is currently in progress
	InProgress bool     `json:"in_progress"`
	Number     *float32 `json:"number,omitempty"`
	// Number of batches currently processed
	ProcessedBatch *int64 `json:"processed_batch,omitempty"`
	// Progression of the batch operations, values 0 - 1
	Progress *float32 `json:"progress,omitempty"`
	// Query object to filter records
	Query *BatchOperationQuery `json:"query,omitempty"`
	// ID of the workspace
	TeamID string `json:"team_id"`
	// Last time the bulk retry was updated
	UpdatedAt time.Time `json:"updated_at"`
}

func (b BatchOperation) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BatchOperation) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *BatchOperation) GetCancelledAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CancelledAt
}

func (o *BatchOperation) GetCompletedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

func (o *BatchOperation) GetCompletedCount() *int64 {
	if o == nil {
		return nil
	}
	return o.CompletedCount
}

func (o *BatchOperation) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *BatchOperation) GetEstimatedBatch() *int64 {
	if o == nil {
		return nil
	}
	return o.EstimatedBatch
}

func (o *BatchOperation) GetEstimatedCount() *int64 {
	if o == nil {
		return nil
	}
	return o.EstimatedCount
}

func (o *BatchOperation) GetFailedCount() *int64 {
	if o == nil {
		return nil
	}
	return o.FailedCount
}

func (o *BatchOperation) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *BatchOperation) GetInProgress() bool {
	if o == nil {
		return false
	}
	return o.InProgress
}

func (o *BatchOperation) GetNumber() *float32 {
	if o == nil {
		return nil
	}
	return o.Number
}

func (o *BatchOperation) GetProcessedBatch() *int64 {
	if o == nil {
		return nil
	}
	return o.ProcessedBatch
}

func (o *BatchOperation) GetProgress() *float32 {
	if o == nil {
		return nil
	}
	return o.Progress
}

func (o *BatchOperation) GetQuery() *BatchOperationQuery {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *BatchOperation) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *BatchOperation) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}
