// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"hashicups/internal/sdk/pkg/utils"
	"time"
)

type TransformationExecution struct {
	CreatedAt time.Time `json:"created_at"`
	ID        string    `json:"id"`
	IssueID   *string   `json:"issue_id,omitempty"`
	// The minimum log level to open the issue on
	LogLevel               TransformationExecutionLogLevel `json:"log_level"`
	Logs                   []ConsoleLine                   `json:"logs"`
	OriginalEventData      *ShortEventData                 `json:"original_event_data,omitempty"`
	OriginalEventDataID    string                          `json:"original_event_data_id"`
	TeamID                 string                          `json:"team_id"`
	TransformationID       string                          `json:"transformation_id"`
	TransformedEventData   *ShortEventData                 `json:"transformed_event_data,omitempty"`
	TransformedEventDataID string                          `json:"transformed_event_data_id"`
	UpdatedAt              time.Time                       `json:"updated_at"`
	WebhookID              string                          `json:"webhook_id"`
}

func (t TransformationExecution) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TransformationExecution) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TransformationExecution) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *TransformationExecution) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *TransformationExecution) GetIssueID() *string {
	if o == nil {
		return nil
	}
	return o.IssueID
}

func (o *TransformationExecution) GetLogLevel() TransformationExecutionLogLevel {
	if o == nil {
		return TransformationExecutionLogLevel("")
	}
	return o.LogLevel
}

func (o *TransformationExecution) GetLogs() []ConsoleLine {
	if o == nil {
		return []ConsoleLine{}
	}
	return o.Logs
}

func (o *TransformationExecution) GetOriginalEventData() *ShortEventData {
	if o == nil {
		return nil
	}
	return o.OriginalEventData
}

func (o *TransformationExecution) GetOriginalEventDataID() string {
	if o == nil {
		return ""
	}
	return o.OriginalEventDataID
}

func (o *TransformationExecution) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *TransformationExecution) GetTransformationID() string {
	if o == nil {
		return ""
	}
	return o.TransformationID
}

func (o *TransformationExecution) GetTransformedEventData() *ShortEventData {
	if o == nil {
		return nil
	}
	return o.TransformedEventData
}

func (o *TransformationExecution) GetTransformedEventDataID() string {
	if o == nil {
		return ""
	}
	return o.TransformedEventDataID
}

func (o *TransformationExecution) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *TransformationExecution) GetWebhookID() string {
	if o == nil {
		return ""
	}
	return o.WebhookID
}
