// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type SeekPaginationDir struct {
	Schema *OrderByDirection `json:"schema,omitempty"`
}

type SeekPaginationOrderByType string

const (
	SeekPaginationOrderByTypeStr        SeekPaginationOrderByType = "str"
	SeekPaginationOrderByTypeArrayOfstr SeekPaginationOrderByType = "arrayOfstr"
)

type SeekPaginationOrderBy struct {
	Str        *string
	ArrayOfstr []string

	Type SeekPaginationOrderByType
}

func CreateSeekPaginationOrderByStr(str string) SeekPaginationOrderBy {
	typ := SeekPaginationOrderByTypeStr

	return SeekPaginationOrderBy{
		Str:  &str,
		Type: typ,
	}
}

func CreateSeekPaginationOrderByArrayOfstr(arrayOfstr []string) SeekPaginationOrderBy {
	typ := SeekPaginationOrderByTypeArrayOfstr

	return SeekPaginationOrderBy{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *SeekPaginationOrderBy) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = SeekPaginationOrderByTypeStr
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = SeekPaginationOrderByTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SeekPaginationOrderBy) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	return nil, nil
}

type SeekPagination struct {
	Dir     *SeekPaginationDir     `json:"dir,omitempty"`
	Limit   *int64                 `json:"limit,omitempty"`
	Next    *string                `json:"next,omitempty"`
	OrderBy *SeekPaginationOrderBy `json:"order_by,omitempty"`
	Prev    *string                `json:"prev,omitempty"`
}
