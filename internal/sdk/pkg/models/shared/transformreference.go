// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TransformReferenceType - A transformation rule must be of type `transformation`
type TransformReferenceType string

const (
	TransformReferenceTypeTransform TransformReferenceType = "transform"
)

func (e TransformReferenceType) ToPointer() *TransformReferenceType {
	return &e
}

func (e *TransformReferenceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "transform":
		*e = TransformReferenceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransformReferenceType: %v", v)
	}
}

type TransformReference struct {
	// ID of the attached transformation object. Optional input, always set once the rule is defined
	TransformationID string `json:"transformation_id"`
	// A transformation rule must be of type `transformation`
	Type TransformReferenceType `json:"type"`
}

func (o *TransformReference) GetTransformationID() string {
	if o == nil {
		return ""
	}
	return o.TransformationID
}

func (o *TransformReference) GetType() TransformReferenceType {
	if o == nil {
		return TransformReferenceType("")
	}
	return o.Type
}
