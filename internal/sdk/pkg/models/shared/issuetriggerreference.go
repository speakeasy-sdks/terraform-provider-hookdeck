// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"hashicups/internal/sdk/pkg/utils"
)

type IssueTriggerReferenceType string

const (
	IssueTriggerReferenceTypeIssueTriggerDeliveryConfigs       IssueTriggerReferenceType = "IssueTriggerDeliveryConfigs"
	IssueTriggerReferenceTypeIssueTriggerTransformationConfigs IssueTriggerReferenceType = "IssueTriggerTransformationConfigs"
	IssueTriggerReferenceTypeIssueTriggerBackpressureConfigs   IssueTriggerReferenceType = "IssueTriggerBackpressureConfigs"
)

type IssueTriggerReference struct {
	IssueTriggerDeliveryConfigs       *IssueTriggerDeliveryConfigs
	IssueTriggerTransformationConfigs *IssueTriggerTransformationConfigs
	IssueTriggerBackpressureConfigs   *IssueTriggerBackpressureConfigs

	Type IssueTriggerReferenceType
}

func CreateIssueTriggerReferenceIssueTriggerDeliveryConfigs(issueTriggerDeliveryConfigs IssueTriggerDeliveryConfigs) IssueTriggerReference {
	typ := IssueTriggerReferenceTypeIssueTriggerDeliveryConfigs

	return IssueTriggerReference{
		IssueTriggerDeliveryConfigs: &issueTriggerDeliveryConfigs,
		Type:                        typ,
	}
}

func CreateIssueTriggerReferenceIssueTriggerTransformationConfigs(issueTriggerTransformationConfigs IssueTriggerTransformationConfigs) IssueTriggerReference {
	typ := IssueTriggerReferenceTypeIssueTriggerTransformationConfigs

	return IssueTriggerReference{
		IssueTriggerTransformationConfigs: &issueTriggerTransformationConfigs,
		Type:                              typ,
	}
}

func CreateIssueTriggerReferenceIssueTriggerBackpressureConfigs(issueTriggerBackpressureConfigs IssueTriggerBackpressureConfigs) IssueTriggerReference {
	typ := IssueTriggerReferenceTypeIssueTriggerBackpressureConfigs

	return IssueTriggerReference{
		IssueTriggerBackpressureConfigs: &issueTriggerBackpressureConfigs,
		Type:                            typ,
	}
}

func (u *IssueTriggerReference) UnmarshalJSON(data []byte) error {

	issueTriggerDeliveryConfigs := new(IssueTriggerDeliveryConfigs)
	if err := utils.UnmarshalJSON(data, &issueTriggerDeliveryConfigs, "", true, true); err == nil {
		u.IssueTriggerDeliveryConfigs = issueTriggerDeliveryConfigs
		u.Type = IssueTriggerReferenceTypeIssueTriggerDeliveryConfigs
		return nil
	}

	issueTriggerTransformationConfigs := new(IssueTriggerTransformationConfigs)
	if err := utils.UnmarshalJSON(data, &issueTriggerTransformationConfigs, "", true, true); err == nil {
		u.IssueTriggerTransformationConfigs = issueTriggerTransformationConfigs
		u.Type = IssueTriggerReferenceTypeIssueTriggerTransformationConfigs
		return nil
	}

	issueTriggerBackpressureConfigs := new(IssueTriggerBackpressureConfigs)
	if err := utils.UnmarshalJSON(data, &issueTriggerBackpressureConfigs, "", true, true); err == nil {
		u.IssueTriggerBackpressureConfigs = issueTriggerBackpressureConfigs
		u.Type = IssueTriggerReferenceTypeIssueTriggerBackpressureConfigs
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u IssueTriggerReference) MarshalJSON() ([]byte, error) {
	if u.IssueTriggerDeliveryConfigs != nil {
		return utils.MarshalJSON(u.IssueTriggerDeliveryConfigs, "", true)
	}

	if u.IssueTriggerTransformationConfigs != nil {
		return utils.MarshalJSON(u.IssueTriggerTransformationConfigs, "", true)
	}

	if u.IssueTriggerBackpressureConfigs != nil {
		return utils.MarshalJSON(u.IssueTriggerBackpressureConfigs, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
