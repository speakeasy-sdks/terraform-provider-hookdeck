// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"hashicups/internal/sdk/pkg/utils"
)

type DestinationAuthMethodConfigType string

const (
	DestinationAuthMethodConfigTypeHookdeckSignature DestinationAuthMethodConfigType = "HookdeckSignature"
	DestinationAuthMethodConfigTypeBasicAuth         DestinationAuthMethodConfigType = "BasicAuth"
	DestinationAuthMethodConfigTypeAPIKey            DestinationAuthMethodConfigType = "APIKey"
	DestinationAuthMethodConfigTypeBearerToken       DestinationAuthMethodConfigType = "BearerToken"
	DestinationAuthMethodConfigTypeCustomSignature   DestinationAuthMethodConfigType = "CustomSignature"
)

type DestinationAuthMethodConfig struct {
	HookdeckSignature *HookdeckSignature
	BasicAuth         *BasicAuth
	APIKey            *APIKey
	BearerToken       *BearerToken
	CustomSignature   *CustomSignature

	Type DestinationAuthMethodConfigType
}

func CreateDestinationAuthMethodConfigHookdeckSignature(hookdeckSignature HookdeckSignature) DestinationAuthMethodConfig {
	typ := DestinationAuthMethodConfigTypeHookdeckSignature

	return DestinationAuthMethodConfig{
		HookdeckSignature: &hookdeckSignature,
		Type:              typ,
	}
}

func CreateDestinationAuthMethodConfigBasicAuth(basicAuth BasicAuth) DestinationAuthMethodConfig {
	typ := DestinationAuthMethodConfigTypeBasicAuth

	return DestinationAuthMethodConfig{
		BasicAuth: &basicAuth,
		Type:      typ,
	}
}

func CreateDestinationAuthMethodConfigAPIKey(apiKey APIKey) DestinationAuthMethodConfig {
	typ := DestinationAuthMethodConfigTypeAPIKey

	return DestinationAuthMethodConfig{
		APIKey: &apiKey,
		Type:   typ,
	}
}

func CreateDestinationAuthMethodConfigBearerToken(bearerToken BearerToken) DestinationAuthMethodConfig {
	typ := DestinationAuthMethodConfigTypeBearerToken

	return DestinationAuthMethodConfig{
		BearerToken: &bearerToken,
		Type:        typ,
	}
}

func CreateDestinationAuthMethodConfigCustomSignature(customSignature CustomSignature) DestinationAuthMethodConfig {
	typ := DestinationAuthMethodConfigTypeCustomSignature

	return DestinationAuthMethodConfig{
		CustomSignature: &customSignature,
		Type:            typ,
	}
}

func (u *DestinationAuthMethodConfig) UnmarshalJSON(data []byte) error {

	hookdeckSignature := new(HookdeckSignature)
	if err := utils.UnmarshalJSON(data, &hookdeckSignature, "", true, true); err == nil {
		u.HookdeckSignature = hookdeckSignature
		u.Type = DestinationAuthMethodConfigTypeHookdeckSignature
		return nil
	}

	basicAuth := new(BasicAuth)
	if err := utils.UnmarshalJSON(data, &basicAuth, "", true, true); err == nil {
		u.BasicAuth = basicAuth
		u.Type = DestinationAuthMethodConfigTypeBasicAuth
		return nil
	}

	apiKey := new(APIKey)
	if err := utils.UnmarshalJSON(data, &apiKey, "", true, true); err == nil {
		u.APIKey = apiKey
		u.Type = DestinationAuthMethodConfigTypeAPIKey
		return nil
	}

	bearerToken := new(BearerToken)
	if err := utils.UnmarshalJSON(data, &bearerToken, "", true, true); err == nil {
		u.BearerToken = bearerToken
		u.Type = DestinationAuthMethodConfigTypeBearerToken
		return nil
	}

	customSignature := new(CustomSignature)
	if err := utils.UnmarshalJSON(data, &customSignature, "", true, true); err == nil {
		u.CustomSignature = customSignature
		u.Type = DestinationAuthMethodConfigTypeCustomSignature
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationAuthMethodConfig) MarshalJSON() ([]byte, error) {
	if u.HookdeckSignature != nil {
		return utils.MarshalJSON(u.HookdeckSignature, "", true)
	}

	if u.BasicAuth != nil {
		return utils.MarshalJSON(u.BasicAuth, "", true)
	}

	if u.APIKey != nil {
		return utils.MarshalJSON(u.APIKey, "", true)
	}

	if u.BearerToken != nil {
		return utils.MarshalJSON(u.BearerToken, "", true)
	}

	if u.CustomSignature != nil {
		return utils.MarshalJSON(u.CustomSignature, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
