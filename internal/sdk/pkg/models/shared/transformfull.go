// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TransformFullTransformation - You can optionally define a new transformation while creating a transform rule
type TransformFullTransformation struct {
	// A string representation of your JavaScript (ES6) code to run
	Code string `json:"code"`
	// A key-value object of environment variables to encrypt and expose to your transformation code
	Env map[string]string `json:"env,omitempty"`
	// The unique name of the transformation
	Name string `json:"name"`
}

func (o *TransformFullTransformation) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *TransformFullTransformation) GetEnv() map[string]string {
	if o == nil {
		return nil
	}
	return o.Env
}

func (o *TransformFullTransformation) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

// TransformFullType - A transformation rule must be of type `transformation`
type TransformFullType string

const (
	TransformFullTypeTransform TransformFullType = "transform"
)

func (e TransformFullType) ToPointer() *TransformFullType {
	return &e
}

func (e *TransformFullType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "transform":
		*e = TransformFullType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransformFullType: %v", v)
	}
}

type TransformFull struct {
	// You can optionally define a new transformation while creating a transform rule
	Transformation *TransformFullTransformation `json:"transformation,omitempty"`
	// ID of the attached transformation object. Optional input, always set once the rule is defined
	TransformationID *string `json:"transformation_id,omitempty"`
	// A transformation rule must be of type `transformation`
	Type TransformFullType `json:"type"`
}

func (o *TransformFull) GetTransformation() *TransformFullTransformation {
	if o == nil {
		return nil
	}
	return o.Transformation
}

func (o *TransformFull) GetTransformationID() *string {
	if o == nil {
		return nil
	}
	return o.TransformationID
}

func (o *TransformFull) GetType() TransformFullType {
	if o == nil {
		return TransformFullType("")
	}
	return o.Type
}
