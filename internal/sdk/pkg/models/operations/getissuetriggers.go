// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"hashicups/internal/sdk/pkg/models/shared"
	"hashicups/internal/sdk/pkg/utils"
	"net/http"
	"time"
)

type GetIssueTriggersDir2 string

const (
	GetIssueTriggersDir2Asc  GetIssueTriggersDir2 = "asc"
	GetIssueTriggersDir2Desc GetIssueTriggersDir2 = "desc"
)

func (e GetIssueTriggersDir2) ToPointer() *GetIssueTriggersDir2 {
	return &e
}

func (e *GetIssueTriggersDir2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetIssueTriggersDir2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIssueTriggersDir2: %v", v)
	}
}

// GetIssueTriggersDir1 - Sort direction
type GetIssueTriggersDir1 string

const (
	GetIssueTriggersDir1Asc  GetIssueTriggersDir1 = "asc"
	GetIssueTriggersDir1Desc GetIssueTriggersDir1 = "desc"
)

func (e GetIssueTriggersDir1) ToPointer() *GetIssueTriggersDir1 {
	return &e
}

func (e *GetIssueTriggersDir1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetIssueTriggersDir1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIssueTriggersDir1: %v", v)
	}
}

type GetIssueTriggersDirType string

const (
	GetIssueTriggersDirTypeGetIssueTriggersDir1        GetIssueTriggersDirType = "getIssueTriggersDir_1"
	GetIssueTriggersDirTypeArrayOfgetIssueTriggersDir2 GetIssueTriggersDirType = "arrayOfgetIssueTriggersDir_2"
)

type GetIssueTriggersDir struct {
	GetIssueTriggersDir1        *GetIssueTriggersDir1
	ArrayOfgetIssueTriggersDir2 []GetIssueTriggersDir2

	Type GetIssueTriggersDirType
}

func CreateGetIssueTriggersDirGetIssueTriggersDir1(getIssueTriggersDir1 GetIssueTriggersDir1) GetIssueTriggersDir {
	typ := GetIssueTriggersDirTypeGetIssueTriggersDir1

	return GetIssueTriggersDir{
		GetIssueTriggersDir1: &getIssueTriggersDir1,
		Type:                 typ,
	}
}

func CreateGetIssueTriggersDirArrayOfgetIssueTriggersDir2(arrayOfgetIssueTriggersDir2 []GetIssueTriggersDir2) GetIssueTriggersDir {
	typ := GetIssueTriggersDirTypeArrayOfgetIssueTriggersDir2

	return GetIssueTriggersDir{
		ArrayOfgetIssueTriggersDir2: arrayOfgetIssueTriggersDir2,
		Type:                        typ,
	}
}

func (u *GetIssueTriggersDir) UnmarshalJSON(data []byte) error {

	getIssueTriggersDir1 := new(GetIssueTriggersDir1)
	if err := utils.UnmarshalJSON(data, &getIssueTriggersDir1, "", true, true); err == nil {
		u.GetIssueTriggersDir1 = getIssueTriggersDir1
		u.Type = GetIssueTriggersDirTypeGetIssueTriggersDir1
		return nil
	}

	arrayOfgetIssueTriggersDir2 := []GetIssueTriggersDir2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetIssueTriggersDir2, "", true, true); err == nil {
		u.ArrayOfgetIssueTriggersDir2 = arrayOfgetIssueTriggersDir2
		u.Type = GetIssueTriggersDirTypeArrayOfgetIssueTriggersDir2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetIssueTriggersDir) MarshalJSON() ([]byte, error) {
	if u.GetIssueTriggersDir1 != nil {
		return utils.MarshalJSON(u.GetIssueTriggersDir1, "", true)
	}

	if u.ArrayOfgetIssueTriggersDir2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetIssueTriggersDir2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetIssueTriggersDisabledAt2 - Date when the issue trigger was disabled
type GetIssueTriggersDisabledAt2 struct {
	Any *bool      `queryParam:"name=any"`
	Gt  *time.Time `queryParam:"name=gt"`
	Gte *time.Time `queryParam:"name=gte"`
	Le  *time.Time `queryParam:"name=le"`
	Lte *time.Time `queryParam:"name=lte"`
}

func (g GetIssueTriggersDisabledAt2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetIssueTriggersDisabledAt2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetIssueTriggersDisabledAt2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetIssueTriggersDisabledAt2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetIssueTriggersDisabledAt2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetIssueTriggersDisabledAt2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetIssueTriggersDisabledAt2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type GetIssueTriggersDisabledAtType string

const (
	GetIssueTriggersDisabledAtTypeDateTime                    GetIssueTriggersDisabledAtType = "date-time"
	GetIssueTriggersDisabledAtTypeGetIssueTriggersDisabledAt2 GetIssueTriggersDisabledAtType = "getIssueTriggersDisabledAt_2"
)

type GetIssueTriggersDisabledAt struct {
	DateTime                    *time.Time
	GetIssueTriggersDisabledAt2 *GetIssueTriggersDisabledAt2

	Type GetIssueTriggersDisabledAtType
}

func CreateGetIssueTriggersDisabledAtDateTime(dateTime time.Time) GetIssueTriggersDisabledAt {
	typ := GetIssueTriggersDisabledAtTypeDateTime

	return GetIssueTriggersDisabledAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateGetIssueTriggersDisabledAtGetIssueTriggersDisabledAt2(getIssueTriggersDisabledAt2 GetIssueTriggersDisabledAt2) GetIssueTriggersDisabledAt {
	typ := GetIssueTriggersDisabledAtTypeGetIssueTriggersDisabledAt2

	return GetIssueTriggersDisabledAt{
		GetIssueTriggersDisabledAt2: &getIssueTriggersDisabledAt2,
		Type:                        typ,
	}
}

func (u *GetIssueTriggersDisabledAt) UnmarshalJSON(data []byte) error {

	getIssueTriggersDisabledAt2 := new(GetIssueTriggersDisabledAt2)
	if err := utils.UnmarshalJSON(data, &getIssueTriggersDisabledAt2, "", true, true); err == nil {
		u.GetIssueTriggersDisabledAt2 = getIssueTriggersDisabledAt2
		u.Type = GetIssueTriggersDisabledAtTypeGetIssueTriggersDisabledAt2
		return nil
	}

	dateTime := new(time.Time)
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = dateTime
		u.Type = GetIssueTriggersDisabledAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetIssueTriggersDisabledAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.GetIssueTriggersDisabledAt2 != nil {
		return utils.MarshalJSON(u.GetIssueTriggersDisabledAt2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetIssueTriggersOrderBy2 string

const (
	GetIssueTriggersOrderBy2CreatedAt GetIssueTriggersOrderBy2 = "created_at"
	GetIssueTriggersOrderBy2Type      GetIssueTriggersOrderBy2 = "type"
)

func (e GetIssueTriggersOrderBy2) ToPointer() *GetIssueTriggersOrderBy2 {
	return &e
}

func (e *GetIssueTriggersOrderBy2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created_at":
		fallthrough
	case "type":
		*e = GetIssueTriggersOrderBy2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIssueTriggersOrderBy2: %v", v)
	}
}

// GetIssueTriggersOrderBy1 - Sort key(s)
type GetIssueTriggersOrderBy1 string

const (
	GetIssueTriggersOrderBy1CreatedAt GetIssueTriggersOrderBy1 = "created_at"
	GetIssueTriggersOrderBy1Type      GetIssueTriggersOrderBy1 = "type"
)

func (e GetIssueTriggersOrderBy1) ToPointer() *GetIssueTriggersOrderBy1 {
	return &e
}

func (e *GetIssueTriggersOrderBy1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created_at":
		fallthrough
	case "type":
		*e = GetIssueTriggersOrderBy1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIssueTriggersOrderBy1: %v", v)
	}
}

type GetIssueTriggersOrderByType string

const (
	GetIssueTriggersOrderByTypeGetIssueTriggersOrderBy1        GetIssueTriggersOrderByType = "getIssueTriggersOrderBy_1"
	GetIssueTriggersOrderByTypeArrayOfgetIssueTriggersOrderBy2 GetIssueTriggersOrderByType = "arrayOfgetIssueTriggersOrderBy_2"
)

type GetIssueTriggersOrderBy struct {
	GetIssueTriggersOrderBy1        *GetIssueTriggersOrderBy1
	ArrayOfgetIssueTriggersOrderBy2 []GetIssueTriggersOrderBy2

	Type GetIssueTriggersOrderByType
}

func CreateGetIssueTriggersOrderByGetIssueTriggersOrderBy1(getIssueTriggersOrderBy1 GetIssueTriggersOrderBy1) GetIssueTriggersOrderBy {
	typ := GetIssueTriggersOrderByTypeGetIssueTriggersOrderBy1

	return GetIssueTriggersOrderBy{
		GetIssueTriggersOrderBy1: &getIssueTriggersOrderBy1,
		Type:                     typ,
	}
}

func CreateGetIssueTriggersOrderByArrayOfgetIssueTriggersOrderBy2(arrayOfgetIssueTriggersOrderBy2 []GetIssueTriggersOrderBy2) GetIssueTriggersOrderBy {
	typ := GetIssueTriggersOrderByTypeArrayOfgetIssueTriggersOrderBy2

	return GetIssueTriggersOrderBy{
		ArrayOfgetIssueTriggersOrderBy2: arrayOfgetIssueTriggersOrderBy2,
		Type:                            typ,
	}
}

func (u *GetIssueTriggersOrderBy) UnmarshalJSON(data []byte) error {

	getIssueTriggersOrderBy1 := new(GetIssueTriggersOrderBy1)
	if err := utils.UnmarshalJSON(data, &getIssueTriggersOrderBy1, "", true, true); err == nil {
		u.GetIssueTriggersOrderBy1 = getIssueTriggersOrderBy1
		u.Type = GetIssueTriggersOrderByTypeGetIssueTriggersOrderBy1
		return nil
	}

	arrayOfgetIssueTriggersOrderBy2 := []GetIssueTriggersOrderBy2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetIssueTriggersOrderBy2, "", true, true); err == nil {
		u.ArrayOfgetIssueTriggersOrderBy2 = arrayOfgetIssueTriggersOrderBy2
		u.Type = GetIssueTriggersOrderByTypeArrayOfgetIssueTriggersOrderBy2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetIssueTriggersOrderBy) MarshalJSON() ([]byte, error) {
	if u.GetIssueTriggersOrderBy1 != nil {
		return utils.MarshalJSON(u.GetIssueTriggersOrderBy1, "", true)
	}

	if u.ArrayOfgetIssueTriggersOrderBy2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetIssueTriggersOrderBy2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetIssueTriggersRequest struct {
	Dir        *GetIssueTriggersDir        `queryParam:"style=form,explode=true,name=dir"`
	DisabledAt *GetIssueTriggersDisabledAt `queryParam:"style=form,explode=true,name=disabled_at"`
	Limit      *int64                      `queryParam:"style=form,explode=true,name=limit"`
	Name       *string                     `queryParam:"style=form,explode=true,name=name"`
	Next       *string                     `queryParam:"style=form,explode=true,name=next"`
	OrderBy    *GetIssueTriggersOrderBy    `queryParam:"style=form,explode=true,name=order_by"`
	Prev       *string                     `queryParam:"style=form,explode=true,name=prev"`
	// Issue type
	Type *shared.IssueType `queryParam:"style=form,explode=true,name=type"`
}

func (o *GetIssueTriggersRequest) GetDir() *GetIssueTriggersDir {
	if o == nil {
		return nil
	}
	return o.Dir
}

func (o *GetIssueTriggersRequest) GetDisabledAt() *GetIssueTriggersDisabledAt {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *GetIssueTriggersRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetIssueTriggersRequest) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetIssueTriggersRequest) GetNext() *string {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *GetIssueTriggersRequest) GetOrderBy() *GetIssueTriggersOrderBy {
	if o == nil {
		return nil
	}
	return o.OrderBy
}

func (o *GetIssueTriggersRequest) GetPrev() *string {
	if o == nil {
		return nil
	}
	return o.Prev
}

func (o *GetIssueTriggersRequest) GetType() *shared.IssueType {
	if o == nil {
		return nil
	}
	return o.Type
}

type GetIssueTriggersResponse struct {
	// Bad Request
	APIErrorResponse *shared.APIErrorResponse
	// HTTP response content type for this operation
	ContentType string
	// List of issue triggers
	IssueTriggerPaginatedResult *shared.IssueTriggerPaginatedResult
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetIssueTriggersResponse) GetAPIErrorResponse() *shared.APIErrorResponse {
	if o == nil {
		return nil
	}
	return o.APIErrorResponse
}

func (o *GetIssueTriggersResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetIssueTriggersResponse) GetIssueTriggerPaginatedResult() *shared.IssueTriggerPaginatedResult {
	if o == nil {
		return nil
	}
	return o.IssueTriggerPaginatedResult
}

func (o *GetIssueTriggersResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetIssueTriggersResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
