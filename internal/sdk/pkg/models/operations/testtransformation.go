// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"hashicups/internal/sdk/pkg/models/shared"
	"net/http"
)

// TestTransformationRequestBodyEnv - Key-value environment variables to be passed to the transformation
type TestTransformationRequestBodyEnv struct {
}

// TestTransformationRequestBodyRequestBody1 - Body of the request
type TestTransformationRequestBodyRequestBody1 struct {
}

type TestTransformationRequestBodyRequestBodyType string

const (
	TestTransformationRequestBodyRequestBodyTypeTestTransformationRequestBodyRequestBody1 TestTransformationRequestBodyRequestBodyType = "testTransformation_requestBody_request_body_1"
	TestTransformationRequestBodyRequestBodyTypeStr                                       TestTransformationRequestBodyRequestBodyType = "str"
)

type TestTransformationRequestBodyRequestBody struct {
	TestTransformationRequestBodyRequestBody1 *TestTransformationRequestBodyRequestBody1
	Str                                       *string

	Type TestTransformationRequestBodyRequestBodyType
}

func CreateTestTransformationRequestBodyRequestBodyTestTransformationRequestBodyRequestBody1(testTransformationRequestBodyRequestBody1 TestTransformationRequestBodyRequestBody1) TestTransformationRequestBodyRequestBody {
	typ := TestTransformationRequestBodyRequestBodyTypeTestTransformationRequestBodyRequestBody1

	return TestTransformationRequestBodyRequestBody{
		TestTransformationRequestBodyRequestBody1: &testTransformationRequestBodyRequestBody1,
		Type: typ,
	}
}

func CreateTestTransformationRequestBodyRequestBodyStr(str string) TestTransformationRequestBodyRequestBody {
	typ := TestTransformationRequestBodyRequestBodyTypeStr

	return TestTransformationRequestBodyRequestBody{
		Str:  &str,
		Type: typ,
	}
}

func (u *TestTransformationRequestBodyRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	testTransformationRequestBodyRequestBody1 := new(TestTransformationRequestBodyRequestBody1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&testTransformationRequestBodyRequestBody1); err == nil {
		u.TestTransformationRequestBodyRequestBody1 = testTransformationRequestBodyRequestBody1
		u.Type = TestTransformationRequestBodyRequestBodyTypeTestTransformationRequestBodyRequestBody1
		return nil
	}

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = TestTransformationRequestBodyRequestBodyTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u TestTransformationRequestBodyRequestBody) MarshalJSON() ([]byte, error) {
	if u.TestTransformationRequestBodyRequestBody1 != nil {
		return json.Marshal(u.TestTransformationRequestBodyRequestBody1)
	}

	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	return nil, nil
}

// TestTransformationRequestBodyRequestParsedQuery - JSON representation of the query params
type TestTransformationRequestBodyRequestParsedQuery struct {
}

// TestTransformationRequestBodyRequest - Request input to use for the transformation execution
type TestTransformationRequestBodyRequest struct {
	// Body of the request
	Body *TestTransformationRequestBodyRequestBody `json:"body,omitempty"`
	// Headers of the request
	Headers map[string]string `json:"headers"`
	// JSON representation of the query params
	ParsedQuery *TestTransformationRequestBodyRequestParsedQuery `json:"parsed_query,omitempty"`
	// Path of the request
	Path *string `json:"path,omitempty"`
	// String representation of the query params of the request
	Query *string `json:"query,omitempty"`
}

type TestTransformationRequestBody struct {
	// JavaScript code to be executed
	Code *string `json:"code,omitempty"`
	// Key-value environment variables to be passed to the transformation
	Env     *TestTransformationRequestBodyEnv `json:"env,omitempty"`
	EventID *string                           `json:"event_id,omitempty"`
	// Request input to use for the transformation execution
	Request *TestTransformationRequestBodyRequest `json:"request,omitempty"`
	// Transformation ID
	TransformationID *string `json:"transformation_id,omitempty"`
	// ID of the connection to use for the execution `context`
	WebhookID *string `json:"webhook_id,omitempty"`
}

type TestTransformationResponse struct {
	// Bad Request
	APIErrorResponse *shared.APIErrorResponse
	ContentType      string
	StatusCode       int
	RawResponse      *http.Response
	// Transformation run output
	TransformationExecutorOutput *shared.TransformationExecutorOutput
}
