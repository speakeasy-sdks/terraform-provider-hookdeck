// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"hashicups/internal/sdk/pkg/models/shared"
	"hashicups/internal/sdk/pkg/utils"
	"net/http"
	"time"
)

// GetRequestEventsAttempts2 - Filter by number of attempts
type GetRequestEventsAttempts2 struct {
	Any      *bool  `queryParam:"name=any"`
	Contains *int64 `queryParam:"name=contains"`
	Gt       *int64 `queryParam:"name=gt"`
	Gte      *int64 `queryParam:"name=gte"`
	Le       *int64 `queryParam:"name=le"`
	Lte      *int64 `queryParam:"name=lte"`
}

func (o *GetRequestEventsAttempts2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetRequestEventsAttempts2) GetContains() *int64 {
	if o == nil {
		return nil
	}
	return o.Contains
}

func (o *GetRequestEventsAttempts2) GetGt() *int64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetRequestEventsAttempts2) GetGte() *int64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetRequestEventsAttempts2) GetLe() *int64 {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetRequestEventsAttempts2) GetLte() *int64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type GetRequestEventsAttemptsType string

const (
	GetRequestEventsAttemptsTypeInteger                   GetRequestEventsAttemptsType = "integer"
	GetRequestEventsAttemptsTypeGetRequestEventsAttempts2 GetRequestEventsAttemptsType = "getRequestEventsAttempts_2"
)

type GetRequestEventsAttempts struct {
	Integer                   *int64
	GetRequestEventsAttempts2 *GetRequestEventsAttempts2

	Type GetRequestEventsAttemptsType
}

func CreateGetRequestEventsAttemptsInteger(integer int64) GetRequestEventsAttempts {
	typ := GetRequestEventsAttemptsTypeInteger

	return GetRequestEventsAttempts{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateGetRequestEventsAttemptsGetRequestEventsAttempts2(getRequestEventsAttempts2 GetRequestEventsAttempts2) GetRequestEventsAttempts {
	typ := GetRequestEventsAttemptsTypeGetRequestEventsAttempts2

	return GetRequestEventsAttempts{
		GetRequestEventsAttempts2: &getRequestEventsAttempts2,
		Type:                      typ,
	}
}

func (u *GetRequestEventsAttempts) UnmarshalJSON(data []byte) error {

	getRequestEventsAttempts2 := new(GetRequestEventsAttempts2)
	if err := utils.UnmarshalJSON(data, &getRequestEventsAttempts2, "", true, true); err == nil {
		u.GetRequestEventsAttempts2 = getRequestEventsAttempts2
		u.Type = GetRequestEventsAttemptsTypeGetRequestEventsAttempts2
		return nil
	}

	integer := new(int64)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = integer
		u.Type = GetRequestEventsAttemptsTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsAttempts) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.GetRequestEventsAttempts2 != nil {
		return utils.MarshalJSON(u.GetRequestEventsAttempts2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetRequestEventsBody2 - URL Encoded string of the JSON to match to the data body
type GetRequestEventsBody2 struct {
}

type GetRequestEventsBodyType string

const (
	GetRequestEventsBodyTypeStr                   GetRequestEventsBodyType = "str"
	GetRequestEventsBodyTypeGetRequestEventsBody2 GetRequestEventsBodyType = "getRequestEventsBody_2"
)

type GetRequestEventsBody struct {
	Str                   *string
	GetRequestEventsBody2 *GetRequestEventsBody2

	Type GetRequestEventsBodyType
}

func CreateGetRequestEventsBodyStr(str string) GetRequestEventsBody {
	typ := GetRequestEventsBodyTypeStr

	return GetRequestEventsBody{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestEventsBodyGetRequestEventsBody2(getRequestEventsBody2 GetRequestEventsBody2) GetRequestEventsBody {
	typ := GetRequestEventsBodyTypeGetRequestEventsBody2

	return GetRequestEventsBody{
		GetRequestEventsBody2: &getRequestEventsBody2,
		Type:                  typ,
	}
}

func (u *GetRequestEventsBody) UnmarshalJSON(data []byte) error {

	getRequestEventsBody2 := new(GetRequestEventsBody2)
	if err := utils.UnmarshalJSON(data, &getRequestEventsBody2, "", true, true); err == nil {
		u.GetRequestEventsBody2 = getRequestEventsBody2
		u.Type = GetRequestEventsBodyTypeGetRequestEventsBody2
		return nil
	}

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = GetRequestEventsBodyTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsBody) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.GetRequestEventsBody2 != nil {
		return utils.MarshalJSON(u.GetRequestEventsBody2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestEventsBulkRetryIDType string

const (
	GetRequestEventsBulkRetryIDTypeStr        GetRequestEventsBulkRetryIDType = "str"
	GetRequestEventsBulkRetryIDTypeArrayOfstr GetRequestEventsBulkRetryIDType = "arrayOfstr"
)

type GetRequestEventsBulkRetryID struct {
	Str        *string
	ArrayOfstr []string

	Type GetRequestEventsBulkRetryIDType
}

func CreateGetRequestEventsBulkRetryIDStr(str string) GetRequestEventsBulkRetryID {
	typ := GetRequestEventsBulkRetryIDTypeStr

	return GetRequestEventsBulkRetryID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestEventsBulkRetryIDArrayOfstr(arrayOfstr []string) GetRequestEventsBulkRetryID {
	typ := GetRequestEventsBulkRetryIDTypeArrayOfstr

	return GetRequestEventsBulkRetryID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetRequestEventsBulkRetryID) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = GetRequestEventsBulkRetryIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetRequestEventsBulkRetryIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsBulkRetryID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetRequestEventsCliID2 - Filter by CLI IDs. `?[any]=true` operator for any CLI.
type GetRequestEventsCliID2 struct {
	Any *bool `queryParam:"name=any"`
}

func (o *GetRequestEventsCliID2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

type GetRequestEventsCliIDType string

const (
	GetRequestEventsCliIDTypeStr                    GetRequestEventsCliIDType = "str"
	GetRequestEventsCliIDTypeGetRequestEventsCliID2 GetRequestEventsCliIDType = "getRequestEventsCliID_2"
	GetRequestEventsCliIDTypeArrayOfstr             GetRequestEventsCliIDType = "arrayOfstr"
)

type GetRequestEventsCliID struct {
	Str                    *string
	GetRequestEventsCliID2 *GetRequestEventsCliID2
	ArrayOfstr             []string

	Type GetRequestEventsCliIDType
}

func CreateGetRequestEventsCliIDStr(str string) GetRequestEventsCliID {
	typ := GetRequestEventsCliIDTypeStr

	return GetRequestEventsCliID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestEventsCliIDGetRequestEventsCliID2(getRequestEventsCliID2 GetRequestEventsCliID2) GetRequestEventsCliID {
	typ := GetRequestEventsCliIDTypeGetRequestEventsCliID2

	return GetRequestEventsCliID{
		GetRequestEventsCliID2: &getRequestEventsCliID2,
		Type:                   typ,
	}
}

func CreateGetRequestEventsCliIDArrayOfstr(arrayOfstr []string) GetRequestEventsCliID {
	typ := GetRequestEventsCliIDTypeArrayOfstr

	return GetRequestEventsCliID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetRequestEventsCliID) UnmarshalJSON(data []byte) error {

	getRequestEventsCliID2 := new(GetRequestEventsCliID2)
	if err := utils.UnmarshalJSON(data, &getRequestEventsCliID2, "", true, true); err == nil {
		u.GetRequestEventsCliID2 = getRequestEventsCliID2
		u.Type = GetRequestEventsCliIDTypeGetRequestEventsCliID2
		return nil
	}

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = GetRequestEventsCliIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetRequestEventsCliIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsCliID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.GetRequestEventsCliID2 != nil {
		return utils.MarshalJSON(u.GetRequestEventsCliID2, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestEventsCliUserIDType string

const (
	GetRequestEventsCliUserIDTypeStr        GetRequestEventsCliUserIDType = "str"
	GetRequestEventsCliUserIDTypeArrayOfstr GetRequestEventsCliUserIDType = "arrayOfstr"
)

type GetRequestEventsCliUserID struct {
	Str        *string
	ArrayOfstr []string

	Type GetRequestEventsCliUserIDType
}

func CreateGetRequestEventsCliUserIDStr(str string) GetRequestEventsCliUserID {
	typ := GetRequestEventsCliUserIDTypeStr

	return GetRequestEventsCliUserID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestEventsCliUserIDArrayOfstr(arrayOfstr []string) GetRequestEventsCliUserID {
	typ := GetRequestEventsCliUserIDTypeArrayOfstr

	return GetRequestEventsCliUserID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetRequestEventsCliUserID) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = GetRequestEventsCliUserIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetRequestEventsCliUserIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsCliUserID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetRequestEventsCreatedAt2 - Filter by `created_at` date using a date operator
type GetRequestEventsCreatedAt2 struct {
	Any *bool      `queryParam:"name=any"`
	Gt  *time.Time `queryParam:"name=gt"`
	Gte *time.Time `queryParam:"name=gte"`
	Le  *time.Time `queryParam:"name=le"`
	Lte *time.Time `queryParam:"name=lte"`
}

func (g GetRequestEventsCreatedAt2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetRequestEventsCreatedAt2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetRequestEventsCreatedAt2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetRequestEventsCreatedAt2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetRequestEventsCreatedAt2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetRequestEventsCreatedAt2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetRequestEventsCreatedAt2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type GetRequestEventsCreatedAtType string

const (
	GetRequestEventsCreatedAtTypeDateTime                   GetRequestEventsCreatedAtType = "date-time"
	GetRequestEventsCreatedAtTypeGetRequestEventsCreatedAt2 GetRequestEventsCreatedAtType = "getRequestEventsCreatedAt_2"
)

type GetRequestEventsCreatedAt struct {
	DateTime                   *time.Time
	GetRequestEventsCreatedAt2 *GetRequestEventsCreatedAt2

	Type GetRequestEventsCreatedAtType
}

func CreateGetRequestEventsCreatedAtDateTime(dateTime time.Time) GetRequestEventsCreatedAt {
	typ := GetRequestEventsCreatedAtTypeDateTime

	return GetRequestEventsCreatedAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateGetRequestEventsCreatedAtGetRequestEventsCreatedAt2(getRequestEventsCreatedAt2 GetRequestEventsCreatedAt2) GetRequestEventsCreatedAt {
	typ := GetRequestEventsCreatedAtTypeGetRequestEventsCreatedAt2

	return GetRequestEventsCreatedAt{
		GetRequestEventsCreatedAt2: &getRequestEventsCreatedAt2,
		Type:                       typ,
	}
}

func (u *GetRequestEventsCreatedAt) UnmarshalJSON(data []byte) error {

	getRequestEventsCreatedAt2 := new(GetRequestEventsCreatedAt2)
	if err := utils.UnmarshalJSON(data, &getRequestEventsCreatedAt2, "", true, true); err == nil {
		u.GetRequestEventsCreatedAt2 = getRequestEventsCreatedAt2
		u.Type = GetRequestEventsCreatedAtTypeGetRequestEventsCreatedAt2
		return nil
	}

	dateTime := new(time.Time)
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = dateTime
		u.Type = GetRequestEventsCreatedAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsCreatedAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.GetRequestEventsCreatedAt2 != nil {
		return utils.MarshalJSON(u.GetRequestEventsCreatedAt2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestEventsDestinationIDType string

const (
	GetRequestEventsDestinationIDTypeStr        GetRequestEventsDestinationIDType = "str"
	GetRequestEventsDestinationIDTypeArrayOfstr GetRequestEventsDestinationIDType = "arrayOfstr"
)

type GetRequestEventsDestinationID struct {
	Str        *string
	ArrayOfstr []string

	Type GetRequestEventsDestinationIDType
}

func CreateGetRequestEventsDestinationIDStr(str string) GetRequestEventsDestinationID {
	typ := GetRequestEventsDestinationIDTypeStr

	return GetRequestEventsDestinationID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestEventsDestinationIDArrayOfstr(arrayOfstr []string) GetRequestEventsDestinationID {
	typ := GetRequestEventsDestinationIDTypeArrayOfstr

	return GetRequestEventsDestinationID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetRequestEventsDestinationID) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = GetRequestEventsDestinationIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetRequestEventsDestinationIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsDestinationID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestEventsDir2 string

const (
	GetRequestEventsDir2Asc  GetRequestEventsDir2 = "asc"
	GetRequestEventsDir2Desc GetRequestEventsDir2 = "desc"
)

func (e GetRequestEventsDir2) ToPointer() *GetRequestEventsDir2 {
	return &e
}

func (e *GetRequestEventsDir2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetRequestEventsDir2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRequestEventsDir2: %v", v)
	}
}

// GetRequestEventsDir1 - Sort direction
type GetRequestEventsDir1 string

const (
	GetRequestEventsDir1Asc  GetRequestEventsDir1 = "asc"
	GetRequestEventsDir1Desc GetRequestEventsDir1 = "desc"
)

func (e GetRequestEventsDir1) ToPointer() *GetRequestEventsDir1 {
	return &e
}

func (e *GetRequestEventsDir1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetRequestEventsDir1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRequestEventsDir1: %v", v)
	}
}

type GetRequestEventsDirType string

const (
	GetRequestEventsDirTypeGetRequestEventsDir1        GetRequestEventsDirType = "getRequestEventsDir_1"
	GetRequestEventsDirTypeArrayOfgetRequestEventsDir2 GetRequestEventsDirType = "arrayOfgetRequestEventsDir_2"
)

type GetRequestEventsDir struct {
	GetRequestEventsDir1        *GetRequestEventsDir1
	ArrayOfgetRequestEventsDir2 []GetRequestEventsDir2

	Type GetRequestEventsDirType
}

func CreateGetRequestEventsDirGetRequestEventsDir1(getRequestEventsDir1 GetRequestEventsDir1) GetRequestEventsDir {
	typ := GetRequestEventsDirTypeGetRequestEventsDir1

	return GetRequestEventsDir{
		GetRequestEventsDir1: &getRequestEventsDir1,
		Type:                 typ,
	}
}

func CreateGetRequestEventsDirArrayOfgetRequestEventsDir2(arrayOfgetRequestEventsDir2 []GetRequestEventsDir2) GetRequestEventsDir {
	typ := GetRequestEventsDirTypeArrayOfgetRequestEventsDir2

	return GetRequestEventsDir{
		ArrayOfgetRequestEventsDir2: arrayOfgetRequestEventsDir2,
		Type:                        typ,
	}
}

func (u *GetRequestEventsDir) UnmarshalJSON(data []byte) error {

	getRequestEventsDir1 := new(GetRequestEventsDir1)
	if err := utils.UnmarshalJSON(data, &getRequestEventsDir1, "", true, true); err == nil {
		u.GetRequestEventsDir1 = getRequestEventsDir1
		u.Type = GetRequestEventsDirTypeGetRequestEventsDir1
		return nil
	}

	arrayOfgetRequestEventsDir2 := []GetRequestEventsDir2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetRequestEventsDir2, "", true, true); err == nil {
		u.ArrayOfgetRequestEventsDir2 = arrayOfgetRequestEventsDir2
		u.Type = GetRequestEventsDirTypeArrayOfgetRequestEventsDir2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsDir) MarshalJSON() ([]byte, error) {
	if u.GetRequestEventsDir1 != nil {
		return utils.MarshalJSON(u.GetRequestEventsDir1, "", true)
	}

	if u.ArrayOfgetRequestEventsDir2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetRequestEventsDir2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestEventsErrorCodeType string

const (
	GetRequestEventsErrorCodeTypeStr        GetRequestEventsErrorCodeType = "str"
	GetRequestEventsErrorCodeTypeArrayOfstr GetRequestEventsErrorCodeType = "arrayOfstr"
)

type GetRequestEventsErrorCode struct {
	Str        *string
	ArrayOfstr []string

	Type GetRequestEventsErrorCodeType
}

func CreateGetRequestEventsErrorCodeStr(str string) GetRequestEventsErrorCode {
	typ := GetRequestEventsErrorCodeTypeStr

	return GetRequestEventsErrorCode{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestEventsErrorCodeArrayOfstr(arrayOfstr []string) GetRequestEventsErrorCode {
	typ := GetRequestEventsErrorCodeTypeArrayOfstr

	return GetRequestEventsErrorCode{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetRequestEventsErrorCode) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = GetRequestEventsErrorCodeTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetRequestEventsErrorCodeTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsErrorCode) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestEventsEventDataIDType string

const (
	GetRequestEventsEventDataIDTypeStr        GetRequestEventsEventDataIDType = "str"
	GetRequestEventsEventDataIDTypeArrayOfstr GetRequestEventsEventDataIDType = "arrayOfstr"
)

type GetRequestEventsEventDataID struct {
	Str        *string
	ArrayOfstr []string

	Type GetRequestEventsEventDataIDType
}

func CreateGetRequestEventsEventDataIDStr(str string) GetRequestEventsEventDataID {
	typ := GetRequestEventsEventDataIDTypeStr

	return GetRequestEventsEventDataID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestEventsEventDataIDArrayOfstr(arrayOfstr []string) GetRequestEventsEventDataID {
	typ := GetRequestEventsEventDataIDTypeArrayOfstr

	return GetRequestEventsEventDataID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetRequestEventsEventDataID) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = GetRequestEventsEventDataIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetRequestEventsEventDataIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsEventDataID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetRequestEventsHeaders2 - URL Encoded string of the JSON to match to the data headers
type GetRequestEventsHeaders2 struct {
}

type GetRequestEventsHeadersType string

const (
	GetRequestEventsHeadersTypeStr                      GetRequestEventsHeadersType = "str"
	GetRequestEventsHeadersTypeGetRequestEventsHeaders2 GetRequestEventsHeadersType = "getRequestEventsHeaders_2"
)

type GetRequestEventsHeaders struct {
	Str                      *string
	GetRequestEventsHeaders2 *GetRequestEventsHeaders2

	Type GetRequestEventsHeadersType
}

func CreateGetRequestEventsHeadersStr(str string) GetRequestEventsHeaders {
	typ := GetRequestEventsHeadersTypeStr

	return GetRequestEventsHeaders{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestEventsHeadersGetRequestEventsHeaders2(getRequestEventsHeaders2 GetRequestEventsHeaders2) GetRequestEventsHeaders {
	typ := GetRequestEventsHeadersTypeGetRequestEventsHeaders2

	return GetRequestEventsHeaders{
		GetRequestEventsHeaders2: &getRequestEventsHeaders2,
		Type:                     typ,
	}
}

func (u *GetRequestEventsHeaders) UnmarshalJSON(data []byte) error {

	getRequestEventsHeaders2 := new(GetRequestEventsHeaders2)
	if err := utils.UnmarshalJSON(data, &getRequestEventsHeaders2, "", true, true); err == nil {
		u.GetRequestEventsHeaders2 = getRequestEventsHeaders2
		u.Type = GetRequestEventsHeadersTypeGetRequestEventsHeaders2
		return nil
	}

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = GetRequestEventsHeadersTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsHeaders) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.GetRequestEventsHeaders2 != nil {
		return utils.MarshalJSON(u.GetRequestEventsHeaders2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestEventsIDType string

const (
	GetRequestEventsIDTypeStr        GetRequestEventsIDType = "str"
	GetRequestEventsIDTypeArrayOfstr GetRequestEventsIDType = "arrayOfstr"
)

type GetRequestEventsID struct {
	Str        *string
	ArrayOfstr []string

	Type GetRequestEventsIDType
}

func CreateGetRequestEventsIDStr(str string) GetRequestEventsID {
	typ := GetRequestEventsIDTypeStr

	return GetRequestEventsID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestEventsIDArrayOfstr(arrayOfstr []string) GetRequestEventsID {
	typ := GetRequestEventsIDTypeArrayOfstr

	return GetRequestEventsID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetRequestEventsID) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = GetRequestEventsIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetRequestEventsIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetRequestEventsInclude - Include the data object in the event model
type GetRequestEventsInclude string

const (
	GetRequestEventsIncludeData GetRequestEventsInclude = "data"
)

func (e GetRequestEventsInclude) ToPointer() *GetRequestEventsInclude {
	return &e
}

func (e *GetRequestEventsInclude) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "data":
		*e = GetRequestEventsInclude(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRequestEventsInclude: %v", v)
	}
}

type GetRequestEventsIssueIDType string

const (
	GetRequestEventsIssueIDTypeStr        GetRequestEventsIssueIDType = "str"
	GetRequestEventsIssueIDTypeArrayOfstr GetRequestEventsIssueIDType = "arrayOfstr"
)

type GetRequestEventsIssueID struct {
	Str        *string
	ArrayOfstr []string

	Type GetRequestEventsIssueIDType
}

func CreateGetRequestEventsIssueIDStr(str string) GetRequestEventsIssueID {
	typ := GetRequestEventsIssueIDTypeStr

	return GetRequestEventsIssueID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestEventsIssueIDArrayOfstr(arrayOfstr []string) GetRequestEventsIssueID {
	typ := GetRequestEventsIssueIDTypeArrayOfstr

	return GetRequestEventsIssueID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetRequestEventsIssueID) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = GetRequestEventsIssueIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetRequestEventsIssueIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsIssueID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetRequestEventsLastAttemptAt2 - Filter by `last_attempt_at` date using a date operator
type GetRequestEventsLastAttemptAt2 struct {
	Any *bool      `queryParam:"name=any"`
	Gt  *time.Time `queryParam:"name=gt"`
	Gte *time.Time `queryParam:"name=gte"`
	Le  *time.Time `queryParam:"name=le"`
	Lte *time.Time `queryParam:"name=lte"`
}

func (g GetRequestEventsLastAttemptAt2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetRequestEventsLastAttemptAt2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetRequestEventsLastAttemptAt2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetRequestEventsLastAttemptAt2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetRequestEventsLastAttemptAt2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetRequestEventsLastAttemptAt2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetRequestEventsLastAttemptAt2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type GetRequestEventsLastAttemptAtType string

const (
	GetRequestEventsLastAttemptAtTypeDateTime                       GetRequestEventsLastAttemptAtType = "date-time"
	GetRequestEventsLastAttemptAtTypeGetRequestEventsLastAttemptAt2 GetRequestEventsLastAttemptAtType = "getRequestEventsLastAttemptAt_2"
)

type GetRequestEventsLastAttemptAt struct {
	DateTime                       *time.Time
	GetRequestEventsLastAttemptAt2 *GetRequestEventsLastAttemptAt2

	Type GetRequestEventsLastAttemptAtType
}

func CreateGetRequestEventsLastAttemptAtDateTime(dateTime time.Time) GetRequestEventsLastAttemptAt {
	typ := GetRequestEventsLastAttemptAtTypeDateTime

	return GetRequestEventsLastAttemptAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateGetRequestEventsLastAttemptAtGetRequestEventsLastAttemptAt2(getRequestEventsLastAttemptAt2 GetRequestEventsLastAttemptAt2) GetRequestEventsLastAttemptAt {
	typ := GetRequestEventsLastAttemptAtTypeGetRequestEventsLastAttemptAt2

	return GetRequestEventsLastAttemptAt{
		GetRequestEventsLastAttemptAt2: &getRequestEventsLastAttemptAt2,
		Type:                           typ,
	}
}

func (u *GetRequestEventsLastAttemptAt) UnmarshalJSON(data []byte) error {

	getRequestEventsLastAttemptAt2 := new(GetRequestEventsLastAttemptAt2)
	if err := utils.UnmarshalJSON(data, &getRequestEventsLastAttemptAt2, "", true, true); err == nil {
		u.GetRequestEventsLastAttemptAt2 = getRequestEventsLastAttemptAt2
		u.Type = GetRequestEventsLastAttemptAtTypeGetRequestEventsLastAttemptAt2
		return nil
	}

	dateTime := new(time.Time)
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = dateTime
		u.Type = GetRequestEventsLastAttemptAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsLastAttemptAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.GetRequestEventsLastAttemptAt2 != nil {
		return utils.MarshalJSON(u.GetRequestEventsLastAttemptAt2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestEventsOrderBy2 string

const (
	GetRequestEventsOrderBy2LastAttemptAt GetRequestEventsOrderBy2 = "last_attempt_at"
	GetRequestEventsOrderBy2NextAttemptAt GetRequestEventsOrderBy2 = "next_attempt_at"
	GetRequestEventsOrderBy2CreatedAt     GetRequestEventsOrderBy2 = "created_at"
)

func (e GetRequestEventsOrderBy2) ToPointer() *GetRequestEventsOrderBy2 {
	return &e
}

func (e *GetRequestEventsOrderBy2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "last_attempt_at":
		fallthrough
	case "next_attempt_at":
		fallthrough
	case "created_at":
		*e = GetRequestEventsOrderBy2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRequestEventsOrderBy2: %v", v)
	}
}

// GetRequestEventsOrderBy1 - Sort key(s)
type GetRequestEventsOrderBy1 string

const (
	GetRequestEventsOrderBy1LastAttemptAt GetRequestEventsOrderBy1 = "last_attempt_at"
	GetRequestEventsOrderBy1NextAttemptAt GetRequestEventsOrderBy1 = "next_attempt_at"
	GetRequestEventsOrderBy1CreatedAt     GetRequestEventsOrderBy1 = "created_at"
)

func (e GetRequestEventsOrderBy1) ToPointer() *GetRequestEventsOrderBy1 {
	return &e
}

func (e *GetRequestEventsOrderBy1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "last_attempt_at":
		fallthrough
	case "next_attempt_at":
		fallthrough
	case "created_at":
		*e = GetRequestEventsOrderBy1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRequestEventsOrderBy1: %v", v)
	}
}

type GetRequestEventsOrderByType string

const (
	GetRequestEventsOrderByTypeGetRequestEventsOrderBy1        GetRequestEventsOrderByType = "getRequestEventsOrderBy_1"
	GetRequestEventsOrderByTypeArrayOfgetRequestEventsOrderBy2 GetRequestEventsOrderByType = "arrayOfgetRequestEventsOrderBy_2"
)

type GetRequestEventsOrderBy struct {
	GetRequestEventsOrderBy1        *GetRequestEventsOrderBy1
	ArrayOfgetRequestEventsOrderBy2 []GetRequestEventsOrderBy2

	Type GetRequestEventsOrderByType
}

func CreateGetRequestEventsOrderByGetRequestEventsOrderBy1(getRequestEventsOrderBy1 GetRequestEventsOrderBy1) GetRequestEventsOrderBy {
	typ := GetRequestEventsOrderByTypeGetRequestEventsOrderBy1

	return GetRequestEventsOrderBy{
		GetRequestEventsOrderBy1: &getRequestEventsOrderBy1,
		Type:                     typ,
	}
}

func CreateGetRequestEventsOrderByArrayOfgetRequestEventsOrderBy2(arrayOfgetRequestEventsOrderBy2 []GetRequestEventsOrderBy2) GetRequestEventsOrderBy {
	typ := GetRequestEventsOrderByTypeArrayOfgetRequestEventsOrderBy2

	return GetRequestEventsOrderBy{
		ArrayOfgetRequestEventsOrderBy2: arrayOfgetRequestEventsOrderBy2,
		Type:                            typ,
	}
}

func (u *GetRequestEventsOrderBy) UnmarshalJSON(data []byte) error {

	getRequestEventsOrderBy1 := new(GetRequestEventsOrderBy1)
	if err := utils.UnmarshalJSON(data, &getRequestEventsOrderBy1, "", true, true); err == nil {
		u.GetRequestEventsOrderBy1 = getRequestEventsOrderBy1
		u.Type = GetRequestEventsOrderByTypeGetRequestEventsOrderBy1
		return nil
	}

	arrayOfgetRequestEventsOrderBy2 := []GetRequestEventsOrderBy2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetRequestEventsOrderBy2, "", true, true); err == nil {
		u.ArrayOfgetRequestEventsOrderBy2 = arrayOfgetRequestEventsOrderBy2
		u.Type = GetRequestEventsOrderByTypeArrayOfgetRequestEventsOrderBy2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsOrderBy) MarshalJSON() ([]byte, error) {
	if u.GetRequestEventsOrderBy1 != nil {
		return utils.MarshalJSON(u.GetRequestEventsOrderBy1, "", true)
	}

	if u.ArrayOfgetRequestEventsOrderBy2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetRequestEventsOrderBy2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetRequestEventsParsedQuery2 - URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)
type GetRequestEventsParsedQuery2 struct {
}

type GetRequestEventsParsedQueryType string

const (
	GetRequestEventsParsedQueryTypeStr                          GetRequestEventsParsedQueryType = "str"
	GetRequestEventsParsedQueryTypeGetRequestEventsParsedQuery2 GetRequestEventsParsedQueryType = "getRequestEventsParsedQuery_2"
)

type GetRequestEventsParsedQuery struct {
	Str                          *string
	GetRequestEventsParsedQuery2 *GetRequestEventsParsedQuery2

	Type GetRequestEventsParsedQueryType
}

func CreateGetRequestEventsParsedQueryStr(str string) GetRequestEventsParsedQuery {
	typ := GetRequestEventsParsedQueryTypeStr

	return GetRequestEventsParsedQuery{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestEventsParsedQueryGetRequestEventsParsedQuery2(getRequestEventsParsedQuery2 GetRequestEventsParsedQuery2) GetRequestEventsParsedQuery {
	typ := GetRequestEventsParsedQueryTypeGetRequestEventsParsedQuery2

	return GetRequestEventsParsedQuery{
		GetRequestEventsParsedQuery2: &getRequestEventsParsedQuery2,
		Type:                         typ,
	}
}

func (u *GetRequestEventsParsedQuery) UnmarshalJSON(data []byte) error {

	getRequestEventsParsedQuery2 := new(GetRequestEventsParsedQuery2)
	if err := utils.UnmarshalJSON(data, &getRequestEventsParsedQuery2, "", true, true); err == nil {
		u.GetRequestEventsParsedQuery2 = getRequestEventsParsedQuery2
		u.Type = GetRequestEventsParsedQueryTypeGetRequestEventsParsedQuery2
		return nil
	}

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = GetRequestEventsParsedQueryTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsParsedQuery) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.GetRequestEventsParsedQuery2 != nil {
		return utils.MarshalJSON(u.GetRequestEventsParsedQuery2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetRequestEventsResponseStatus2 - Filter by HTTP response status code
type GetRequestEventsResponseStatus2 struct {
	Any      *bool  `queryParam:"name=any"`
	Contains *int64 `queryParam:"name=contains"`
	Gt       *int64 `queryParam:"name=gt"`
	Gte      *int64 `queryParam:"name=gte"`
	Le       *int64 `queryParam:"name=le"`
	Lte      *int64 `queryParam:"name=lte"`
}

func (o *GetRequestEventsResponseStatus2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetRequestEventsResponseStatus2) GetContains() *int64 {
	if o == nil {
		return nil
	}
	return o.Contains
}

func (o *GetRequestEventsResponseStatus2) GetGt() *int64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetRequestEventsResponseStatus2) GetGte() *int64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetRequestEventsResponseStatus2) GetLe() *int64 {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetRequestEventsResponseStatus2) GetLte() *int64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type GetRequestEventsResponseStatusType string

const (
	GetRequestEventsResponseStatusTypeInteger                         GetRequestEventsResponseStatusType = "integer"
	GetRequestEventsResponseStatusTypeGetRequestEventsResponseStatus2 GetRequestEventsResponseStatusType = "getRequestEventsResponseStatus_2"
	GetRequestEventsResponseStatusTypeArrayOfinteger                  GetRequestEventsResponseStatusType = "arrayOfinteger"
)

type GetRequestEventsResponseStatus struct {
	Integer                         *int64
	GetRequestEventsResponseStatus2 *GetRequestEventsResponseStatus2
	ArrayOfinteger                  []int64

	Type GetRequestEventsResponseStatusType
}

func CreateGetRequestEventsResponseStatusInteger(integer int64) GetRequestEventsResponseStatus {
	typ := GetRequestEventsResponseStatusTypeInteger

	return GetRequestEventsResponseStatus{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateGetRequestEventsResponseStatusGetRequestEventsResponseStatus2(getRequestEventsResponseStatus2 GetRequestEventsResponseStatus2) GetRequestEventsResponseStatus {
	typ := GetRequestEventsResponseStatusTypeGetRequestEventsResponseStatus2

	return GetRequestEventsResponseStatus{
		GetRequestEventsResponseStatus2: &getRequestEventsResponseStatus2,
		Type:                            typ,
	}
}

func CreateGetRequestEventsResponseStatusArrayOfinteger(arrayOfinteger []int64) GetRequestEventsResponseStatus {
	typ := GetRequestEventsResponseStatusTypeArrayOfinteger

	return GetRequestEventsResponseStatus{
		ArrayOfinteger: arrayOfinteger,
		Type:           typ,
	}
}

func (u *GetRequestEventsResponseStatus) UnmarshalJSON(data []byte) error {

	getRequestEventsResponseStatus2 := new(GetRequestEventsResponseStatus2)
	if err := utils.UnmarshalJSON(data, &getRequestEventsResponseStatus2, "", true, true); err == nil {
		u.GetRequestEventsResponseStatus2 = getRequestEventsResponseStatus2
		u.Type = GetRequestEventsResponseStatusTypeGetRequestEventsResponseStatus2
		return nil
	}

	integer := new(int64)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = integer
		u.Type = GetRequestEventsResponseStatusTypeInteger
		return nil
	}

	arrayOfinteger := []int64{}
	if err := utils.UnmarshalJSON(data, &arrayOfinteger, "", true, true); err == nil {
		u.ArrayOfinteger = arrayOfinteger
		u.Type = GetRequestEventsResponseStatusTypeArrayOfinteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsResponseStatus) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.GetRequestEventsResponseStatus2 != nil {
		return utils.MarshalJSON(u.GetRequestEventsResponseStatus2, "", true)
	}

	if u.ArrayOfinteger != nil {
		return utils.MarshalJSON(u.ArrayOfinteger, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestEventsSourceIDType string

const (
	GetRequestEventsSourceIDTypeStr        GetRequestEventsSourceIDType = "str"
	GetRequestEventsSourceIDTypeArrayOfstr GetRequestEventsSourceIDType = "arrayOfstr"
)

type GetRequestEventsSourceID struct {
	Str        *string
	ArrayOfstr []string

	Type GetRequestEventsSourceIDType
}

func CreateGetRequestEventsSourceIDStr(str string) GetRequestEventsSourceID {
	typ := GetRequestEventsSourceIDTypeStr

	return GetRequestEventsSourceID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestEventsSourceIDArrayOfstr(arrayOfstr []string) GetRequestEventsSourceID {
	typ := GetRequestEventsSourceIDTypeArrayOfstr

	return GetRequestEventsSourceID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetRequestEventsSourceID) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = GetRequestEventsSourceIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetRequestEventsSourceIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsSourceID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestEventsStatusType string

const (
	GetRequestEventsStatusTypeEventStatus        GetRequestEventsStatusType = "EventStatus"
	GetRequestEventsStatusTypeArrayOfEventStatus GetRequestEventsStatusType = "arrayOfEventStatus"
)

type GetRequestEventsStatus struct {
	EventStatus        *shared.EventStatus
	ArrayOfEventStatus []shared.EventStatus

	Type GetRequestEventsStatusType
}

func CreateGetRequestEventsStatusEventStatus(eventStatus shared.EventStatus) GetRequestEventsStatus {
	typ := GetRequestEventsStatusTypeEventStatus

	return GetRequestEventsStatus{
		EventStatus: &eventStatus,
		Type:        typ,
	}
}

func CreateGetRequestEventsStatusArrayOfEventStatus(arrayOfEventStatus []shared.EventStatus) GetRequestEventsStatus {
	typ := GetRequestEventsStatusTypeArrayOfEventStatus

	return GetRequestEventsStatus{
		ArrayOfEventStatus: arrayOfEventStatus,
		Type:               typ,
	}
}

func (u *GetRequestEventsStatus) UnmarshalJSON(data []byte) error {

	eventStatus := new(shared.EventStatus)
	if err := utils.UnmarshalJSON(data, &eventStatus, "", true, true); err == nil {
		u.EventStatus = eventStatus
		u.Type = GetRequestEventsStatusTypeEventStatus
		return nil
	}

	arrayOfEventStatus := []shared.EventStatus{}
	if err := utils.UnmarshalJSON(data, &arrayOfEventStatus, "", true, true); err == nil {
		u.ArrayOfEventStatus = arrayOfEventStatus
		u.Type = GetRequestEventsStatusTypeArrayOfEventStatus
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsStatus) MarshalJSON() ([]byte, error) {
	if u.EventStatus != nil {
		return utils.MarshalJSON(u.EventStatus, "", true)
	}

	if u.ArrayOfEventStatus != nil {
		return utils.MarshalJSON(u.ArrayOfEventStatus, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetRequestEventsSuccessfulAt2 - Filter by `successful_at` date using a date operator
type GetRequestEventsSuccessfulAt2 struct {
	Any *bool      `queryParam:"name=any"`
	Gt  *time.Time `queryParam:"name=gt"`
	Gte *time.Time `queryParam:"name=gte"`
	Le  *time.Time `queryParam:"name=le"`
	Lte *time.Time `queryParam:"name=lte"`
}

func (g GetRequestEventsSuccessfulAt2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetRequestEventsSuccessfulAt2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetRequestEventsSuccessfulAt2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetRequestEventsSuccessfulAt2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetRequestEventsSuccessfulAt2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetRequestEventsSuccessfulAt2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetRequestEventsSuccessfulAt2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type GetRequestEventsSuccessfulAtType string

const (
	GetRequestEventsSuccessfulAtTypeDateTime                      GetRequestEventsSuccessfulAtType = "date-time"
	GetRequestEventsSuccessfulAtTypeGetRequestEventsSuccessfulAt2 GetRequestEventsSuccessfulAtType = "getRequestEventsSuccessfulAt_2"
)

type GetRequestEventsSuccessfulAt struct {
	DateTime                      *time.Time
	GetRequestEventsSuccessfulAt2 *GetRequestEventsSuccessfulAt2

	Type GetRequestEventsSuccessfulAtType
}

func CreateGetRequestEventsSuccessfulAtDateTime(dateTime time.Time) GetRequestEventsSuccessfulAt {
	typ := GetRequestEventsSuccessfulAtTypeDateTime

	return GetRequestEventsSuccessfulAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateGetRequestEventsSuccessfulAtGetRequestEventsSuccessfulAt2(getRequestEventsSuccessfulAt2 GetRequestEventsSuccessfulAt2) GetRequestEventsSuccessfulAt {
	typ := GetRequestEventsSuccessfulAtTypeGetRequestEventsSuccessfulAt2

	return GetRequestEventsSuccessfulAt{
		GetRequestEventsSuccessfulAt2: &getRequestEventsSuccessfulAt2,
		Type:                          typ,
	}
}

func (u *GetRequestEventsSuccessfulAt) UnmarshalJSON(data []byte) error {

	getRequestEventsSuccessfulAt2 := new(GetRequestEventsSuccessfulAt2)
	if err := utils.UnmarshalJSON(data, &getRequestEventsSuccessfulAt2, "", true, true); err == nil {
		u.GetRequestEventsSuccessfulAt2 = getRequestEventsSuccessfulAt2
		u.Type = GetRequestEventsSuccessfulAtTypeGetRequestEventsSuccessfulAt2
		return nil
	}

	dateTime := new(time.Time)
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = dateTime
		u.Type = GetRequestEventsSuccessfulAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsSuccessfulAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.GetRequestEventsSuccessfulAt2 != nil {
		return utils.MarshalJSON(u.GetRequestEventsSuccessfulAt2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestEventsWebhookIDType string

const (
	GetRequestEventsWebhookIDTypeStr        GetRequestEventsWebhookIDType = "str"
	GetRequestEventsWebhookIDTypeArrayOfstr GetRequestEventsWebhookIDType = "arrayOfstr"
)

type GetRequestEventsWebhookID struct {
	Str        *string
	ArrayOfstr []string

	Type GetRequestEventsWebhookIDType
}

func CreateGetRequestEventsWebhookIDStr(str string) GetRequestEventsWebhookID {
	typ := GetRequestEventsWebhookIDTypeStr

	return GetRequestEventsWebhookID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestEventsWebhookIDArrayOfstr(arrayOfstr []string) GetRequestEventsWebhookID {
	typ := GetRequestEventsWebhookIDTypeArrayOfstr

	return GetRequestEventsWebhookID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetRequestEventsWebhookID) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = GetRequestEventsWebhookIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetRequestEventsWebhookIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestEventsWebhookID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestEventsRequest struct {
	Attempts         *GetRequestEventsAttempts      `queryParam:"style=form,explode=true,name=attempts"`
	Body             *GetRequestEventsBody          `queryParam:"style=form,explode=true,name=body"`
	BulkRetryID      *GetRequestEventsBulkRetryID   `queryParam:"style=form,explode=true,name=bulk_retry_id"`
	CliID            *GetRequestEventsCliID         `queryParam:"style=form,explode=true,name=cli_id"`
	CliUserID        *GetRequestEventsCliUserID     `queryParam:"style=form,explode=true,name=cli_user_id"`
	CreatedAt        *GetRequestEventsCreatedAt     `queryParam:"style=form,explode=true,name=created_at"`
	DestinationID    *GetRequestEventsDestinationID `queryParam:"style=form,explode=true,name=destination_id"`
	Dir              *GetRequestEventsDir           `queryParam:"style=form,explode=true,name=dir"`
	ErrorCode        *GetRequestEventsErrorCode     `queryParam:"style=form,explode=true,name=error_code"`
	EventDataID      *GetRequestEventsEventDataID   `queryParam:"style=form,explode=true,name=event_data_id"`
	Headers          *GetRequestEventsHeaders       `queryParam:"style=form,explode=true,name=headers"`
	IDPathParameter  string                         `pathParam:"style=simple,explode=false,name=id"`
	IDQueryParameter *GetRequestEventsID            `queryParam:"style=form,explode=true,name=id"`
	// Include the data object in the event model
	Include        *GetRequestEventsInclude        `queryParam:"style=form,explode=true,name=include"`
	IssueID        *GetRequestEventsIssueID        `queryParam:"style=form,explode=true,name=issue_id"`
	LastAttemptAt  *GetRequestEventsLastAttemptAt  `queryParam:"style=form,explode=true,name=last_attempt_at"`
	Limit          *int64                          `queryParam:"style=form,explode=true,name=limit"`
	Next           *string                         `queryParam:"style=form,explode=true,name=next"`
	OrderBy        *GetRequestEventsOrderBy        `queryParam:"style=form,explode=true,name=order_by"`
	ParsedQuery    *GetRequestEventsParsedQuery    `queryParam:"style=form,explode=true,name=parsed_query"`
	Path           *string                         `queryParam:"style=form,explode=true,name=path"`
	Prev           *string                         `queryParam:"style=form,explode=true,name=prev"`
	ResponseStatus *GetRequestEventsResponseStatus `queryParam:"style=form,explode=true,name=response_status"`
	SearchTerm     *string                         `queryParam:"style=form,explode=true,name=search_term"`
	SourceID       *GetRequestEventsSourceID       `queryParam:"style=form,explode=true,name=source_id"`
	Status         *GetRequestEventsStatus         `queryParam:"style=form,explode=true,name=status"`
	SuccessfulAt   *GetRequestEventsSuccessfulAt   `queryParam:"style=form,explode=true,name=successful_at"`
	WebhookID      *GetRequestEventsWebhookID      `queryParam:"style=form,explode=true,name=webhook_id"`
}

func (o *GetRequestEventsRequest) GetAttempts() *GetRequestEventsAttempts {
	if o == nil {
		return nil
	}
	return o.Attempts
}

func (o *GetRequestEventsRequest) GetBody() *GetRequestEventsBody {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *GetRequestEventsRequest) GetBulkRetryID() *GetRequestEventsBulkRetryID {
	if o == nil {
		return nil
	}
	return o.BulkRetryID
}

func (o *GetRequestEventsRequest) GetCliID() *GetRequestEventsCliID {
	if o == nil {
		return nil
	}
	return o.CliID
}

func (o *GetRequestEventsRequest) GetCliUserID() *GetRequestEventsCliUserID {
	if o == nil {
		return nil
	}
	return o.CliUserID
}

func (o *GetRequestEventsRequest) GetCreatedAt() *GetRequestEventsCreatedAt {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetRequestEventsRequest) GetDestinationID() *GetRequestEventsDestinationID {
	if o == nil {
		return nil
	}
	return o.DestinationID
}

func (o *GetRequestEventsRequest) GetDir() *GetRequestEventsDir {
	if o == nil {
		return nil
	}
	return o.Dir
}

func (o *GetRequestEventsRequest) GetErrorCode() *GetRequestEventsErrorCode {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *GetRequestEventsRequest) GetEventDataID() *GetRequestEventsEventDataID {
	if o == nil {
		return nil
	}
	return o.EventDataID
}

func (o *GetRequestEventsRequest) GetHeaders() *GetRequestEventsHeaders {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *GetRequestEventsRequest) GetIDPathParameter() string {
	if o == nil {
		return ""
	}
	return o.IDPathParameter
}

func (o *GetRequestEventsRequest) GetIDQueryParameter() *GetRequestEventsID {
	if o == nil {
		return nil
	}
	return o.IDQueryParameter
}

func (o *GetRequestEventsRequest) GetInclude() *GetRequestEventsInclude {
	if o == nil {
		return nil
	}
	return o.Include
}

func (o *GetRequestEventsRequest) GetIssueID() *GetRequestEventsIssueID {
	if o == nil {
		return nil
	}
	return o.IssueID
}

func (o *GetRequestEventsRequest) GetLastAttemptAt() *GetRequestEventsLastAttemptAt {
	if o == nil {
		return nil
	}
	return o.LastAttemptAt
}

func (o *GetRequestEventsRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetRequestEventsRequest) GetNext() *string {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *GetRequestEventsRequest) GetOrderBy() *GetRequestEventsOrderBy {
	if o == nil {
		return nil
	}
	return o.OrderBy
}

func (o *GetRequestEventsRequest) GetParsedQuery() *GetRequestEventsParsedQuery {
	if o == nil {
		return nil
	}
	return o.ParsedQuery
}

func (o *GetRequestEventsRequest) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *GetRequestEventsRequest) GetPrev() *string {
	if o == nil {
		return nil
	}
	return o.Prev
}

func (o *GetRequestEventsRequest) GetResponseStatus() *GetRequestEventsResponseStatus {
	if o == nil {
		return nil
	}
	return o.ResponseStatus
}

func (o *GetRequestEventsRequest) GetSearchTerm() *string {
	if o == nil {
		return nil
	}
	return o.SearchTerm
}

func (o *GetRequestEventsRequest) GetSourceID() *GetRequestEventsSourceID {
	if o == nil {
		return nil
	}
	return o.SourceID
}

func (o *GetRequestEventsRequest) GetStatus() *GetRequestEventsStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetRequestEventsRequest) GetSuccessfulAt() *GetRequestEventsSuccessfulAt {
	if o == nil {
		return nil
	}
	return o.SuccessfulAt
}

func (o *GetRequestEventsRequest) GetWebhookID() *GetRequestEventsWebhookID {
	if o == nil {
		return nil
	}
	return o.WebhookID
}

type GetRequestEventsResponse struct {
	// Bad Request
	APIErrorResponse *shared.APIErrorResponse
	// HTTP response content type for this operation
	ContentType string
	// List of events
	EventPaginatedResult *shared.EventPaginatedResult
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetRequestEventsResponse) GetAPIErrorResponse() *shared.APIErrorResponse {
	if o == nil {
		return nil
	}
	return o.APIErrorResponse
}

func (o *GetRequestEventsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetRequestEventsResponse) GetEventPaginatedResult() *shared.EventPaginatedResult {
	if o == nil {
		return nil
	}
	return o.EventPaginatedResult
}

func (o *GetRequestEventsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetRequestEventsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
