// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"hashicups/internal/sdk/pkg/models/shared"
	"net/http"
	"time"
)

// CreateEventBulkRetryRequestBodyQueryAttempts2 - Filter by number of attempts
type CreateEventBulkRetryRequestBodyQueryAttempts2 struct {
	Any      *bool  `json:"any,omitempty"`
	Contains *int64 `json:"contains,omitempty"`
	Gt       *int64 `json:"gt,omitempty"`
	Gte      *int64 `json:"gte,omitempty"`
	Le       *int64 `json:"le,omitempty"`
	Lte      *int64 `json:"lte,omitempty"`
}

type CreateEventBulkRetryRequestBodyQueryAttemptsType string

const (
	CreateEventBulkRetryRequestBodyQueryAttemptsTypeInteger                                       CreateEventBulkRetryRequestBodyQueryAttemptsType = "integer"
	CreateEventBulkRetryRequestBodyQueryAttemptsTypeCreateEventBulkRetryRequestBodyQueryAttempts2 CreateEventBulkRetryRequestBodyQueryAttemptsType = "createEventBulkRetry_requestBody_query_attempts_2"
)

type CreateEventBulkRetryRequestBodyQueryAttempts struct {
	Integer                                       *int64
	CreateEventBulkRetryRequestBodyQueryAttempts2 *CreateEventBulkRetryRequestBodyQueryAttempts2

	Type CreateEventBulkRetryRequestBodyQueryAttemptsType
}

func CreateCreateEventBulkRetryRequestBodyQueryAttemptsInteger(integer int64) CreateEventBulkRetryRequestBodyQueryAttempts {
	typ := CreateEventBulkRetryRequestBodyQueryAttemptsTypeInteger

	return CreateEventBulkRetryRequestBodyQueryAttempts{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateCreateEventBulkRetryRequestBodyQueryAttemptsCreateEventBulkRetryRequestBodyQueryAttempts2(createEventBulkRetryRequestBodyQueryAttempts2 CreateEventBulkRetryRequestBodyQueryAttempts2) CreateEventBulkRetryRequestBodyQueryAttempts {
	typ := CreateEventBulkRetryRequestBodyQueryAttemptsTypeCreateEventBulkRetryRequestBodyQueryAttempts2

	return CreateEventBulkRetryRequestBodyQueryAttempts{
		CreateEventBulkRetryRequestBodyQueryAttempts2: &createEventBulkRetryRequestBodyQueryAttempts2,
		Type: typ,
	}
}

func (u *CreateEventBulkRetryRequestBodyQueryAttempts) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	integer := new(int64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&integer); err == nil {
		u.Integer = integer
		u.Type = CreateEventBulkRetryRequestBodyQueryAttemptsTypeInteger
		return nil
	}

	createEventBulkRetryRequestBodyQueryAttempts2 := new(CreateEventBulkRetryRequestBodyQueryAttempts2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&createEventBulkRetryRequestBodyQueryAttempts2); err == nil {
		u.CreateEventBulkRetryRequestBodyQueryAttempts2 = createEventBulkRetryRequestBodyQueryAttempts2
		u.Type = CreateEventBulkRetryRequestBodyQueryAttemptsTypeCreateEventBulkRetryRequestBodyQueryAttempts2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateEventBulkRetryRequestBodyQueryAttempts) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return json.Marshal(u.Integer)
	}

	if u.CreateEventBulkRetryRequestBodyQueryAttempts2 != nil {
		return json.Marshal(u.CreateEventBulkRetryRequestBodyQueryAttempts2)
	}

	return nil, nil
}

// CreateEventBulkRetryRequestBodyQueryBody2 - URL Encoded string of the JSON to match to the data body
type CreateEventBulkRetryRequestBodyQueryBody2 struct {
}

type CreateEventBulkRetryRequestBodyQueryBodyType string

const (
	CreateEventBulkRetryRequestBodyQueryBodyTypeStr                                       CreateEventBulkRetryRequestBodyQueryBodyType = "str"
	CreateEventBulkRetryRequestBodyQueryBodyTypeCreateEventBulkRetryRequestBodyQueryBody2 CreateEventBulkRetryRequestBodyQueryBodyType = "createEventBulkRetry_requestBody_query_body_2"
)

type CreateEventBulkRetryRequestBodyQueryBody struct {
	Str                                       *string
	CreateEventBulkRetryRequestBodyQueryBody2 *CreateEventBulkRetryRequestBodyQueryBody2

	Type CreateEventBulkRetryRequestBodyQueryBodyType
}

func CreateCreateEventBulkRetryRequestBodyQueryBodyStr(str string) CreateEventBulkRetryRequestBodyQueryBody {
	typ := CreateEventBulkRetryRequestBodyQueryBodyTypeStr

	return CreateEventBulkRetryRequestBodyQueryBody{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateEventBulkRetryRequestBodyQueryBodyCreateEventBulkRetryRequestBodyQueryBody2(createEventBulkRetryRequestBodyQueryBody2 CreateEventBulkRetryRequestBodyQueryBody2) CreateEventBulkRetryRequestBodyQueryBody {
	typ := CreateEventBulkRetryRequestBodyQueryBodyTypeCreateEventBulkRetryRequestBodyQueryBody2

	return CreateEventBulkRetryRequestBodyQueryBody{
		CreateEventBulkRetryRequestBodyQueryBody2: &createEventBulkRetryRequestBodyQueryBody2,
		Type: typ,
	}
}

func (u *CreateEventBulkRetryRequestBodyQueryBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = CreateEventBulkRetryRequestBodyQueryBodyTypeStr
		return nil
	}

	createEventBulkRetryRequestBodyQueryBody2 := new(CreateEventBulkRetryRequestBodyQueryBody2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&createEventBulkRetryRequestBodyQueryBody2); err == nil {
		u.CreateEventBulkRetryRequestBodyQueryBody2 = createEventBulkRetryRequestBodyQueryBody2
		u.Type = CreateEventBulkRetryRequestBodyQueryBodyTypeCreateEventBulkRetryRequestBodyQueryBody2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateEventBulkRetryRequestBodyQueryBody) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.CreateEventBulkRetryRequestBodyQueryBody2 != nil {
		return json.Marshal(u.CreateEventBulkRetryRequestBodyQueryBody2)
	}

	return nil, nil
}

type CreateEventBulkRetryRequestBodyQueryBulkRetryIDType string

const (
	CreateEventBulkRetryRequestBodyQueryBulkRetryIDTypeStr        CreateEventBulkRetryRequestBodyQueryBulkRetryIDType = "str"
	CreateEventBulkRetryRequestBodyQueryBulkRetryIDTypeArrayOfstr CreateEventBulkRetryRequestBodyQueryBulkRetryIDType = "arrayOfstr"
)

type CreateEventBulkRetryRequestBodyQueryBulkRetryID struct {
	Str        *string
	ArrayOfstr []string

	Type CreateEventBulkRetryRequestBodyQueryBulkRetryIDType
}

func CreateCreateEventBulkRetryRequestBodyQueryBulkRetryIDStr(str string) CreateEventBulkRetryRequestBodyQueryBulkRetryID {
	typ := CreateEventBulkRetryRequestBodyQueryBulkRetryIDTypeStr

	return CreateEventBulkRetryRequestBodyQueryBulkRetryID{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateEventBulkRetryRequestBodyQueryBulkRetryIDArrayOfstr(arrayOfstr []string) CreateEventBulkRetryRequestBodyQueryBulkRetryID {
	typ := CreateEventBulkRetryRequestBodyQueryBulkRetryIDTypeArrayOfstr

	return CreateEventBulkRetryRequestBodyQueryBulkRetryID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *CreateEventBulkRetryRequestBodyQueryBulkRetryID) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = CreateEventBulkRetryRequestBodyQueryBulkRetryIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = CreateEventBulkRetryRequestBodyQueryBulkRetryIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateEventBulkRetryRequestBodyQueryBulkRetryID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	return nil, nil
}

// CreateEventBulkRetryRequestBodyQueryCliID2 - Filter by CLI IDs. `?[any]=true` operator for any CLI.
type CreateEventBulkRetryRequestBodyQueryCliID2 struct {
	Any *bool `json:"any,omitempty"`
}

type CreateEventBulkRetryRequestBodyQueryCliIDType string

const (
	CreateEventBulkRetryRequestBodyQueryCliIDTypeStr                                        CreateEventBulkRetryRequestBodyQueryCliIDType = "str"
	CreateEventBulkRetryRequestBodyQueryCliIDTypeCreateEventBulkRetryRequestBodyQueryCliID2 CreateEventBulkRetryRequestBodyQueryCliIDType = "createEventBulkRetry_requestBody_query_cli_id_2"
	CreateEventBulkRetryRequestBodyQueryCliIDTypeArrayOfstr                                 CreateEventBulkRetryRequestBodyQueryCliIDType = "arrayOfstr"
)

type CreateEventBulkRetryRequestBodyQueryCliID struct {
	Str                                        *string
	CreateEventBulkRetryRequestBodyQueryCliID2 *CreateEventBulkRetryRequestBodyQueryCliID2
	ArrayOfstr                                 []string

	Type CreateEventBulkRetryRequestBodyQueryCliIDType
}

func CreateCreateEventBulkRetryRequestBodyQueryCliIDStr(str string) CreateEventBulkRetryRequestBodyQueryCliID {
	typ := CreateEventBulkRetryRequestBodyQueryCliIDTypeStr

	return CreateEventBulkRetryRequestBodyQueryCliID{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateEventBulkRetryRequestBodyQueryCliIDCreateEventBulkRetryRequestBodyQueryCliID2(createEventBulkRetryRequestBodyQueryCliID2 CreateEventBulkRetryRequestBodyQueryCliID2) CreateEventBulkRetryRequestBodyQueryCliID {
	typ := CreateEventBulkRetryRequestBodyQueryCliIDTypeCreateEventBulkRetryRequestBodyQueryCliID2

	return CreateEventBulkRetryRequestBodyQueryCliID{
		CreateEventBulkRetryRequestBodyQueryCliID2: &createEventBulkRetryRequestBodyQueryCliID2,
		Type: typ,
	}
}

func CreateCreateEventBulkRetryRequestBodyQueryCliIDArrayOfstr(arrayOfstr []string) CreateEventBulkRetryRequestBodyQueryCliID {
	typ := CreateEventBulkRetryRequestBodyQueryCliIDTypeArrayOfstr

	return CreateEventBulkRetryRequestBodyQueryCliID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *CreateEventBulkRetryRequestBodyQueryCliID) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = CreateEventBulkRetryRequestBodyQueryCliIDTypeStr
		return nil
	}

	createEventBulkRetryRequestBodyQueryCliID2 := new(CreateEventBulkRetryRequestBodyQueryCliID2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&createEventBulkRetryRequestBodyQueryCliID2); err == nil {
		u.CreateEventBulkRetryRequestBodyQueryCliID2 = createEventBulkRetryRequestBodyQueryCliID2
		u.Type = CreateEventBulkRetryRequestBodyQueryCliIDTypeCreateEventBulkRetryRequestBodyQueryCliID2
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = CreateEventBulkRetryRequestBodyQueryCliIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateEventBulkRetryRequestBodyQueryCliID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.CreateEventBulkRetryRequestBodyQueryCliID2 != nil {
		return json.Marshal(u.CreateEventBulkRetryRequestBodyQueryCliID2)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	return nil, nil
}

type CreateEventBulkRetryRequestBodyQueryCliUserIDType string

const (
	CreateEventBulkRetryRequestBodyQueryCliUserIDTypeStr        CreateEventBulkRetryRequestBodyQueryCliUserIDType = "str"
	CreateEventBulkRetryRequestBodyQueryCliUserIDTypeArrayOfstr CreateEventBulkRetryRequestBodyQueryCliUserIDType = "arrayOfstr"
)

type CreateEventBulkRetryRequestBodyQueryCliUserID struct {
	Str        *string
	ArrayOfstr []string

	Type CreateEventBulkRetryRequestBodyQueryCliUserIDType
}

func CreateCreateEventBulkRetryRequestBodyQueryCliUserIDStr(str string) CreateEventBulkRetryRequestBodyQueryCliUserID {
	typ := CreateEventBulkRetryRequestBodyQueryCliUserIDTypeStr

	return CreateEventBulkRetryRequestBodyQueryCliUserID{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateEventBulkRetryRequestBodyQueryCliUserIDArrayOfstr(arrayOfstr []string) CreateEventBulkRetryRequestBodyQueryCliUserID {
	typ := CreateEventBulkRetryRequestBodyQueryCliUserIDTypeArrayOfstr

	return CreateEventBulkRetryRequestBodyQueryCliUserID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *CreateEventBulkRetryRequestBodyQueryCliUserID) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = CreateEventBulkRetryRequestBodyQueryCliUserIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = CreateEventBulkRetryRequestBodyQueryCliUserIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateEventBulkRetryRequestBodyQueryCliUserID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	return nil, nil
}

// CreateEventBulkRetryRequestBodyQueryCreatedAt2 - Filter by `created_at` date using a date operator
type CreateEventBulkRetryRequestBodyQueryCreatedAt2 struct {
	Any *bool      `json:"any,omitempty"`
	Gt  *time.Time `json:"gt,omitempty"`
	Gte *time.Time `json:"gte,omitempty"`
	Le  *time.Time `json:"le,omitempty"`
	Lte *time.Time `json:"lte,omitempty"`
}

type CreateEventBulkRetryRequestBodyQueryCreatedAtType string

const (
	CreateEventBulkRetryRequestBodyQueryCreatedAtTypeDateTime                                       CreateEventBulkRetryRequestBodyQueryCreatedAtType = "date-time"
	CreateEventBulkRetryRequestBodyQueryCreatedAtTypeCreateEventBulkRetryRequestBodyQueryCreatedAt2 CreateEventBulkRetryRequestBodyQueryCreatedAtType = "createEventBulkRetry_requestBody_query_created_at_2"
)

type CreateEventBulkRetryRequestBodyQueryCreatedAt struct {
	DateTime                                       *time.Time
	CreateEventBulkRetryRequestBodyQueryCreatedAt2 *CreateEventBulkRetryRequestBodyQueryCreatedAt2

	Type CreateEventBulkRetryRequestBodyQueryCreatedAtType
}

func CreateCreateEventBulkRetryRequestBodyQueryCreatedAtDateTime(dateTime time.Time) CreateEventBulkRetryRequestBodyQueryCreatedAt {
	typ := CreateEventBulkRetryRequestBodyQueryCreatedAtTypeDateTime

	return CreateEventBulkRetryRequestBodyQueryCreatedAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateCreateEventBulkRetryRequestBodyQueryCreatedAtCreateEventBulkRetryRequestBodyQueryCreatedAt2(createEventBulkRetryRequestBodyQueryCreatedAt2 CreateEventBulkRetryRequestBodyQueryCreatedAt2) CreateEventBulkRetryRequestBodyQueryCreatedAt {
	typ := CreateEventBulkRetryRequestBodyQueryCreatedAtTypeCreateEventBulkRetryRequestBodyQueryCreatedAt2

	return CreateEventBulkRetryRequestBodyQueryCreatedAt{
		CreateEventBulkRetryRequestBodyQueryCreatedAt2: &createEventBulkRetryRequestBodyQueryCreatedAt2,
		Type: typ,
	}
}

func (u *CreateEventBulkRetryRequestBodyQueryCreatedAt) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	dateTime := new(time.Time)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&dateTime); err == nil {
		u.DateTime = dateTime
		u.Type = CreateEventBulkRetryRequestBodyQueryCreatedAtTypeDateTime
		return nil
	}

	createEventBulkRetryRequestBodyQueryCreatedAt2 := new(CreateEventBulkRetryRequestBodyQueryCreatedAt2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&createEventBulkRetryRequestBodyQueryCreatedAt2); err == nil {
		u.CreateEventBulkRetryRequestBodyQueryCreatedAt2 = createEventBulkRetryRequestBodyQueryCreatedAt2
		u.Type = CreateEventBulkRetryRequestBodyQueryCreatedAtTypeCreateEventBulkRetryRequestBodyQueryCreatedAt2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateEventBulkRetryRequestBodyQueryCreatedAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return json.Marshal(u.DateTime)
	}

	if u.CreateEventBulkRetryRequestBodyQueryCreatedAt2 != nil {
		return json.Marshal(u.CreateEventBulkRetryRequestBodyQueryCreatedAt2)
	}

	return nil, nil
}

type CreateEventBulkRetryRequestBodyQueryDestinationIDType string

const (
	CreateEventBulkRetryRequestBodyQueryDestinationIDTypeStr        CreateEventBulkRetryRequestBodyQueryDestinationIDType = "str"
	CreateEventBulkRetryRequestBodyQueryDestinationIDTypeArrayOfstr CreateEventBulkRetryRequestBodyQueryDestinationIDType = "arrayOfstr"
)

type CreateEventBulkRetryRequestBodyQueryDestinationID struct {
	Str        *string
	ArrayOfstr []string

	Type CreateEventBulkRetryRequestBodyQueryDestinationIDType
}

func CreateCreateEventBulkRetryRequestBodyQueryDestinationIDStr(str string) CreateEventBulkRetryRequestBodyQueryDestinationID {
	typ := CreateEventBulkRetryRequestBodyQueryDestinationIDTypeStr

	return CreateEventBulkRetryRequestBodyQueryDestinationID{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateEventBulkRetryRequestBodyQueryDestinationIDArrayOfstr(arrayOfstr []string) CreateEventBulkRetryRequestBodyQueryDestinationID {
	typ := CreateEventBulkRetryRequestBodyQueryDestinationIDTypeArrayOfstr

	return CreateEventBulkRetryRequestBodyQueryDestinationID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *CreateEventBulkRetryRequestBodyQueryDestinationID) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = CreateEventBulkRetryRequestBodyQueryDestinationIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = CreateEventBulkRetryRequestBodyQueryDestinationIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateEventBulkRetryRequestBodyQueryDestinationID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	return nil, nil
}

type CreateEventBulkRetryRequestBodyQueryErrorCodeType string

const (
	CreateEventBulkRetryRequestBodyQueryErrorCodeTypeStr        CreateEventBulkRetryRequestBodyQueryErrorCodeType = "str"
	CreateEventBulkRetryRequestBodyQueryErrorCodeTypeArrayOfstr CreateEventBulkRetryRequestBodyQueryErrorCodeType = "arrayOfstr"
)

type CreateEventBulkRetryRequestBodyQueryErrorCode struct {
	Str        *string
	ArrayOfstr []string

	Type CreateEventBulkRetryRequestBodyQueryErrorCodeType
}

func CreateCreateEventBulkRetryRequestBodyQueryErrorCodeStr(str string) CreateEventBulkRetryRequestBodyQueryErrorCode {
	typ := CreateEventBulkRetryRequestBodyQueryErrorCodeTypeStr

	return CreateEventBulkRetryRequestBodyQueryErrorCode{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateEventBulkRetryRequestBodyQueryErrorCodeArrayOfstr(arrayOfstr []string) CreateEventBulkRetryRequestBodyQueryErrorCode {
	typ := CreateEventBulkRetryRequestBodyQueryErrorCodeTypeArrayOfstr

	return CreateEventBulkRetryRequestBodyQueryErrorCode{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *CreateEventBulkRetryRequestBodyQueryErrorCode) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = CreateEventBulkRetryRequestBodyQueryErrorCodeTypeStr
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = CreateEventBulkRetryRequestBodyQueryErrorCodeTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateEventBulkRetryRequestBodyQueryErrorCode) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	return nil, nil
}

type CreateEventBulkRetryRequestBodyQueryEventDataIDType string

const (
	CreateEventBulkRetryRequestBodyQueryEventDataIDTypeStr        CreateEventBulkRetryRequestBodyQueryEventDataIDType = "str"
	CreateEventBulkRetryRequestBodyQueryEventDataIDTypeArrayOfstr CreateEventBulkRetryRequestBodyQueryEventDataIDType = "arrayOfstr"
)

type CreateEventBulkRetryRequestBodyQueryEventDataID struct {
	Str        *string
	ArrayOfstr []string

	Type CreateEventBulkRetryRequestBodyQueryEventDataIDType
}

func CreateCreateEventBulkRetryRequestBodyQueryEventDataIDStr(str string) CreateEventBulkRetryRequestBodyQueryEventDataID {
	typ := CreateEventBulkRetryRequestBodyQueryEventDataIDTypeStr

	return CreateEventBulkRetryRequestBodyQueryEventDataID{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateEventBulkRetryRequestBodyQueryEventDataIDArrayOfstr(arrayOfstr []string) CreateEventBulkRetryRequestBodyQueryEventDataID {
	typ := CreateEventBulkRetryRequestBodyQueryEventDataIDTypeArrayOfstr

	return CreateEventBulkRetryRequestBodyQueryEventDataID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *CreateEventBulkRetryRequestBodyQueryEventDataID) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = CreateEventBulkRetryRequestBodyQueryEventDataIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = CreateEventBulkRetryRequestBodyQueryEventDataIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateEventBulkRetryRequestBodyQueryEventDataID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	return nil, nil
}

// CreateEventBulkRetryRequestBodyQueryHeaders2 - URL Encoded string of the JSON to match to the data headers
type CreateEventBulkRetryRequestBodyQueryHeaders2 struct {
}

type CreateEventBulkRetryRequestBodyQueryHeadersType string

const (
	CreateEventBulkRetryRequestBodyQueryHeadersTypeStr                                          CreateEventBulkRetryRequestBodyQueryHeadersType = "str"
	CreateEventBulkRetryRequestBodyQueryHeadersTypeCreateEventBulkRetryRequestBodyQueryHeaders2 CreateEventBulkRetryRequestBodyQueryHeadersType = "createEventBulkRetry_requestBody_query_headers_2"
)

type CreateEventBulkRetryRequestBodyQueryHeaders struct {
	Str                                          *string
	CreateEventBulkRetryRequestBodyQueryHeaders2 *CreateEventBulkRetryRequestBodyQueryHeaders2

	Type CreateEventBulkRetryRequestBodyQueryHeadersType
}

func CreateCreateEventBulkRetryRequestBodyQueryHeadersStr(str string) CreateEventBulkRetryRequestBodyQueryHeaders {
	typ := CreateEventBulkRetryRequestBodyQueryHeadersTypeStr

	return CreateEventBulkRetryRequestBodyQueryHeaders{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateEventBulkRetryRequestBodyQueryHeadersCreateEventBulkRetryRequestBodyQueryHeaders2(createEventBulkRetryRequestBodyQueryHeaders2 CreateEventBulkRetryRequestBodyQueryHeaders2) CreateEventBulkRetryRequestBodyQueryHeaders {
	typ := CreateEventBulkRetryRequestBodyQueryHeadersTypeCreateEventBulkRetryRequestBodyQueryHeaders2

	return CreateEventBulkRetryRequestBodyQueryHeaders{
		CreateEventBulkRetryRequestBodyQueryHeaders2: &createEventBulkRetryRequestBodyQueryHeaders2,
		Type: typ,
	}
}

func (u *CreateEventBulkRetryRequestBodyQueryHeaders) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = CreateEventBulkRetryRequestBodyQueryHeadersTypeStr
		return nil
	}

	createEventBulkRetryRequestBodyQueryHeaders2 := new(CreateEventBulkRetryRequestBodyQueryHeaders2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&createEventBulkRetryRequestBodyQueryHeaders2); err == nil {
		u.CreateEventBulkRetryRequestBodyQueryHeaders2 = createEventBulkRetryRequestBodyQueryHeaders2
		u.Type = CreateEventBulkRetryRequestBodyQueryHeadersTypeCreateEventBulkRetryRequestBodyQueryHeaders2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateEventBulkRetryRequestBodyQueryHeaders) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.CreateEventBulkRetryRequestBodyQueryHeaders2 != nil {
		return json.Marshal(u.CreateEventBulkRetryRequestBodyQueryHeaders2)
	}

	return nil, nil
}

type CreateEventBulkRetryRequestBodyQueryIDType string

const (
	CreateEventBulkRetryRequestBodyQueryIDTypeStr        CreateEventBulkRetryRequestBodyQueryIDType = "str"
	CreateEventBulkRetryRequestBodyQueryIDTypeArrayOfstr CreateEventBulkRetryRequestBodyQueryIDType = "arrayOfstr"
)

type CreateEventBulkRetryRequestBodyQueryID struct {
	Str        *string
	ArrayOfstr []string

	Type CreateEventBulkRetryRequestBodyQueryIDType
}

func CreateCreateEventBulkRetryRequestBodyQueryIDStr(str string) CreateEventBulkRetryRequestBodyQueryID {
	typ := CreateEventBulkRetryRequestBodyQueryIDTypeStr

	return CreateEventBulkRetryRequestBodyQueryID{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateEventBulkRetryRequestBodyQueryIDArrayOfstr(arrayOfstr []string) CreateEventBulkRetryRequestBodyQueryID {
	typ := CreateEventBulkRetryRequestBodyQueryIDTypeArrayOfstr

	return CreateEventBulkRetryRequestBodyQueryID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *CreateEventBulkRetryRequestBodyQueryID) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = CreateEventBulkRetryRequestBodyQueryIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = CreateEventBulkRetryRequestBodyQueryIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateEventBulkRetryRequestBodyQueryID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	return nil, nil
}

type CreateEventBulkRetryRequestBodyQueryIssueIDType string

const (
	CreateEventBulkRetryRequestBodyQueryIssueIDTypeStr        CreateEventBulkRetryRequestBodyQueryIssueIDType = "str"
	CreateEventBulkRetryRequestBodyQueryIssueIDTypeArrayOfstr CreateEventBulkRetryRequestBodyQueryIssueIDType = "arrayOfstr"
)

type CreateEventBulkRetryRequestBodyQueryIssueID struct {
	Str        *string
	ArrayOfstr []string

	Type CreateEventBulkRetryRequestBodyQueryIssueIDType
}

func CreateCreateEventBulkRetryRequestBodyQueryIssueIDStr(str string) CreateEventBulkRetryRequestBodyQueryIssueID {
	typ := CreateEventBulkRetryRequestBodyQueryIssueIDTypeStr

	return CreateEventBulkRetryRequestBodyQueryIssueID{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateEventBulkRetryRequestBodyQueryIssueIDArrayOfstr(arrayOfstr []string) CreateEventBulkRetryRequestBodyQueryIssueID {
	typ := CreateEventBulkRetryRequestBodyQueryIssueIDTypeArrayOfstr

	return CreateEventBulkRetryRequestBodyQueryIssueID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *CreateEventBulkRetryRequestBodyQueryIssueID) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = CreateEventBulkRetryRequestBodyQueryIssueIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = CreateEventBulkRetryRequestBodyQueryIssueIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateEventBulkRetryRequestBodyQueryIssueID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	return nil, nil
}

// CreateEventBulkRetryRequestBodyQueryLastAttemptAt2 - Filter by `last_attempt_at` date using a date operator
type CreateEventBulkRetryRequestBodyQueryLastAttemptAt2 struct {
	Any *bool      `json:"any,omitempty"`
	Gt  *time.Time `json:"gt,omitempty"`
	Gte *time.Time `json:"gte,omitempty"`
	Le  *time.Time `json:"le,omitempty"`
	Lte *time.Time `json:"lte,omitempty"`
}

type CreateEventBulkRetryRequestBodyQueryLastAttemptAtType string

const (
	CreateEventBulkRetryRequestBodyQueryLastAttemptAtTypeDateTime                                           CreateEventBulkRetryRequestBodyQueryLastAttemptAtType = "date-time"
	CreateEventBulkRetryRequestBodyQueryLastAttemptAtTypeCreateEventBulkRetryRequestBodyQueryLastAttemptAt2 CreateEventBulkRetryRequestBodyQueryLastAttemptAtType = "createEventBulkRetry_requestBody_query_last_attempt_at_2"
)

type CreateEventBulkRetryRequestBodyQueryLastAttemptAt struct {
	DateTime                                           *time.Time
	CreateEventBulkRetryRequestBodyQueryLastAttemptAt2 *CreateEventBulkRetryRequestBodyQueryLastAttemptAt2

	Type CreateEventBulkRetryRequestBodyQueryLastAttemptAtType
}

func CreateCreateEventBulkRetryRequestBodyQueryLastAttemptAtDateTime(dateTime time.Time) CreateEventBulkRetryRequestBodyQueryLastAttemptAt {
	typ := CreateEventBulkRetryRequestBodyQueryLastAttemptAtTypeDateTime

	return CreateEventBulkRetryRequestBodyQueryLastAttemptAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateCreateEventBulkRetryRequestBodyQueryLastAttemptAtCreateEventBulkRetryRequestBodyQueryLastAttemptAt2(createEventBulkRetryRequestBodyQueryLastAttemptAt2 CreateEventBulkRetryRequestBodyQueryLastAttemptAt2) CreateEventBulkRetryRequestBodyQueryLastAttemptAt {
	typ := CreateEventBulkRetryRequestBodyQueryLastAttemptAtTypeCreateEventBulkRetryRequestBodyQueryLastAttemptAt2

	return CreateEventBulkRetryRequestBodyQueryLastAttemptAt{
		CreateEventBulkRetryRequestBodyQueryLastAttemptAt2: &createEventBulkRetryRequestBodyQueryLastAttemptAt2,
		Type: typ,
	}
}

func (u *CreateEventBulkRetryRequestBodyQueryLastAttemptAt) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	dateTime := new(time.Time)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&dateTime); err == nil {
		u.DateTime = dateTime
		u.Type = CreateEventBulkRetryRequestBodyQueryLastAttemptAtTypeDateTime
		return nil
	}

	createEventBulkRetryRequestBodyQueryLastAttemptAt2 := new(CreateEventBulkRetryRequestBodyQueryLastAttemptAt2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&createEventBulkRetryRequestBodyQueryLastAttemptAt2); err == nil {
		u.CreateEventBulkRetryRequestBodyQueryLastAttemptAt2 = createEventBulkRetryRequestBodyQueryLastAttemptAt2
		u.Type = CreateEventBulkRetryRequestBodyQueryLastAttemptAtTypeCreateEventBulkRetryRequestBodyQueryLastAttemptAt2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateEventBulkRetryRequestBodyQueryLastAttemptAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return json.Marshal(u.DateTime)
	}

	if u.CreateEventBulkRetryRequestBodyQueryLastAttemptAt2 != nil {
		return json.Marshal(u.CreateEventBulkRetryRequestBodyQueryLastAttemptAt2)
	}

	return nil, nil
}

// CreateEventBulkRetryRequestBodyQueryParsedQuery2 - URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)
type CreateEventBulkRetryRequestBodyQueryParsedQuery2 struct {
}

type CreateEventBulkRetryRequestBodyQueryParsedQueryType string

const (
	CreateEventBulkRetryRequestBodyQueryParsedQueryTypeStr                                              CreateEventBulkRetryRequestBodyQueryParsedQueryType = "str"
	CreateEventBulkRetryRequestBodyQueryParsedQueryTypeCreateEventBulkRetryRequestBodyQueryParsedQuery2 CreateEventBulkRetryRequestBodyQueryParsedQueryType = "createEventBulkRetry_requestBody_query_parsed_query_2"
)

type CreateEventBulkRetryRequestBodyQueryParsedQuery struct {
	Str                                              *string
	CreateEventBulkRetryRequestBodyQueryParsedQuery2 *CreateEventBulkRetryRequestBodyQueryParsedQuery2

	Type CreateEventBulkRetryRequestBodyQueryParsedQueryType
}

func CreateCreateEventBulkRetryRequestBodyQueryParsedQueryStr(str string) CreateEventBulkRetryRequestBodyQueryParsedQuery {
	typ := CreateEventBulkRetryRequestBodyQueryParsedQueryTypeStr

	return CreateEventBulkRetryRequestBodyQueryParsedQuery{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateEventBulkRetryRequestBodyQueryParsedQueryCreateEventBulkRetryRequestBodyQueryParsedQuery2(createEventBulkRetryRequestBodyQueryParsedQuery2 CreateEventBulkRetryRequestBodyQueryParsedQuery2) CreateEventBulkRetryRequestBodyQueryParsedQuery {
	typ := CreateEventBulkRetryRequestBodyQueryParsedQueryTypeCreateEventBulkRetryRequestBodyQueryParsedQuery2

	return CreateEventBulkRetryRequestBodyQueryParsedQuery{
		CreateEventBulkRetryRequestBodyQueryParsedQuery2: &createEventBulkRetryRequestBodyQueryParsedQuery2,
		Type: typ,
	}
}

func (u *CreateEventBulkRetryRequestBodyQueryParsedQuery) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = CreateEventBulkRetryRequestBodyQueryParsedQueryTypeStr
		return nil
	}

	createEventBulkRetryRequestBodyQueryParsedQuery2 := new(CreateEventBulkRetryRequestBodyQueryParsedQuery2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&createEventBulkRetryRequestBodyQueryParsedQuery2); err == nil {
		u.CreateEventBulkRetryRequestBodyQueryParsedQuery2 = createEventBulkRetryRequestBodyQueryParsedQuery2
		u.Type = CreateEventBulkRetryRequestBodyQueryParsedQueryTypeCreateEventBulkRetryRequestBodyQueryParsedQuery2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateEventBulkRetryRequestBodyQueryParsedQuery) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.CreateEventBulkRetryRequestBodyQueryParsedQuery2 != nil {
		return json.Marshal(u.CreateEventBulkRetryRequestBodyQueryParsedQuery2)
	}

	return nil, nil
}

// CreateEventBulkRetryRequestBodyQueryResponseStatus2 - Filter by HTTP response status code
type CreateEventBulkRetryRequestBodyQueryResponseStatus2 struct {
	Any      *bool  `json:"any,omitempty"`
	Contains *int64 `json:"contains,omitempty"`
	Gt       *int64 `json:"gt,omitempty"`
	Gte      *int64 `json:"gte,omitempty"`
	Le       *int64 `json:"le,omitempty"`
	Lte      *int64 `json:"lte,omitempty"`
}

type CreateEventBulkRetryRequestBodyQueryResponseStatusType string

const (
	CreateEventBulkRetryRequestBodyQueryResponseStatusTypeInteger                                             CreateEventBulkRetryRequestBodyQueryResponseStatusType = "integer"
	CreateEventBulkRetryRequestBodyQueryResponseStatusTypeCreateEventBulkRetryRequestBodyQueryResponseStatus2 CreateEventBulkRetryRequestBodyQueryResponseStatusType = "createEventBulkRetry_requestBody_query_response_status_2"
	CreateEventBulkRetryRequestBodyQueryResponseStatusTypeArrayOfinteger                                      CreateEventBulkRetryRequestBodyQueryResponseStatusType = "arrayOfinteger"
)

type CreateEventBulkRetryRequestBodyQueryResponseStatus struct {
	Integer                                             *int64
	CreateEventBulkRetryRequestBodyQueryResponseStatus2 *CreateEventBulkRetryRequestBodyQueryResponseStatus2
	ArrayOfinteger                                      []int64

	Type CreateEventBulkRetryRequestBodyQueryResponseStatusType
}

func CreateCreateEventBulkRetryRequestBodyQueryResponseStatusInteger(integer int64) CreateEventBulkRetryRequestBodyQueryResponseStatus {
	typ := CreateEventBulkRetryRequestBodyQueryResponseStatusTypeInteger

	return CreateEventBulkRetryRequestBodyQueryResponseStatus{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateCreateEventBulkRetryRequestBodyQueryResponseStatusCreateEventBulkRetryRequestBodyQueryResponseStatus2(createEventBulkRetryRequestBodyQueryResponseStatus2 CreateEventBulkRetryRequestBodyQueryResponseStatus2) CreateEventBulkRetryRequestBodyQueryResponseStatus {
	typ := CreateEventBulkRetryRequestBodyQueryResponseStatusTypeCreateEventBulkRetryRequestBodyQueryResponseStatus2

	return CreateEventBulkRetryRequestBodyQueryResponseStatus{
		CreateEventBulkRetryRequestBodyQueryResponseStatus2: &createEventBulkRetryRequestBodyQueryResponseStatus2,
		Type: typ,
	}
}

func CreateCreateEventBulkRetryRequestBodyQueryResponseStatusArrayOfinteger(arrayOfinteger []int64) CreateEventBulkRetryRequestBodyQueryResponseStatus {
	typ := CreateEventBulkRetryRequestBodyQueryResponseStatusTypeArrayOfinteger

	return CreateEventBulkRetryRequestBodyQueryResponseStatus{
		ArrayOfinteger: arrayOfinteger,
		Type:           typ,
	}
}

func (u *CreateEventBulkRetryRequestBodyQueryResponseStatus) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	integer := new(int64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&integer); err == nil {
		u.Integer = integer
		u.Type = CreateEventBulkRetryRequestBodyQueryResponseStatusTypeInteger
		return nil
	}

	createEventBulkRetryRequestBodyQueryResponseStatus2 := new(CreateEventBulkRetryRequestBodyQueryResponseStatus2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&createEventBulkRetryRequestBodyQueryResponseStatus2); err == nil {
		u.CreateEventBulkRetryRequestBodyQueryResponseStatus2 = createEventBulkRetryRequestBodyQueryResponseStatus2
		u.Type = CreateEventBulkRetryRequestBodyQueryResponseStatusTypeCreateEventBulkRetryRequestBodyQueryResponseStatus2
		return nil
	}

	arrayOfinteger := []int64{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfinteger); err == nil {
		u.ArrayOfinteger = arrayOfinteger
		u.Type = CreateEventBulkRetryRequestBodyQueryResponseStatusTypeArrayOfinteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateEventBulkRetryRequestBodyQueryResponseStatus) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return json.Marshal(u.Integer)
	}

	if u.CreateEventBulkRetryRequestBodyQueryResponseStatus2 != nil {
		return json.Marshal(u.CreateEventBulkRetryRequestBodyQueryResponseStatus2)
	}

	if u.ArrayOfinteger != nil {
		return json.Marshal(u.ArrayOfinteger)
	}

	return nil, nil
}

type CreateEventBulkRetryRequestBodyQuerySourceIDType string

const (
	CreateEventBulkRetryRequestBodyQuerySourceIDTypeStr        CreateEventBulkRetryRequestBodyQuerySourceIDType = "str"
	CreateEventBulkRetryRequestBodyQuerySourceIDTypeArrayOfstr CreateEventBulkRetryRequestBodyQuerySourceIDType = "arrayOfstr"
)

type CreateEventBulkRetryRequestBodyQuerySourceID struct {
	Str        *string
	ArrayOfstr []string

	Type CreateEventBulkRetryRequestBodyQuerySourceIDType
}

func CreateCreateEventBulkRetryRequestBodyQuerySourceIDStr(str string) CreateEventBulkRetryRequestBodyQuerySourceID {
	typ := CreateEventBulkRetryRequestBodyQuerySourceIDTypeStr

	return CreateEventBulkRetryRequestBodyQuerySourceID{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateEventBulkRetryRequestBodyQuerySourceIDArrayOfstr(arrayOfstr []string) CreateEventBulkRetryRequestBodyQuerySourceID {
	typ := CreateEventBulkRetryRequestBodyQuerySourceIDTypeArrayOfstr

	return CreateEventBulkRetryRequestBodyQuerySourceID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *CreateEventBulkRetryRequestBodyQuerySourceID) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = CreateEventBulkRetryRequestBodyQuerySourceIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = CreateEventBulkRetryRequestBodyQuerySourceIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateEventBulkRetryRequestBodyQuerySourceID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	return nil, nil
}

type CreateEventBulkRetryRequestBodyQueryStatusType string

const (
	CreateEventBulkRetryRequestBodyQueryStatusTypeEventStatus        CreateEventBulkRetryRequestBodyQueryStatusType = "EventStatus"
	CreateEventBulkRetryRequestBodyQueryStatusTypeArrayOfEventStatus CreateEventBulkRetryRequestBodyQueryStatusType = "arrayOfEventStatus"
)

type CreateEventBulkRetryRequestBodyQueryStatus struct {
	EventStatus        *shared.EventStatus
	ArrayOfEventStatus []shared.EventStatus

	Type CreateEventBulkRetryRequestBodyQueryStatusType
}

func CreateCreateEventBulkRetryRequestBodyQueryStatusEventStatus(eventStatus shared.EventStatus) CreateEventBulkRetryRequestBodyQueryStatus {
	typ := CreateEventBulkRetryRequestBodyQueryStatusTypeEventStatus

	return CreateEventBulkRetryRequestBodyQueryStatus{
		EventStatus: &eventStatus,
		Type:        typ,
	}
}

func CreateCreateEventBulkRetryRequestBodyQueryStatusArrayOfEventStatus(arrayOfEventStatus []shared.EventStatus) CreateEventBulkRetryRequestBodyQueryStatus {
	typ := CreateEventBulkRetryRequestBodyQueryStatusTypeArrayOfEventStatus

	return CreateEventBulkRetryRequestBodyQueryStatus{
		ArrayOfEventStatus: arrayOfEventStatus,
		Type:               typ,
	}
}

func (u *CreateEventBulkRetryRequestBodyQueryStatus) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	eventStatus := new(shared.EventStatus)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&eventStatus); err == nil {
		u.EventStatus = eventStatus
		u.Type = CreateEventBulkRetryRequestBodyQueryStatusTypeEventStatus
		return nil
	}

	arrayOfEventStatus := []shared.EventStatus{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfEventStatus); err == nil {
		u.ArrayOfEventStatus = arrayOfEventStatus
		u.Type = CreateEventBulkRetryRequestBodyQueryStatusTypeArrayOfEventStatus
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateEventBulkRetryRequestBodyQueryStatus) MarshalJSON() ([]byte, error) {
	if u.EventStatus != nil {
		return json.Marshal(u.EventStatus)
	}

	if u.ArrayOfEventStatus != nil {
		return json.Marshal(u.ArrayOfEventStatus)
	}

	return nil, nil
}

// CreateEventBulkRetryRequestBodyQuerySuccessfulAt2 - Filter by `successful_at` date using a date operator
type CreateEventBulkRetryRequestBodyQuerySuccessfulAt2 struct {
	Any *bool      `json:"any,omitempty"`
	Gt  *time.Time `json:"gt,omitempty"`
	Gte *time.Time `json:"gte,omitempty"`
	Le  *time.Time `json:"le,omitempty"`
	Lte *time.Time `json:"lte,omitempty"`
}

type CreateEventBulkRetryRequestBodyQuerySuccessfulAtType string

const (
	CreateEventBulkRetryRequestBodyQuerySuccessfulAtTypeDateTime                                          CreateEventBulkRetryRequestBodyQuerySuccessfulAtType = "date-time"
	CreateEventBulkRetryRequestBodyQuerySuccessfulAtTypeCreateEventBulkRetryRequestBodyQuerySuccessfulAt2 CreateEventBulkRetryRequestBodyQuerySuccessfulAtType = "createEventBulkRetry_requestBody_query_successful_at_2"
)

type CreateEventBulkRetryRequestBodyQuerySuccessfulAt struct {
	DateTime                                          *time.Time
	CreateEventBulkRetryRequestBodyQuerySuccessfulAt2 *CreateEventBulkRetryRequestBodyQuerySuccessfulAt2

	Type CreateEventBulkRetryRequestBodyQuerySuccessfulAtType
}

func CreateCreateEventBulkRetryRequestBodyQuerySuccessfulAtDateTime(dateTime time.Time) CreateEventBulkRetryRequestBodyQuerySuccessfulAt {
	typ := CreateEventBulkRetryRequestBodyQuerySuccessfulAtTypeDateTime

	return CreateEventBulkRetryRequestBodyQuerySuccessfulAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateCreateEventBulkRetryRequestBodyQuerySuccessfulAtCreateEventBulkRetryRequestBodyQuerySuccessfulAt2(createEventBulkRetryRequestBodyQuerySuccessfulAt2 CreateEventBulkRetryRequestBodyQuerySuccessfulAt2) CreateEventBulkRetryRequestBodyQuerySuccessfulAt {
	typ := CreateEventBulkRetryRequestBodyQuerySuccessfulAtTypeCreateEventBulkRetryRequestBodyQuerySuccessfulAt2

	return CreateEventBulkRetryRequestBodyQuerySuccessfulAt{
		CreateEventBulkRetryRequestBodyQuerySuccessfulAt2: &createEventBulkRetryRequestBodyQuerySuccessfulAt2,
		Type: typ,
	}
}

func (u *CreateEventBulkRetryRequestBodyQuerySuccessfulAt) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	dateTime := new(time.Time)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&dateTime); err == nil {
		u.DateTime = dateTime
		u.Type = CreateEventBulkRetryRequestBodyQuerySuccessfulAtTypeDateTime
		return nil
	}

	createEventBulkRetryRequestBodyQuerySuccessfulAt2 := new(CreateEventBulkRetryRequestBodyQuerySuccessfulAt2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&createEventBulkRetryRequestBodyQuerySuccessfulAt2); err == nil {
		u.CreateEventBulkRetryRequestBodyQuerySuccessfulAt2 = createEventBulkRetryRequestBodyQuerySuccessfulAt2
		u.Type = CreateEventBulkRetryRequestBodyQuerySuccessfulAtTypeCreateEventBulkRetryRequestBodyQuerySuccessfulAt2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateEventBulkRetryRequestBodyQuerySuccessfulAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return json.Marshal(u.DateTime)
	}

	if u.CreateEventBulkRetryRequestBodyQuerySuccessfulAt2 != nil {
		return json.Marshal(u.CreateEventBulkRetryRequestBodyQuerySuccessfulAt2)
	}

	return nil, nil
}

type CreateEventBulkRetryRequestBodyQueryWebhookIDType string

const (
	CreateEventBulkRetryRequestBodyQueryWebhookIDTypeStr        CreateEventBulkRetryRequestBodyQueryWebhookIDType = "str"
	CreateEventBulkRetryRequestBodyQueryWebhookIDTypeArrayOfstr CreateEventBulkRetryRequestBodyQueryWebhookIDType = "arrayOfstr"
)

type CreateEventBulkRetryRequestBodyQueryWebhookID struct {
	Str        *string
	ArrayOfstr []string

	Type CreateEventBulkRetryRequestBodyQueryWebhookIDType
}

func CreateCreateEventBulkRetryRequestBodyQueryWebhookIDStr(str string) CreateEventBulkRetryRequestBodyQueryWebhookID {
	typ := CreateEventBulkRetryRequestBodyQueryWebhookIDTypeStr

	return CreateEventBulkRetryRequestBodyQueryWebhookID{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateEventBulkRetryRequestBodyQueryWebhookIDArrayOfstr(arrayOfstr []string) CreateEventBulkRetryRequestBodyQueryWebhookID {
	typ := CreateEventBulkRetryRequestBodyQueryWebhookIDTypeArrayOfstr

	return CreateEventBulkRetryRequestBodyQueryWebhookID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *CreateEventBulkRetryRequestBodyQueryWebhookID) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = CreateEventBulkRetryRequestBodyQueryWebhookIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = CreateEventBulkRetryRequestBodyQueryWebhookIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateEventBulkRetryRequestBodyQueryWebhookID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	return nil, nil
}

// CreateEventBulkRetryRequestBodyQuery - Filter properties for the events to be included in the bulk retry
type CreateEventBulkRetryRequestBodyQuery struct {
	// Filter by number of attempts
	Attempts *CreateEventBulkRetryRequestBodyQueryAttempts `json:"attempts,omitempty"`
	// URL Encoded string of the JSON to match to the data body
	Body        *CreateEventBulkRetryRequestBodyQueryBody        `json:"body,omitempty"`
	BulkRetryID *CreateEventBulkRetryRequestBodyQueryBulkRetryID `json:"bulk_retry_id,omitempty"`
	// Filter by CLI IDs. `?[any]=true` operator for any CLI.
	CliID     *CreateEventBulkRetryRequestBodyQueryCliID     `json:"cli_id,omitempty"`
	CliUserID *CreateEventBulkRetryRequestBodyQueryCliUserID `json:"cli_user_id,omitempty"`
	// Filter by `created_at` date using a date operator
	CreatedAt *CreateEventBulkRetryRequestBodyQueryCreatedAt `json:"created_at,omitempty"`
	// Filter by destination IDs
	DestinationID *CreateEventBulkRetryRequestBodyQueryDestinationID `json:"destination_id,omitempty"`
	ErrorCode     *CreateEventBulkRetryRequestBodyQueryErrorCode     `json:"error_code,omitempty"`
	EventDataID   *CreateEventBulkRetryRequestBodyQueryEventDataID   `json:"event_data_id,omitempty"`
	// URL Encoded string of the JSON to match to the data headers
	Headers *CreateEventBulkRetryRequestBodyQueryHeaders `json:"headers,omitempty"`
	// Filter by event IDs
	ID      *CreateEventBulkRetryRequestBodyQueryID      `json:"id,omitempty"`
	IssueID *CreateEventBulkRetryRequestBodyQueryIssueID `json:"issue_id,omitempty"`
	// Filter by `last_attempt_at` date using a date operator
	LastAttemptAt *CreateEventBulkRetryRequestBodyQueryLastAttemptAt `json:"last_attempt_at,omitempty"`
	// URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)
	ParsedQuery *CreateEventBulkRetryRequestBodyQueryParsedQuery `json:"parsed_query,omitempty"`
	// URL Encoded string of the string to match partially to the path
	Path *string `json:"path,omitempty"`
	// Filter by HTTP response status code
	ResponseStatus *CreateEventBulkRetryRequestBodyQueryResponseStatus `json:"response_status,omitempty"`
	// URL Encoded string of the string to match partially to the body, headers, parsed_query or path
	SearchTerm *string `json:"search_term,omitempty"`
	// Filter by source IDs
	SourceID *CreateEventBulkRetryRequestBodyQuerySourceID `json:"source_id,omitempty"`
	// Lifecyle status of the event
	Status *CreateEventBulkRetryRequestBodyQueryStatus `json:"status,omitempty"`
	// Filter by `successful_at` date using a date operator
	SuccessfulAt *CreateEventBulkRetryRequestBodyQuerySuccessfulAt `json:"successful_at,omitempty"`
	// Filter by webhook connection IDs
	WebhookID *CreateEventBulkRetryRequestBodyQueryWebhookID `json:"webhook_id,omitempty"`
}

type CreateEventBulkRetryRequestBody struct {
	// Filter properties for the events to be included in the bulk retry
	Query *CreateEventBulkRetryRequestBodyQuery `json:"query,omitempty"`
}

type CreateEventBulkRetryResponse struct {
	// Bad Request
	APIErrorResponse *shared.APIErrorResponse
	// A single events bulk retry
	BatchOperation *shared.BatchOperation
	ContentType    string
	StatusCode     int
	RawResponse    *http.Response
}
