// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"hashicups/internal/sdk/pkg/models/shared"
	"hashicups/internal/sdk/pkg/utils"
	"net/http"
	"time"
)

// GetRequestsBody2 - URL Encoded string of the JSON to match to the data body
type GetRequestsBody2 struct {
}

type GetRequestsBodyType string

const (
	GetRequestsBodyTypeStr              GetRequestsBodyType = "str"
	GetRequestsBodyTypeGetRequestsBody2 GetRequestsBodyType = "getRequestsBody_2"
)

type GetRequestsBody struct {
	Str              *string
	GetRequestsBody2 *GetRequestsBody2

	Type GetRequestsBodyType
}

func CreateGetRequestsBodyStr(str string) GetRequestsBody {
	typ := GetRequestsBodyTypeStr

	return GetRequestsBody{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestsBodyGetRequestsBody2(getRequestsBody2 GetRequestsBody2) GetRequestsBody {
	typ := GetRequestsBodyTypeGetRequestsBody2

	return GetRequestsBody{
		GetRequestsBody2: &getRequestsBody2,
		Type:             typ,
	}
}

func (u *GetRequestsBody) UnmarshalJSON(data []byte) error {

	getRequestsBody2 := new(GetRequestsBody2)
	if err := utils.UnmarshalJSON(data, &getRequestsBody2, "", true, true); err == nil {
		u.GetRequestsBody2 = getRequestsBody2
		u.Type = GetRequestsBodyTypeGetRequestsBody2
		return nil
	}

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = GetRequestsBodyTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestsBody) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.GetRequestsBody2 != nil {
		return utils.MarshalJSON(u.GetRequestsBody2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestsBulkRetryIDType string

const (
	GetRequestsBulkRetryIDTypeStr        GetRequestsBulkRetryIDType = "str"
	GetRequestsBulkRetryIDTypeArrayOfstr GetRequestsBulkRetryIDType = "arrayOfstr"
)

type GetRequestsBulkRetryID struct {
	Str        *string
	ArrayOfstr []string

	Type GetRequestsBulkRetryIDType
}

func CreateGetRequestsBulkRetryIDStr(str string) GetRequestsBulkRetryID {
	typ := GetRequestsBulkRetryIDTypeStr

	return GetRequestsBulkRetryID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestsBulkRetryIDArrayOfstr(arrayOfstr []string) GetRequestsBulkRetryID {
	typ := GetRequestsBulkRetryIDTypeArrayOfstr

	return GetRequestsBulkRetryID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetRequestsBulkRetryID) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = GetRequestsBulkRetryIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetRequestsBulkRetryIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestsBulkRetryID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestsCreatedAt2 struct {
	Any *bool      `queryParam:"name=any"`
	Gt  *time.Time `queryParam:"name=gt"`
	Gte *time.Time `queryParam:"name=gte"`
	Le  *time.Time `queryParam:"name=le"`
	Lte *time.Time `queryParam:"name=lte"`
}

func (g GetRequestsCreatedAt2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetRequestsCreatedAt2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetRequestsCreatedAt2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetRequestsCreatedAt2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetRequestsCreatedAt2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetRequestsCreatedAt2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetRequestsCreatedAt2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type GetRequestsCreatedAtType string

const (
	GetRequestsCreatedAtTypeDateTime              GetRequestsCreatedAtType = "date-time"
	GetRequestsCreatedAtTypeGetRequestsCreatedAt2 GetRequestsCreatedAtType = "getRequestsCreatedAt_2"
)

type GetRequestsCreatedAt struct {
	DateTime              *time.Time
	GetRequestsCreatedAt2 *GetRequestsCreatedAt2

	Type GetRequestsCreatedAtType
}

func CreateGetRequestsCreatedAtDateTime(dateTime time.Time) GetRequestsCreatedAt {
	typ := GetRequestsCreatedAtTypeDateTime

	return GetRequestsCreatedAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateGetRequestsCreatedAtGetRequestsCreatedAt2(getRequestsCreatedAt2 GetRequestsCreatedAt2) GetRequestsCreatedAt {
	typ := GetRequestsCreatedAtTypeGetRequestsCreatedAt2

	return GetRequestsCreatedAt{
		GetRequestsCreatedAt2: &getRequestsCreatedAt2,
		Type:                  typ,
	}
}

func (u *GetRequestsCreatedAt) UnmarshalJSON(data []byte) error {

	getRequestsCreatedAt2 := new(GetRequestsCreatedAt2)
	if err := utils.UnmarshalJSON(data, &getRequestsCreatedAt2, "", true, true); err == nil {
		u.GetRequestsCreatedAt2 = getRequestsCreatedAt2
		u.Type = GetRequestsCreatedAtTypeGetRequestsCreatedAt2
		return nil
	}

	dateTime := new(time.Time)
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = dateTime
		u.Type = GetRequestsCreatedAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestsCreatedAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.GetRequestsCreatedAt2 != nil {
		return utils.MarshalJSON(u.GetRequestsCreatedAt2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestsDir2 string

const (
	GetRequestsDir2Asc  GetRequestsDir2 = "asc"
	GetRequestsDir2Desc GetRequestsDir2 = "desc"
)

func (e GetRequestsDir2) ToPointer() *GetRequestsDir2 {
	return &e
}

func (e *GetRequestsDir2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetRequestsDir2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRequestsDir2: %v", v)
	}
}

// GetRequestsDir1 - Sort direction
type GetRequestsDir1 string

const (
	GetRequestsDir1Asc  GetRequestsDir1 = "asc"
	GetRequestsDir1Desc GetRequestsDir1 = "desc"
)

func (e GetRequestsDir1) ToPointer() *GetRequestsDir1 {
	return &e
}

func (e *GetRequestsDir1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetRequestsDir1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRequestsDir1: %v", v)
	}
}

type GetRequestsDirType string

const (
	GetRequestsDirTypeGetRequestsDir1        GetRequestsDirType = "getRequestsDir_1"
	GetRequestsDirTypeArrayOfgetRequestsDir2 GetRequestsDirType = "arrayOfgetRequestsDir_2"
)

type GetRequestsDir struct {
	GetRequestsDir1        *GetRequestsDir1
	ArrayOfgetRequestsDir2 []GetRequestsDir2

	Type GetRequestsDirType
}

func CreateGetRequestsDirGetRequestsDir1(getRequestsDir1 GetRequestsDir1) GetRequestsDir {
	typ := GetRequestsDirTypeGetRequestsDir1

	return GetRequestsDir{
		GetRequestsDir1: &getRequestsDir1,
		Type:            typ,
	}
}

func CreateGetRequestsDirArrayOfgetRequestsDir2(arrayOfgetRequestsDir2 []GetRequestsDir2) GetRequestsDir {
	typ := GetRequestsDirTypeArrayOfgetRequestsDir2

	return GetRequestsDir{
		ArrayOfgetRequestsDir2: arrayOfgetRequestsDir2,
		Type:                   typ,
	}
}

func (u *GetRequestsDir) UnmarshalJSON(data []byte) error {

	getRequestsDir1 := new(GetRequestsDir1)
	if err := utils.UnmarshalJSON(data, &getRequestsDir1, "", true, true); err == nil {
		u.GetRequestsDir1 = getRequestsDir1
		u.Type = GetRequestsDirTypeGetRequestsDir1
		return nil
	}

	arrayOfgetRequestsDir2 := []GetRequestsDir2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetRequestsDir2, "", true, true); err == nil {
		u.ArrayOfgetRequestsDir2 = arrayOfgetRequestsDir2
		u.Type = GetRequestsDirTypeArrayOfgetRequestsDir2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestsDir) MarshalJSON() ([]byte, error) {
	if u.GetRequestsDir1 != nil {
		return utils.MarshalJSON(u.GetRequestsDir1, "", true)
	}

	if u.ArrayOfgetRequestsDir2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetRequestsDir2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestsEventsCount2 struct {
	Any      *bool  `queryParam:"name=any"`
	Contains *int64 `queryParam:"name=contains"`
	Gt       *int64 `queryParam:"name=gt"`
	Gte      *int64 `queryParam:"name=gte"`
	Le       *int64 `queryParam:"name=le"`
	Lte      *int64 `queryParam:"name=lte"`
}

func (o *GetRequestsEventsCount2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetRequestsEventsCount2) GetContains() *int64 {
	if o == nil {
		return nil
	}
	return o.Contains
}

func (o *GetRequestsEventsCount2) GetGt() *int64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetRequestsEventsCount2) GetGte() *int64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetRequestsEventsCount2) GetLe() *int64 {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetRequestsEventsCount2) GetLte() *int64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type GetRequestsEventsCountType string

const (
	GetRequestsEventsCountTypeInteger                 GetRequestsEventsCountType = "integer"
	GetRequestsEventsCountTypeGetRequestsEventsCount2 GetRequestsEventsCountType = "getRequestsEventsCount_2"
	GetRequestsEventsCountTypeArrayOfinteger          GetRequestsEventsCountType = "arrayOfinteger"
)

type GetRequestsEventsCount struct {
	Integer                 *int64
	GetRequestsEventsCount2 *GetRequestsEventsCount2
	ArrayOfinteger          []int64

	Type GetRequestsEventsCountType
}

func CreateGetRequestsEventsCountInteger(integer int64) GetRequestsEventsCount {
	typ := GetRequestsEventsCountTypeInteger

	return GetRequestsEventsCount{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateGetRequestsEventsCountGetRequestsEventsCount2(getRequestsEventsCount2 GetRequestsEventsCount2) GetRequestsEventsCount {
	typ := GetRequestsEventsCountTypeGetRequestsEventsCount2

	return GetRequestsEventsCount{
		GetRequestsEventsCount2: &getRequestsEventsCount2,
		Type:                    typ,
	}
}

func CreateGetRequestsEventsCountArrayOfinteger(arrayOfinteger []int64) GetRequestsEventsCount {
	typ := GetRequestsEventsCountTypeArrayOfinteger

	return GetRequestsEventsCount{
		ArrayOfinteger: arrayOfinteger,
		Type:           typ,
	}
}

func (u *GetRequestsEventsCount) UnmarshalJSON(data []byte) error {

	getRequestsEventsCount2 := new(GetRequestsEventsCount2)
	if err := utils.UnmarshalJSON(data, &getRequestsEventsCount2, "", true, true); err == nil {
		u.GetRequestsEventsCount2 = getRequestsEventsCount2
		u.Type = GetRequestsEventsCountTypeGetRequestsEventsCount2
		return nil
	}

	integer := new(int64)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = integer
		u.Type = GetRequestsEventsCountTypeInteger
		return nil
	}

	arrayOfinteger := []int64{}
	if err := utils.UnmarshalJSON(data, &arrayOfinteger, "", true, true); err == nil {
		u.ArrayOfinteger = arrayOfinteger
		u.Type = GetRequestsEventsCountTypeArrayOfinteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestsEventsCount) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.GetRequestsEventsCount2 != nil {
		return utils.MarshalJSON(u.GetRequestsEventsCount2, "", true)
	}

	if u.ArrayOfinteger != nil {
		return utils.MarshalJSON(u.ArrayOfinteger, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetRequestsHeaders2 - URL Encoded string of the JSON to match to the data headers
type GetRequestsHeaders2 struct {
}

type GetRequestsHeadersType string

const (
	GetRequestsHeadersTypeStr                 GetRequestsHeadersType = "str"
	GetRequestsHeadersTypeGetRequestsHeaders2 GetRequestsHeadersType = "getRequestsHeaders_2"
)

type GetRequestsHeaders struct {
	Str                 *string
	GetRequestsHeaders2 *GetRequestsHeaders2

	Type GetRequestsHeadersType
}

func CreateGetRequestsHeadersStr(str string) GetRequestsHeaders {
	typ := GetRequestsHeadersTypeStr

	return GetRequestsHeaders{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestsHeadersGetRequestsHeaders2(getRequestsHeaders2 GetRequestsHeaders2) GetRequestsHeaders {
	typ := GetRequestsHeadersTypeGetRequestsHeaders2

	return GetRequestsHeaders{
		GetRequestsHeaders2: &getRequestsHeaders2,
		Type:                typ,
	}
}

func (u *GetRequestsHeaders) UnmarshalJSON(data []byte) error {

	getRequestsHeaders2 := new(GetRequestsHeaders2)
	if err := utils.UnmarshalJSON(data, &getRequestsHeaders2, "", true, true); err == nil {
		u.GetRequestsHeaders2 = getRequestsHeaders2
		u.Type = GetRequestsHeadersTypeGetRequestsHeaders2
		return nil
	}

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = GetRequestsHeadersTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestsHeaders) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.GetRequestsHeaders2 != nil {
		return utils.MarshalJSON(u.GetRequestsHeaders2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestsIDType string

const (
	GetRequestsIDTypeStr        GetRequestsIDType = "str"
	GetRequestsIDTypeArrayOfstr GetRequestsIDType = "arrayOfstr"
)

type GetRequestsID struct {
	Str        *string
	ArrayOfstr []string

	Type GetRequestsIDType
}

func CreateGetRequestsIDStr(str string) GetRequestsID {
	typ := GetRequestsIDTypeStr

	return GetRequestsID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestsIDArrayOfstr(arrayOfstr []string) GetRequestsID {
	typ := GetRequestsIDTypeArrayOfstr

	return GetRequestsID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetRequestsID) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = GetRequestsIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetRequestsIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestsID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestsIgnoredCount2 struct {
	Any      *bool  `queryParam:"name=any"`
	Contains *int64 `queryParam:"name=contains"`
	Gt       *int64 `queryParam:"name=gt"`
	Gte      *int64 `queryParam:"name=gte"`
	Le       *int64 `queryParam:"name=le"`
	Lte      *int64 `queryParam:"name=lte"`
}

func (o *GetRequestsIgnoredCount2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetRequestsIgnoredCount2) GetContains() *int64 {
	if o == nil {
		return nil
	}
	return o.Contains
}

func (o *GetRequestsIgnoredCount2) GetGt() *int64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetRequestsIgnoredCount2) GetGte() *int64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetRequestsIgnoredCount2) GetLe() *int64 {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetRequestsIgnoredCount2) GetLte() *int64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type GetRequestsIgnoredCountType string

const (
	GetRequestsIgnoredCountTypeInteger                  GetRequestsIgnoredCountType = "integer"
	GetRequestsIgnoredCountTypeGetRequestsIgnoredCount2 GetRequestsIgnoredCountType = "getRequestsIgnoredCount_2"
	GetRequestsIgnoredCountTypeArrayOfinteger           GetRequestsIgnoredCountType = "arrayOfinteger"
)

type GetRequestsIgnoredCount struct {
	Integer                  *int64
	GetRequestsIgnoredCount2 *GetRequestsIgnoredCount2
	ArrayOfinteger           []int64

	Type GetRequestsIgnoredCountType
}

func CreateGetRequestsIgnoredCountInteger(integer int64) GetRequestsIgnoredCount {
	typ := GetRequestsIgnoredCountTypeInteger

	return GetRequestsIgnoredCount{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateGetRequestsIgnoredCountGetRequestsIgnoredCount2(getRequestsIgnoredCount2 GetRequestsIgnoredCount2) GetRequestsIgnoredCount {
	typ := GetRequestsIgnoredCountTypeGetRequestsIgnoredCount2

	return GetRequestsIgnoredCount{
		GetRequestsIgnoredCount2: &getRequestsIgnoredCount2,
		Type:                     typ,
	}
}

func CreateGetRequestsIgnoredCountArrayOfinteger(arrayOfinteger []int64) GetRequestsIgnoredCount {
	typ := GetRequestsIgnoredCountTypeArrayOfinteger

	return GetRequestsIgnoredCount{
		ArrayOfinteger: arrayOfinteger,
		Type:           typ,
	}
}

func (u *GetRequestsIgnoredCount) UnmarshalJSON(data []byte) error {

	getRequestsIgnoredCount2 := new(GetRequestsIgnoredCount2)
	if err := utils.UnmarshalJSON(data, &getRequestsIgnoredCount2, "", true, true); err == nil {
		u.GetRequestsIgnoredCount2 = getRequestsIgnoredCount2
		u.Type = GetRequestsIgnoredCountTypeGetRequestsIgnoredCount2
		return nil
	}

	integer := new(int64)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = integer
		u.Type = GetRequestsIgnoredCountTypeInteger
		return nil
	}

	arrayOfinteger := []int64{}
	if err := utils.UnmarshalJSON(data, &arrayOfinteger, "", true, true); err == nil {
		u.ArrayOfinteger = arrayOfinteger
		u.Type = GetRequestsIgnoredCountTypeArrayOfinteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestsIgnoredCount) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.GetRequestsIgnoredCount2 != nil {
		return utils.MarshalJSON(u.GetRequestsIgnoredCount2, "", true)
	}

	if u.ArrayOfinteger != nil {
		return utils.MarshalJSON(u.ArrayOfinteger, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestsInclude string

const (
	GetRequestsIncludeData GetRequestsInclude = "data"
)

func (e GetRequestsInclude) ToPointer() *GetRequestsInclude {
	return &e
}

func (e *GetRequestsInclude) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "data":
		*e = GetRequestsInclude(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRequestsInclude: %v", v)
	}
}

type GetRequestsIngestedAt2 struct {
	Any *bool      `queryParam:"name=any"`
	Gt  *time.Time `queryParam:"name=gt"`
	Gte *time.Time `queryParam:"name=gte"`
	Le  *time.Time `queryParam:"name=le"`
	Lte *time.Time `queryParam:"name=lte"`
}

func (g GetRequestsIngestedAt2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetRequestsIngestedAt2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetRequestsIngestedAt2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetRequestsIngestedAt2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetRequestsIngestedAt2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetRequestsIngestedAt2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetRequestsIngestedAt2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type GetRequestsIngestedAtType string

const (
	GetRequestsIngestedAtTypeDateTime               GetRequestsIngestedAtType = "date-time"
	GetRequestsIngestedAtTypeGetRequestsIngestedAt2 GetRequestsIngestedAtType = "getRequestsIngestedAt_2"
)

type GetRequestsIngestedAt struct {
	DateTime               *time.Time
	GetRequestsIngestedAt2 *GetRequestsIngestedAt2

	Type GetRequestsIngestedAtType
}

func CreateGetRequestsIngestedAtDateTime(dateTime time.Time) GetRequestsIngestedAt {
	typ := GetRequestsIngestedAtTypeDateTime

	return GetRequestsIngestedAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateGetRequestsIngestedAtGetRequestsIngestedAt2(getRequestsIngestedAt2 GetRequestsIngestedAt2) GetRequestsIngestedAt {
	typ := GetRequestsIngestedAtTypeGetRequestsIngestedAt2

	return GetRequestsIngestedAt{
		GetRequestsIngestedAt2: &getRequestsIngestedAt2,
		Type:                   typ,
	}
}

func (u *GetRequestsIngestedAt) UnmarshalJSON(data []byte) error {

	getRequestsIngestedAt2 := new(GetRequestsIngestedAt2)
	if err := utils.UnmarshalJSON(data, &getRequestsIngestedAt2, "", true, true); err == nil {
		u.GetRequestsIngestedAt2 = getRequestsIngestedAt2
		u.Type = GetRequestsIngestedAtTypeGetRequestsIngestedAt2
		return nil
	}

	dateTime := new(time.Time)
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = dateTime
		u.Type = GetRequestsIngestedAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestsIngestedAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.GetRequestsIngestedAt2 != nil {
		return utils.MarshalJSON(u.GetRequestsIngestedAt2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestsOrderBy2 string

const (
	GetRequestsOrderBy2IngestedAt GetRequestsOrderBy2 = "ingested_at"
	GetRequestsOrderBy2CreatedAt  GetRequestsOrderBy2 = "created_at"
)

func (e GetRequestsOrderBy2) ToPointer() *GetRequestsOrderBy2 {
	return &e
}

func (e *GetRequestsOrderBy2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ingested_at":
		fallthrough
	case "created_at":
		*e = GetRequestsOrderBy2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRequestsOrderBy2: %v", v)
	}
}

// GetRequestsOrderBy1 - Sort key(s)
type GetRequestsOrderBy1 string

const (
	GetRequestsOrderBy1IngestedAt GetRequestsOrderBy1 = "ingested_at"
	GetRequestsOrderBy1CreatedAt  GetRequestsOrderBy1 = "created_at"
)

func (e GetRequestsOrderBy1) ToPointer() *GetRequestsOrderBy1 {
	return &e
}

func (e *GetRequestsOrderBy1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ingested_at":
		fallthrough
	case "created_at":
		*e = GetRequestsOrderBy1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRequestsOrderBy1: %v", v)
	}
}

type GetRequestsOrderByType string

const (
	GetRequestsOrderByTypeGetRequestsOrderBy1        GetRequestsOrderByType = "getRequestsOrderBy_1"
	GetRequestsOrderByTypeArrayOfgetRequestsOrderBy2 GetRequestsOrderByType = "arrayOfgetRequestsOrderBy_2"
)

type GetRequestsOrderBy struct {
	GetRequestsOrderBy1        *GetRequestsOrderBy1
	ArrayOfgetRequestsOrderBy2 []GetRequestsOrderBy2

	Type GetRequestsOrderByType
}

func CreateGetRequestsOrderByGetRequestsOrderBy1(getRequestsOrderBy1 GetRequestsOrderBy1) GetRequestsOrderBy {
	typ := GetRequestsOrderByTypeGetRequestsOrderBy1

	return GetRequestsOrderBy{
		GetRequestsOrderBy1: &getRequestsOrderBy1,
		Type:                typ,
	}
}

func CreateGetRequestsOrderByArrayOfgetRequestsOrderBy2(arrayOfgetRequestsOrderBy2 []GetRequestsOrderBy2) GetRequestsOrderBy {
	typ := GetRequestsOrderByTypeArrayOfgetRequestsOrderBy2

	return GetRequestsOrderBy{
		ArrayOfgetRequestsOrderBy2: arrayOfgetRequestsOrderBy2,
		Type:                       typ,
	}
}

func (u *GetRequestsOrderBy) UnmarshalJSON(data []byte) error {

	getRequestsOrderBy1 := new(GetRequestsOrderBy1)
	if err := utils.UnmarshalJSON(data, &getRequestsOrderBy1, "", true, true); err == nil {
		u.GetRequestsOrderBy1 = getRequestsOrderBy1
		u.Type = GetRequestsOrderByTypeGetRequestsOrderBy1
		return nil
	}

	arrayOfgetRequestsOrderBy2 := []GetRequestsOrderBy2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetRequestsOrderBy2, "", true, true); err == nil {
		u.ArrayOfgetRequestsOrderBy2 = arrayOfgetRequestsOrderBy2
		u.Type = GetRequestsOrderByTypeArrayOfgetRequestsOrderBy2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestsOrderBy) MarshalJSON() ([]byte, error) {
	if u.GetRequestsOrderBy1 != nil {
		return utils.MarshalJSON(u.GetRequestsOrderBy1, "", true)
	}

	if u.ArrayOfgetRequestsOrderBy2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetRequestsOrderBy2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetRequestsParsedQuery2 - URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)
type GetRequestsParsedQuery2 struct {
}

type GetRequestsParsedQueryType string

const (
	GetRequestsParsedQueryTypeStr                     GetRequestsParsedQueryType = "str"
	GetRequestsParsedQueryTypeGetRequestsParsedQuery2 GetRequestsParsedQueryType = "getRequestsParsedQuery_2"
)

type GetRequestsParsedQuery struct {
	Str                     *string
	GetRequestsParsedQuery2 *GetRequestsParsedQuery2

	Type GetRequestsParsedQueryType
}

func CreateGetRequestsParsedQueryStr(str string) GetRequestsParsedQuery {
	typ := GetRequestsParsedQueryTypeStr

	return GetRequestsParsedQuery{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestsParsedQueryGetRequestsParsedQuery2(getRequestsParsedQuery2 GetRequestsParsedQuery2) GetRequestsParsedQuery {
	typ := GetRequestsParsedQueryTypeGetRequestsParsedQuery2

	return GetRequestsParsedQuery{
		GetRequestsParsedQuery2: &getRequestsParsedQuery2,
		Type:                    typ,
	}
}

func (u *GetRequestsParsedQuery) UnmarshalJSON(data []byte) error {

	getRequestsParsedQuery2 := new(GetRequestsParsedQuery2)
	if err := utils.UnmarshalJSON(data, &getRequestsParsedQuery2, "", true, true); err == nil {
		u.GetRequestsParsedQuery2 = getRequestsParsedQuery2
		u.Type = GetRequestsParsedQueryTypeGetRequestsParsedQuery2
		return nil
	}

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = GetRequestsParsedQueryTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestsParsedQuery) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.GetRequestsParsedQuery2 != nil {
		return utils.MarshalJSON(u.GetRequestsParsedQuery2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetRequestsRejectionCause2 - Filter by rejection cause
type GetRequestsRejectionCause2 struct {
	Any      *bool                         `queryParam:"name=any"`
	Contains *shared.RequestRejectionCause `queryParam:"name=contains"`
	Gt       *shared.RequestRejectionCause `queryParam:"name=gt"`
	Gte      *shared.RequestRejectionCause `queryParam:"name=gte"`
	Le       *shared.RequestRejectionCause `queryParam:"name=le"`
	Lte      *shared.RequestRejectionCause `queryParam:"name=lte"`
}

func (o *GetRequestsRejectionCause2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetRequestsRejectionCause2) GetContains() *shared.RequestRejectionCause {
	if o == nil {
		return nil
	}
	return o.Contains
}

func (o *GetRequestsRejectionCause2) GetGt() *shared.RequestRejectionCause {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetRequestsRejectionCause2) GetGte() *shared.RequestRejectionCause {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetRequestsRejectionCause2) GetLe() *shared.RequestRejectionCause {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetRequestsRejectionCause2) GetLte() *shared.RequestRejectionCause {
	if o == nil {
		return nil
	}
	return o.Lte
}

// GetRequestsRejectionCauseRequestRejectionCause - Filter by rejection cause
type GetRequestsRejectionCauseRequestRejectionCause string

const (
	GetRequestsRejectionCauseRequestRejectionCauseSourceArchived         GetRequestsRejectionCauseRequestRejectionCause = "SOURCE_ARCHIVED"
	GetRequestsRejectionCauseRequestRejectionCauseNoWebhook              GetRequestsRejectionCauseRequestRejectionCause = "NO_WEBHOOK"
	GetRequestsRejectionCauseRequestRejectionCauseVerificationFailed     GetRequestsRejectionCauseRequestRejectionCause = "VERIFICATION_FAILED"
	GetRequestsRejectionCauseRequestRejectionCauseUnsupportedHTTPMethod  GetRequestsRejectionCauseRequestRejectionCause = "UNSUPPORTED_HTTP_METHOD"
	GetRequestsRejectionCauseRequestRejectionCauseUnsupportedContentType GetRequestsRejectionCauseRequestRejectionCause = "UNSUPPORTED_CONTENT_TYPE"
	GetRequestsRejectionCauseRequestRejectionCauseUnparsableJSON         GetRequestsRejectionCauseRequestRejectionCause = "UNPARSABLE_JSON"
	GetRequestsRejectionCauseRequestRejectionCausePayloadTooLarge        GetRequestsRejectionCauseRequestRejectionCause = "PAYLOAD_TOO_LARGE"
	GetRequestsRejectionCauseRequestRejectionCauseIngestionFatal         GetRequestsRejectionCauseRequestRejectionCause = "INGESTION_FATAL"
	GetRequestsRejectionCauseRequestRejectionCauseUnknown                GetRequestsRejectionCauseRequestRejectionCause = "UNKNOWN"
)

func (e GetRequestsRejectionCauseRequestRejectionCause) ToPointer() *GetRequestsRejectionCauseRequestRejectionCause {
	return &e
}

func (e *GetRequestsRejectionCauseRequestRejectionCause) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SOURCE_ARCHIVED":
		fallthrough
	case "NO_WEBHOOK":
		fallthrough
	case "VERIFICATION_FAILED":
		fallthrough
	case "UNSUPPORTED_HTTP_METHOD":
		fallthrough
	case "UNSUPPORTED_CONTENT_TYPE":
		fallthrough
	case "UNPARSABLE_JSON":
		fallthrough
	case "PAYLOAD_TOO_LARGE":
		fallthrough
	case "INGESTION_FATAL":
		fallthrough
	case "UNKNOWN":
		*e = GetRequestsRejectionCauseRequestRejectionCause(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRequestsRejectionCauseRequestRejectionCause: %v", v)
	}
}

type GetRequestsRejectionCauseType string

const (
	GetRequestsRejectionCauseTypeGetRequestsRejectionCauseRequestRejectionCause GetRequestsRejectionCauseType = "getRequestsRejectionCause_RequestRejectionCause"
	GetRequestsRejectionCauseTypeGetRequestsRejectionCause2                     GetRequestsRejectionCauseType = "getRequestsRejectionCause_2"
	GetRequestsRejectionCauseTypeArrayOfRequestRejectionCause                   GetRequestsRejectionCauseType = "arrayOfRequestRejectionCause"
)

type GetRequestsRejectionCause struct {
	GetRequestsRejectionCauseRequestRejectionCause *GetRequestsRejectionCauseRequestRejectionCause
	GetRequestsRejectionCause2                     *GetRequestsRejectionCause2
	ArrayOfRequestRejectionCause                   []shared.RequestRejectionCause

	Type GetRequestsRejectionCauseType
}

func CreateGetRequestsRejectionCauseGetRequestsRejectionCauseRequestRejectionCause(getRequestsRejectionCauseRequestRejectionCause GetRequestsRejectionCauseRequestRejectionCause) GetRequestsRejectionCause {
	typ := GetRequestsRejectionCauseTypeGetRequestsRejectionCauseRequestRejectionCause

	return GetRequestsRejectionCause{
		GetRequestsRejectionCauseRequestRejectionCause: &getRequestsRejectionCauseRequestRejectionCause,
		Type: typ,
	}
}

func CreateGetRequestsRejectionCauseGetRequestsRejectionCause2(getRequestsRejectionCause2 GetRequestsRejectionCause2) GetRequestsRejectionCause {
	typ := GetRequestsRejectionCauseTypeGetRequestsRejectionCause2

	return GetRequestsRejectionCause{
		GetRequestsRejectionCause2: &getRequestsRejectionCause2,
		Type:                       typ,
	}
}

func CreateGetRequestsRejectionCauseArrayOfRequestRejectionCause(arrayOfRequestRejectionCause []shared.RequestRejectionCause) GetRequestsRejectionCause {
	typ := GetRequestsRejectionCauseTypeArrayOfRequestRejectionCause

	return GetRequestsRejectionCause{
		ArrayOfRequestRejectionCause: arrayOfRequestRejectionCause,
		Type:                         typ,
	}
}

func (u *GetRequestsRejectionCause) UnmarshalJSON(data []byte) error {

	getRequestsRejectionCause2 := new(GetRequestsRejectionCause2)
	if err := utils.UnmarshalJSON(data, &getRequestsRejectionCause2, "", true, true); err == nil {
		u.GetRequestsRejectionCause2 = getRequestsRejectionCause2
		u.Type = GetRequestsRejectionCauseTypeGetRequestsRejectionCause2
		return nil
	}

	getRequestsRejectionCauseRequestRejectionCause := new(GetRequestsRejectionCauseRequestRejectionCause)
	if err := utils.UnmarshalJSON(data, &getRequestsRejectionCauseRequestRejectionCause, "", true, true); err == nil {
		u.GetRequestsRejectionCauseRequestRejectionCause = getRequestsRejectionCauseRequestRejectionCause
		u.Type = GetRequestsRejectionCauseTypeGetRequestsRejectionCauseRequestRejectionCause
		return nil
	}

	arrayOfRequestRejectionCause := []shared.RequestRejectionCause{}
	if err := utils.UnmarshalJSON(data, &arrayOfRequestRejectionCause, "", true, true); err == nil {
		u.ArrayOfRequestRejectionCause = arrayOfRequestRejectionCause
		u.Type = GetRequestsRejectionCauseTypeArrayOfRequestRejectionCause
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestsRejectionCause) MarshalJSON() ([]byte, error) {
	if u.GetRequestsRejectionCauseRequestRejectionCause != nil {
		return utils.MarshalJSON(u.GetRequestsRejectionCauseRequestRejectionCause, "", true)
	}

	if u.GetRequestsRejectionCause2 != nil {
		return utils.MarshalJSON(u.GetRequestsRejectionCause2, "", true)
	}

	if u.ArrayOfRequestRejectionCause != nil {
		return utils.MarshalJSON(u.ArrayOfRequestRejectionCause, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestsSourceIDType string

const (
	GetRequestsSourceIDTypeStr        GetRequestsSourceIDType = "str"
	GetRequestsSourceIDTypeArrayOfstr GetRequestsSourceIDType = "arrayOfstr"
)

type GetRequestsSourceID struct {
	Str        *string
	ArrayOfstr []string

	Type GetRequestsSourceIDType
}

func CreateGetRequestsSourceIDStr(str string) GetRequestsSourceID {
	typ := GetRequestsSourceIDTypeStr

	return GetRequestsSourceID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetRequestsSourceIDArrayOfstr(arrayOfstr []string) GetRequestsSourceID {
	typ := GetRequestsSourceIDTypeArrayOfstr

	return GetRequestsSourceID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetRequestsSourceID) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = GetRequestsSourceIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetRequestsSourceIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRequestsSourceID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetRequestsStatus string

const (
	GetRequestsStatusAccepted GetRequestsStatus = "accepted"
	GetRequestsStatusRejected GetRequestsStatus = "rejected"
)

func (e GetRequestsStatus) ToPointer() *GetRequestsStatus {
	return &e
}

func (e *GetRequestsStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "accepted":
		fallthrough
	case "rejected":
		*e = GetRequestsStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRequestsStatus: %v", v)
	}
}

type GetRequestsRequest struct {
	Body           *GetRequestsBody           `queryParam:"style=form,explode=true,name=body"`
	BulkRetryID    *GetRequestsBulkRetryID    `queryParam:"style=form,explode=true,name=bulk_retry_id"`
	CreatedAt      *GetRequestsCreatedAt      `queryParam:"style=form,explode=true,name=created_at"`
	Dir            *GetRequestsDir            `queryParam:"style=form,explode=true,name=dir"`
	EventsCount    *GetRequestsEventsCount    `queryParam:"style=form,explode=true,name=events_count"`
	Headers        *GetRequestsHeaders        `queryParam:"style=form,explode=true,name=headers"`
	ID             *GetRequestsID             `queryParam:"style=form,explode=true,name=id"`
	IgnoredCount   *GetRequestsIgnoredCount   `queryParam:"style=form,explode=true,name=ignored_count"`
	Include        *GetRequestsInclude        `queryParam:"style=form,explode=true,name=include"`
	IngestedAt     *GetRequestsIngestedAt     `queryParam:"style=form,explode=true,name=ingested_at"`
	Limit          *int64                     `queryParam:"style=form,explode=true,name=limit"`
	Next           *string                    `queryParam:"style=form,explode=true,name=next"`
	OrderBy        *GetRequestsOrderBy        `queryParam:"style=form,explode=true,name=order_by"`
	ParsedQuery    *GetRequestsParsedQuery    `queryParam:"style=form,explode=true,name=parsed_query"`
	Path           *string                    `queryParam:"style=form,explode=true,name=path"`
	Prev           *string                    `queryParam:"style=form,explode=true,name=prev"`
	RejectionCause *GetRequestsRejectionCause `queryParam:"style=form,explode=true,name=rejection_cause"`
	SearchTerm     *string                    `queryParam:"style=form,explode=true,name=search_term"`
	SourceID       *GetRequestsSourceID       `queryParam:"style=form,explode=true,name=source_id"`
	Status         *GetRequestsStatus         `queryParam:"style=form,explode=true,name=status"`
	Verified       *bool                      `queryParam:"style=form,explode=true,name=verified"`
}

func (o *GetRequestsRequest) GetBody() *GetRequestsBody {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *GetRequestsRequest) GetBulkRetryID() *GetRequestsBulkRetryID {
	if o == nil {
		return nil
	}
	return o.BulkRetryID
}

func (o *GetRequestsRequest) GetCreatedAt() *GetRequestsCreatedAt {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetRequestsRequest) GetDir() *GetRequestsDir {
	if o == nil {
		return nil
	}
	return o.Dir
}

func (o *GetRequestsRequest) GetEventsCount() *GetRequestsEventsCount {
	if o == nil {
		return nil
	}
	return o.EventsCount
}

func (o *GetRequestsRequest) GetHeaders() *GetRequestsHeaders {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *GetRequestsRequest) GetID() *GetRequestsID {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetRequestsRequest) GetIgnoredCount() *GetRequestsIgnoredCount {
	if o == nil {
		return nil
	}
	return o.IgnoredCount
}

func (o *GetRequestsRequest) GetInclude() *GetRequestsInclude {
	if o == nil {
		return nil
	}
	return o.Include
}

func (o *GetRequestsRequest) GetIngestedAt() *GetRequestsIngestedAt {
	if o == nil {
		return nil
	}
	return o.IngestedAt
}

func (o *GetRequestsRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetRequestsRequest) GetNext() *string {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *GetRequestsRequest) GetOrderBy() *GetRequestsOrderBy {
	if o == nil {
		return nil
	}
	return o.OrderBy
}

func (o *GetRequestsRequest) GetParsedQuery() *GetRequestsParsedQuery {
	if o == nil {
		return nil
	}
	return o.ParsedQuery
}

func (o *GetRequestsRequest) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *GetRequestsRequest) GetPrev() *string {
	if o == nil {
		return nil
	}
	return o.Prev
}

func (o *GetRequestsRequest) GetRejectionCause() *GetRequestsRejectionCause {
	if o == nil {
		return nil
	}
	return o.RejectionCause
}

func (o *GetRequestsRequest) GetSearchTerm() *string {
	if o == nil {
		return nil
	}
	return o.SearchTerm
}

func (o *GetRequestsRequest) GetSourceID() *GetRequestsSourceID {
	if o == nil {
		return nil
	}
	return o.SourceID
}

func (o *GetRequestsRequest) GetStatus() *GetRequestsStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetRequestsRequest) GetVerified() *bool {
	if o == nil {
		return nil
	}
	return o.Verified
}

type GetRequestsResponse struct {
	// Bad Request
	APIErrorResponse *shared.APIErrorResponse
	// HTTP response content type for this operation
	ContentType string
	// List of requests
	RequestPaginatedResult *shared.RequestPaginatedResult
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetRequestsResponse) GetAPIErrorResponse() *shared.APIErrorResponse {
	if o == nil {
		return nil
	}
	return o.APIErrorResponse
}

func (o *GetRequestsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetRequestsResponse) GetRequestPaginatedResult() *shared.RequestPaginatedResult {
	if o == nil {
		return nil
	}
	return o.RequestPaginatedResult
}

func (o *GetRequestsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetRequestsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
