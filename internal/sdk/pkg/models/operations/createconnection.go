// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"hashicups/internal/sdk/pkg/models/shared"
	"net/http"
)

// CreateConnectionRequestBodyDestinationRateLimitPeriod - Period to rate limit attempts
type CreateConnectionRequestBodyDestinationRateLimitPeriod string

const (
	CreateConnectionRequestBodyDestinationRateLimitPeriodSecond CreateConnectionRequestBodyDestinationRateLimitPeriod = "second"
	CreateConnectionRequestBodyDestinationRateLimitPeriodMinute CreateConnectionRequestBodyDestinationRateLimitPeriod = "minute"
	CreateConnectionRequestBodyDestinationRateLimitPeriodHour   CreateConnectionRequestBodyDestinationRateLimitPeriod = "hour"
)

func (e CreateConnectionRequestBodyDestinationRateLimitPeriod) ToPointer() *CreateConnectionRequestBodyDestinationRateLimitPeriod {
	return &e
}

func (e *CreateConnectionRequestBodyDestinationRateLimitPeriod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "second":
		fallthrough
	case "minute":
		fallthrough
	case "hour":
		*e = CreateConnectionRequestBodyDestinationRateLimitPeriod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateConnectionRequestBodyDestinationRateLimitPeriod: %v", v)
	}
}

// CreateConnectionRequestBodyDestination - Destination input object
type CreateConnectionRequestBodyDestination struct {
	// Config for the destination's auth method
	AuthMethod *shared.DestinationAuthMethodConfig `json:"auth_method,omitempty"`
	// Path for the CLI destination
	CliPath *string `json:"cli_path,omitempty"`
	// HTTP method used on requests sent to the destination, overrides the method used on requests sent to the source.
	HTTPMethod *shared.DestinationHTTPMethod `json:"http_method,omitempty"`
	// Name for the destination
	Name                   string `json:"name"`
	PathForwardingDisabled *bool  `json:"path_forwarding_disabled,omitempty"`
	// Limit event attempts to receive per period
	RateLimit *int64 `json:"rate_limit,omitempty"`
	// Period to rate limit attempts
	RateLimitPeriod *CreateConnectionRequestBodyDestinationRateLimitPeriod `json:"rate_limit_period,omitempty"`
	// Endpoint of the destination
	URL *string `json:"url,omitempty"`
}

func (o *CreateConnectionRequestBodyDestination) GetAuthMethod() *shared.DestinationAuthMethodConfig {
	if o == nil {
		return nil
	}
	return o.AuthMethod
}

func (o *CreateConnectionRequestBodyDestination) GetCliPath() *string {
	if o == nil {
		return nil
	}
	return o.CliPath
}

func (o *CreateConnectionRequestBodyDestination) GetHTTPMethod() *shared.DestinationHTTPMethod {
	if o == nil {
		return nil
	}
	return o.HTTPMethod
}

func (o *CreateConnectionRequestBodyDestination) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateConnectionRequestBodyDestination) GetPathForwardingDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.PathForwardingDisabled
}

func (o *CreateConnectionRequestBodyDestination) GetRateLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.RateLimit
}

func (o *CreateConnectionRequestBodyDestination) GetRateLimitPeriod() *CreateConnectionRequestBodyDestinationRateLimitPeriod {
	if o == nil {
		return nil
	}
	return o.RateLimitPeriod
}

func (o *CreateConnectionRequestBodyDestination) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

// CreateConnectionRequestBodyRuleset - Ruleset input object
type CreateConnectionRequestBodyRuleset struct {
	IsTeamDefault *bool `json:"is_team_default,omitempty"`
	// Name for the ruleset
	Name string `json:"name"`
	// Array of rules to apply
	Rules []shared.Rule `json:"rules,omitempty"`
}

func (o *CreateConnectionRequestBodyRuleset) GetIsTeamDefault() *bool {
	if o == nil {
		return nil
	}
	return o.IsTeamDefault
}

func (o *CreateConnectionRequestBodyRuleset) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateConnectionRequestBodyRuleset) GetRules() []shared.Rule {
	if o == nil {
		return nil
	}
	return o.Rules
}

// CreateConnectionRequestBodySource - Source input object
type CreateConnectionRequestBodySource struct {
	// List of allowed HTTP methods. Defaults to PUT, POST, PATCH, DELETE.
	AllowedHTTPMethods []shared.SourceAllowedHTTPMethod `json:"allowed_http_methods,omitempty"`
	// Custom response object
	CustomResponse *shared.SourceCustomResponse `json:"custom_response,omitempty"`
	// A unique name for the source
	Name string `json:"name"`
}

func (o *CreateConnectionRequestBodySource) GetAllowedHTTPMethods() []shared.SourceAllowedHTTPMethod {
	if o == nil {
		return nil
	}
	return o.AllowedHTTPMethods
}

func (o *CreateConnectionRequestBodySource) GetCustomResponse() *shared.SourceCustomResponse {
	if o == nil {
		return nil
	}
	return o.CustomResponse
}

func (o *CreateConnectionRequestBodySource) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type CreateConnectionRequestBody struct {
	// Destination input object
	Destination *CreateConnectionRequestBodyDestination `json:"destination,omitempty"`
	// ID of a destination to bind to the connection
	DestinationID *string `json:"destination_id,omitempty"`
	// A unique name of the connection for the source
	Name string `json:"name"`
	// Array of rules to apply
	Rules []shared.Rule `json:"rules,omitempty"`
	// Ruleset input object
	Ruleset *CreateConnectionRequestBodyRuleset `json:"ruleset,omitempty"`
	// ID of a rule to bind to the connection. Default to the Workspace default ruleset
	RulesetID *string `json:"ruleset_id,omitempty"`
	// Source input object
	Source *CreateConnectionRequestBodySource `json:"source,omitempty"`
	// ID of a source to bind to the connection
	SourceID *string `json:"source_id,omitempty"`
}

func (o *CreateConnectionRequestBody) GetDestination() *CreateConnectionRequestBodyDestination {
	if o == nil {
		return nil
	}
	return o.Destination
}

func (o *CreateConnectionRequestBody) GetDestinationID() *string {
	if o == nil {
		return nil
	}
	return o.DestinationID
}

func (o *CreateConnectionRequestBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateConnectionRequestBody) GetRules() []shared.Rule {
	if o == nil {
		return nil
	}
	return o.Rules
}

func (o *CreateConnectionRequestBody) GetRuleset() *CreateConnectionRequestBodyRuleset {
	if o == nil {
		return nil
	}
	return o.Ruleset
}

func (o *CreateConnectionRequestBody) GetRulesetID() *string {
	if o == nil {
		return nil
	}
	return o.RulesetID
}

func (o *CreateConnectionRequestBody) GetSource() *CreateConnectionRequestBodySource {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *CreateConnectionRequestBody) GetSourceID() *string {
	if o == nil {
		return nil
	}
	return o.SourceID
}

type CreateConnectionResponse struct {
	// Bad Request
	APIErrorResponse *shared.APIErrorResponse
	// A single connection
	Connection *shared.Connection
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *CreateConnectionResponse) GetAPIErrorResponse() *shared.APIErrorResponse {
	if o == nil {
		return nil
	}
	return o.APIErrorResponse
}

func (o *CreateConnectionResponse) GetConnection() *shared.Connection {
	if o == nil {
		return nil
	}
	return o.Connection
}

func (o *CreateConnectionResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateConnectionResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateConnectionResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
