// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"hashicups/internal/sdk/pkg/models/shared"
	"net/http"
)

type GetTransformationsDir2 string

const (
	GetTransformationsDir2Asc  GetTransformationsDir2 = "asc"
	GetTransformationsDir2Desc GetTransformationsDir2 = "desc"
)

func (e GetTransformationsDir2) ToPointer() *GetTransformationsDir2 {
	return &e
}

func (e *GetTransformationsDir2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetTransformationsDir2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTransformationsDir2: %v", v)
	}
}

// GetTransformationsDir1 - Sort direction
type GetTransformationsDir1 string

const (
	GetTransformationsDir1Asc  GetTransformationsDir1 = "asc"
	GetTransformationsDir1Desc GetTransformationsDir1 = "desc"
)

func (e GetTransformationsDir1) ToPointer() *GetTransformationsDir1 {
	return &e
}

func (e *GetTransformationsDir1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetTransformationsDir1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTransformationsDir1: %v", v)
	}
}

type GetTransformationsDirType string

const (
	GetTransformationsDirTypeGetTransformationsDir1        GetTransformationsDirType = "getTransformationsDir_1"
	GetTransformationsDirTypeArrayOfgetTransformationsDir2 GetTransformationsDirType = "arrayOfgetTransformationsDir_2"
)

type GetTransformationsDir struct {
	GetTransformationsDir1        *GetTransformationsDir1
	ArrayOfgetTransformationsDir2 []GetTransformationsDir2

	Type GetTransformationsDirType
}

func CreateGetTransformationsDirGetTransformationsDir1(getTransformationsDir1 GetTransformationsDir1) GetTransformationsDir {
	typ := GetTransformationsDirTypeGetTransformationsDir1

	return GetTransformationsDir{
		GetTransformationsDir1: &getTransformationsDir1,
		Type:                   typ,
	}
}

func CreateGetTransformationsDirArrayOfgetTransformationsDir2(arrayOfgetTransformationsDir2 []GetTransformationsDir2) GetTransformationsDir {
	typ := GetTransformationsDirTypeArrayOfgetTransformationsDir2

	return GetTransformationsDir{
		ArrayOfgetTransformationsDir2: arrayOfgetTransformationsDir2,
		Type:                          typ,
	}
}

func (u *GetTransformationsDir) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	getTransformationsDir1 := new(GetTransformationsDir1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getTransformationsDir1); err == nil {
		u.GetTransformationsDir1 = getTransformationsDir1
		u.Type = GetTransformationsDirTypeGetTransformationsDir1
		return nil
	}

	arrayOfgetTransformationsDir2 := []GetTransformationsDir2{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfgetTransformationsDir2); err == nil {
		u.ArrayOfgetTransformationsDir2 = arrayOfgetTransformationsDir2
		u.Type = GetTransformationsDirTypeArrayOfgetTransformationsDir2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetTransformationsDir) MarshalJSON() ([]byte, error) {
	if u.GetTransformationsDir1 != nil {
		return json.Marshal(u.GetTransformationsDir1)
	}

	if u.ArrayOfgetTransformationsDir2 != nil {
		return json.Marshal(u.ArrayOfgetTransformationsDir2)
	}

	return nil, nil
}

type GetTransformationsIDType string

const (
	GetTransformationsIDTypeStr        GetTransformationsIDType = "str"
	GetTransformationsIDTypeArrayOfstr GetTransformationsIDType = "arrayOfstr"
)

type GetTransformationsID struct {
	Str        *string
	ArrayOfstr []string

	Type GetTransformationsIDType
}

func CreateGetTransformationsIDStr(str string) GetTransformationsID {
	typ := GetTransformationsIDTypeStr

	return GetTransformationsID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetTransformationsIDArrayOfstr(arrayOfstr []string) GetTransformationsID {
	typ := GetTransformationsIDTypeArrayOfstr

	return GetTransformationsID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetTransformationsID) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = GetTransformationsIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetTransformationsIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetTransformationsID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	return nil, nil
}

type GetTransformationsNameType string

const (
	GetTransformationsNameTypeStr        GetTransformationsNameType = "str"
	GetTransformationsNameTypeArrayOfstr GetTransformationsNameType = "arrayOfstr"
)

type GetTransformationsName struct {
	Str        *string
	ArrayOfstr []string

	Type GetTransformationsNameType
}

func CreateGetTransformationsNameStr(str string) GetTransformationsName {
	typ := GetTransformationsNameTypeStr

	return GetTransformationsName{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetTransformationsNameArrayOfstr(arrayOfstr []string) GetTransformationsName {
	typ := GetTransformationsNameTypeArrayOfstr

	return GetTransformationsName{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetTransformationsName) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = GetTransformationsNameTypeStr
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetTransformationsNameTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetTransformationsName) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	return nil, nil
}

type GetTransformationsOrderBy2 string

const (
	GetTransformationsOrderBy2CreatedAt GetTransformationsOrderBy2 = "created_at"
)

func (e GetTransformationsOrderBy2) ToPointer() *GetTransformationsOrderBy2 {
	return &e
}

func (e *GetTransformationsOrderBy2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created_at":
		*e = GetTransformationsOrderBy2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTransformationsOrderBy2: %v", v)
	}
}

// GetTransformationsOrderBy1 - Sort key(s)
type GetTransformationsOrderBy1 string

const (
	GetTransformationsOrderBy1CreatedAt GetTransformationsOrderBy1 = "created_at"
)

func (e GetTransformationsOrderBy1) ToPointer() *GetTransformationsOrderBy1 {
	return &e
}

func (e *GetTransformationsOrderBy1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created_at":
		*e = GetTransformationsOrderBy1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTransformationsOrderBy1: %v", v)
	}
}

type GetTransformationsOrderByType string

const (
	GetTransformationsOrderByTypeGetTransformationsOrderBy1        GetTransformationsOrderByType = "getTransformationsOrderBy_1"
	GetTransformationsOrderByTypeArrayOfgetTransformationsOrderBy2 GetTransformationsOrderByType = "arrayOfgetTransformationsOrderBy_2"
)

type GetTransformationsOrderBy struct {
	GetTransformationsOrderBy1        *GetTransformationsOrderBy1
	ArrayOfgetTransformationsOrderBy2 []GetTransformationsOrderBy2

	Type GetTransformationsOrderByType
}

func CreateGetTransformationsOrderByGetTransformationsOrderBy1(getTransformationsOrderBy1 GetTransformationsOrderBy1) GetTransformationsOrderBy {
	typ := GetTransformationsOrderByTypeGetTransformationsOrderBy1

	return GetTransformationsOrderBy{
		GetTransformationsOrderBy1: &getTransformationsOrderBy1,
		Type:                       typ,
	}
}

func CreateGetTransformationsOrderByArrayOfgetTransformationsOrderBy2(arrayOfgetTransformationsOrderBy2 []GetTransformationsOrderBy2) GetTransformationsOrderBy {
	typ := GetTransformationsOrderByTypeArrayOfgetTransformationsOrderBy2

	return GetTransformationsOrderBy{
		ArrayOfgetTransformationsOrderBy2: arrayOfgetTransformationsOrderBy2,
		Type:                              typ,
	}
}

func (u *GetTransformationsOrderBy) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	getTransformationsOrderBy1 := new(GetTransformationsOrderBy1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getTransformationsOrderBy1); err == nil {
		u.GetTransformationsOrderBy1 = getTransformationsOrderBy1
		u.Type = GetTransformationsOrderByTypeGetTransformationsOrderBy1
		return nil
	}

	arrayOfgetTransformationsOrderBy2 := []GetTransformationsOrderBy2{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfgetTransformationsOrderBy2); err == nil {
		u.ArrayOfgetTransformationsOrderBy2 = arrayOfgetTransformationsOrderBy2
		u.Type = GetTransformationsOrderByTypeArrayOfgetTransformationsOrderBy2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetTransformationsOrderBy) MarshalJSON() ([]byte, error) {
	if u.GetTransformationsOrderBy1 != nil {
		return json.Marshal(u.GetTransformationsOrderBy1)
	}

	if u.ArrayOfgetTransformationsOrderBy2 != nil {
		return json.Marshal(u.ArrayOfgetTransformationsOrderBy2)
	}

	return nil, nil
}

type GetTransformationsRequest struct {
	Dir     *GetTransformationsDir     `queryParam:"style=form,explode=true,name=dir"`
	ID      *GetTransformationsID      `queryParam:"style=form,explode=true,name=id"`
	Limit   *int64                     `queryParam:"style=form,explode=true,name=limit"`
	Name    *GetTransformationsName    `queryParam:"style=form,explode=true,name=name"`
	Next    *string                    `queryParam:"style=form,explode=true,name=next"`
	OrderBy *GetTransformationsOrderBy `queryParam:"style=form,explode=true,name=order_by"`
	Prev    *string                    `queryParam:"style=form,explode=true,name=prev"`
}

type GetTransformationsResponse struct {
	// Bad Request
	APIErrorResponse *shared.APIErrorResponse
	ContentType      string
	StatusCode       int
	RawResponse      *http.Response
	// List of transformations
	TransformationPaginatedResult *shared.TransformationPaginatedResult
}
