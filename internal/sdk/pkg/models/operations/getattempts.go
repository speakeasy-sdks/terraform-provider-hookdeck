// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"hashicups/internal/sdk/pkg/models/shared"
	"hashicups/internal/sdk/pkg/utils"
	"net/http"
)

type GetAttemptsDir2 string

const (
	GetAttemptsDir2Asc  GetAttemptsDir2 = "asc"
	GetAttemptsDir2Desc GetAttemptsDir2 = "desc"
)

func (e GetAttemptsDir2) ToPointer() *GetAttemptsDir2 {
	return &e
}

func (e *GetAttemptsDir2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetAttemptsDir2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAttemptsDir2: %v", v)
	}
}

// GetAttemptsDir1 - Sort direction
type GetAttemptsDir1 string

const (
	GetAttemptsDir1Asc  GetAttemptsDir1 = "asc"
	GetAttemptsDir1Desc GetAttemptsDir1 = "desc"
)

func (e GetAttemptsDir1) ToPointer() *GetAttemptsDir1 {
	return &e
}

func (e *GetAttemptsDir1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetAttemptsDir1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAttemptsDir1: %v", v)
	}
}

type GetAttemptsDirType string

const (
	GetAttemptsDirTypeGetAttemptsDir1        GetAttemptsDirType = "getAttemptsDir_1"
	GetAttemptsDirTypeArrayOfgetAttemptsDir2 GetAttemptsDirType = "arrayOfgetAttemptsDir_2"
)

type GetAttemptsDir struct {
	GetAttemptsDir1        *GetAttemptsDir1
	ArrayOfgetAttemptsDir2 []GetAttemptsDir2

	Type GetAttemptsDirType
}

func CreateGetAttemptsDirGetAttemptsDir1(getAttemptsDir1 GetAttemptsDir1) GetAttemptsDir {
	typ := GetAttemptsDirTypeGetAttemptsDir1

	return GetAttemptsDir{
		GetAttemptsDir1: &getAttemptsDir1,
		Type:            typ,
	}
}

func CreateGetAttemptsDirArrayOfgetAttemptsDir2(arrayOfgetAttemptsDir2 []GetAttemptsDir2) GetAttemptsDir {
	typ := GetAttemptsDirTypeArrayOfgetAttemptsDir2

	return GetAttemptsDir{
		ArrayOfgetAttemptsDir2: arrayOfgetAttemptsDir2,
		Type:                   typ,
	}
}

func (u *GetAttemptsDir) UnmarshalJSON(data []byte) error {

	getAttemptsDir1 := new(GetAttemptsDir1)
	if err := utils.UnmarshalJSON(data, &getAttemptsDir1, "", true, true); err == nil {
		u.GetAttemptsDir1 = getAttemptsDir1
		u.Type = GetAttemptsDirTypeGetAttemptsDir1
		return nil
	}

	arrayOfgetAttemptsDir2 := []GetAttemptsDir2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetAttemptsDir2, "", true, true); err == nil {
		u.ArrayOfgetAttemptsDir2 = arrayOfgetAttemptsDir2
		u.Type = GetAttemptsDirTypeArrayOfgetAttemptsDir2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetAttemptsDir) MarshalJSON() ([]byte, error) {
	if u.GetAttemptsDir1 != nil {
		return utils.MarshalJSON(u.GetAttemptsDir1, "", true)
	}

	if u.ArrayOfgetAttemptsDir2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetAttemptsDir2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetAttemptsEventIDType string

const (
	GetAttemptsEventIDTypeStr        GetAttemptsEventIDType = "str"
	GetAttemptsEventIDTypeArrayOfstr GetAttemptsEventIDType = "arrayOfstr"
)

type GetAttemptsEventID struct {
	Str        *string
	ArrayOfstr []string

	Type GetAttemptsEventIDType
}

func CreateGetAttemptsEventIDStr(str string) GetAttemptsEventID {
	typ := GetAttemptsEventIDTypeStr

	return GetAttemptsEventID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetAttemptsEventIDArrayOfstr(arrayOfstr []string) GetAttemptsEventID {
	typ := GetAttemptsEventIDTypeArrayOfstr

	return GetAttemptsEventID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetAttemptsEventID) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = GetAttemptsEventIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetAttemptsEventIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetAttemptsEventID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetAttemptsOrderBy2 string

const (
	GetAttemptsOrderBy2CreatedAt GetAttemptsOrderBy2 = "created_at"
)

func (e GetAttemptsOrderBy2) ToPointer() *GetAttemptsOrderBy2 {
	return &e
}

func (e *GetAttemptsOrderBy2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created_at":
		*e = GetAttemptsOrderBy2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAttemptsOrderBy2: %v", v)
	}
}

// GetAttemptsOrderBy1 - Sort key(s)
type GetAttemptsOrderBy1 string

const (
	GetAttemptsOrderBy1CreatedAt GetAttemptsOrderBy1 = "created_at"
)

func (e GetAttemptsOrderBy1) ToPointer() *GetAttemptsOrderBy1 {
	return &e
}

func (e *GetAttemptsOrderBy1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created_at":
		*e = GetAttemptsOrderBy1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAttemptsOrderBy1: %v", v)
	}
}

type GetAttemptsOrderByType string

const (
	GetAttemptsOrderByTypeGetAttemptsOrderBy1        GetAttemptsOrderByType = "getAttemptsOrderBy_1"
	GetAttemptsOrderByTypeArrayOfgetAttemptsOrderBy2 GetAttemptsOrderByType = "arrayOfgetAttemptsOrderBy_2"
)

type GetAttemptsOrderBy struct {
	GetAttemptsOrderBy1        *GetAttemptsOrderBy1
	ArrayOfgetAttemptsOrderBy2 []GetAttemptsOrderBy2

	Type GetAttemptsOrderByType
}

func CreateGetAttemptsOrderByGetAttemptsOrderBy1(getAttemptsOrderBy1 GetAttemptsOrderBy1) GetAttemptsOrderBy {
	typ := GetAttemptsOrderByTypeGetAttemptsOrderBy1

	return GetAttemptsOrderBy{
		GetAttemptsOrderBy1: &getAttemptsOrderBy1,
		Type:                typ,
	}
}

func CreateGetAttemptsOrderByArrayOfgetAttemptsOrderBy2(arrayOfgetAttemptsOrderBy2 []GetAttemptsOrderBy2) GetAttemptsOrderBy {
	typ := GetAttemptsOrderByTypeArrayOfgetAttemptsOrderBy2

	return GetAttemptsOrderBy{
		ArrayOfgetAttemptsOrderBy2: arrayOfgetAttemptsOrderBy2,
		Type:                       typ,
	}
}

func (u *GetAttemptsOrderBy) UnmarshalJSON(data []byte) error {

	getAttemptsOrderBy1 := new(GetAttemptsOrderBy1)
	if err := utils.UnmarshalJSON(data, &getAttemptsOrderBy1, "", true, true); err == nil {
		u.GetAttemptsOrderBy1 = getAttemptsOrderBy1
		u.Type = GetAttemptsOrderByTypeGetAttemptsOrderBy1
		return nil
	}

	arrayOfgetAttemptsOrderBy2 := []GetAttemptsOrderBy2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetAttemptsOrderBy2, "", true, true); err == nil {
		u.ArrayOfgetAttemptsOrderBy2 = arrayOfgetAttemptsOrderBy2
		u.Type = GetAttemptsOrderByTypeArrayOfgetAttemptsOrderBy2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetAttemptsOrderBy) MarshalJSON() ([]byte, error) {
	if u.GetAttemptsOrderBy1 != nil {
		return utils.MarshalJSON(u.GetAttemptsOrderBy1, "", true)
	}

	if u.ArrayOfgetAttemptsOrderBy2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetAttemptsOrderBy2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetAttemptsRequest struct {
	Dir     *GetAttemptsDir     `queryParam:"style=form,explode=true,name=dir"`
	EventID *GetAttemptsEventID `queryParam:"style=form,explode=true,name=event_id"`
	Limit   *int64              `queryParam:"style=form,explode=true,name=limit"`
	Next    *string             `queryParam:"style=form,explode=true,name=next"`
	OrderBy *GetAttemptsOrderBy `queryParam:"style=form,explode=true,name=order_by"`
	Prev    *string             `queryParam:"style=form,explode=true,name=prev"`
}

func (o *GetAttemptsRequest) GetDir() *GetAttemptsDir {
	if o == nil {
		return nil
	}
	return o.Dir
}

func (o *GetAttemptsRequest) GetEventID() *GetAttemptsEventID {
	if o == nil {
		return nil
	}
	return o.EventID
}

func (o *GetAttemptsRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetAttemptsRequest) GetNext() *string {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *GetAttemptsRequest) GetOrderBy() *GetAttemptsOrderBy {
	if o == nil {
		return nil
	}
	return o.OrderBy
}

func (o *GetAttemptsRequest) GetPrev() *string {
	if o == nil {
		return nil
	}
	return o.Prev
}

type GetAttemptsResponse struct {
	// Bad Request
	APIErrorResponse *shared.APIErrorResponse
	// HTTP response content type for this operation
	ContentType string
	// List of attempts
	EventAttemptPaginatedResult *shared.EventAttemptPaginatedResult
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetAttemptsResponse) GetAPIErrorResponse() *shared.APIErrorResponse {
	if o == nil {
		return nil
	}
	return o.APIErrorResponse
}

func (o *GetAttemptsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetAttemptsResponse) GetEventAttemptPaginatedResult() *shared.EventAttemptPaginatedResult {
	if o == nil {
		return nil
	}
	return o.EventAttemptPaginatedResult
}

func (o *GetAttemptsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetAttemptsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
