// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"hashicups/internal/sdk/pkg/models/shared"
	"net/http"
	"time"
)

// GetTransformationExecutionsCreatedAt2 - ISO date of the transformation's execution
type GetTransformationExecutionsCreatedAt2 struct {
	Any *bool      `queryParam:"name=any"`
	Gt  *time.Time `queryParam:"name=gt"`
	Gte *time.Time `queryParam:"name=gte"`
	Le  *time.Time `queryParam:"name=le"`
	Lte *time.Time `queryParam:"name=lte"`
}

type GetTransformationExecutionsCreatedAtType string

const (
	GetTransformationExecutionsCreatedAtTypeDateTime                              GetTransformationExecutionsCreatedAtType = "date-time"
	GetTransformationExecutionsCreatedAtTypeGetTransformationExecutionsCreatedAt2 GetTransformationExecutionsCreatedAtType = "getTransformationExecutionsCreatedAt_2"
)

type GetTransformationExecutionsCreatedAt struct {
	DateTime                              *time.Time
	GetTransformationExecutionsCreatedAt2 *GetTransformationExecutionsCreatedAt2

	Type GetTransformationExecutionsCreatedAtType
}

func CreateGetTransformationExecutionsCreatedAtDateTime(dateTime time.Time) GetTransformationExecutionsCreatedAt {
	typ := GetTransformationExecutionsCreatedAtTypeDateTime

	return GetTransformationExecutionsCreatedAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateGetTransformationExecutionsCreatedAtGetTransformationExecutionsCreatedAt2(getTransformationExecutionsCreatedAt2 GetTransformationExecutionsCreatedAt2) GetTransformationExecutionsCreatedAt {
	typ := GetTransformationExecutionsCreatedAtTypeGetTransformationExecutionsCreatedAt2

	return GetTransformationExecutionsCreatedAt{
		GetTransformationExecutionsCreatedAt2: &getTransformationExecutionsCreatedAt2,
		Type:                                  typ,
	}
}

func (u *GetTransformationExecutionsCreatedAt) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	dateTime := new(time.Time)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&dateTime); err == nil {
		u.DateTime = dateTime
		u.Type = GetTransformationExecutionsCreatedAtTypeDateTime
		return nil
	}

	getTransformationExecutionsCreatedAt2 := new(GetTransformationExecutionsCreatedAt2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getTransformationExecutionsCreatedAt2); err == nil {
		u.GetTransformationExecutionsCreatedAt2 = getTransformationExecutionsCreatedAt2
		u.Type = GetTransformationExecutionsCreatedAtTypeGetTransformationExecutionsCreatedAt2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetTransformationExecutionsCreatedAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return json.Marshal(u.DateTime)
	}

	if u.GetTransformationExecutionsCreatedAt2 != nil {
		return json.Marshal(u.GetTransformationExecutionsCreatedAt2)
	}

	return nil, nil
}

type GetTransformationExecutionsDir2 string

const (
	GetTransformationExecutionsDir2Asc  GetTransformationExecutionsDir2 = "asc"
	GetTransformationExecutionsDir2Desc GetTransformationExecutionsDir2 = "desc"
)

func (e GetTransformationExecutionsDir2) ToPointer() *GetTransformationExecutionsDir2 {
	return &e
}

func (e *GetTransformationExecutionsDir2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetTransformationExecutionsDir2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTransformationExecutionsDir2: %v", v)
	}
}

// GetTransformationExecutionsDir1 - Sort direction
type GetTransformationExecutionsDir1 string

const (
	GetTransformationExecutionsDir1Asc  GetTransformationExecutionsDir1 = "asc"
	GetTransformationExecutionsDir1Desc GetTransformationExecutionsDir1 = "desc"
)

func (e GetTransformationExecutionsDir1) ToPointer() *GetTransformationExecutionsDir1 {
	return &e
}

func (e *GetTransformationExecutionsDir1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetTransformationExecutionsDir1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTransformationExecutionsDir1: %v", v)
	}
}

type GetTransformationExecutionsDirType string

const (
	GetTransformationExecutionsDirTypeGetTransformationExecutionsDir1        GetTransformationExecutionsDirType = "getTransformationExecutionsDir_1"
	GetTransformationExecutionsDirTypeArrayOfgetTransformationExecutionsDir2 GetTransformationExecutionsDirType = "arrayOfgetTransformationExecutionsDir_2"
)

type GetTransformationExecutionsDir struct {
	GetTransformationExecutionsDir1        *GetTransformationExecutionsDir1
	ArrayOfgetTransformationExecutionsDir2 []GetTransformationExecutionsDir2

	Type GetTransformationExecutionsDirType
}

func CreateGetTransformationExecutionsDirGetTransformationExecutionsDir1(getTransformationExecutionsDir1 GetTransformationExecutionsDir1) GetTransformationExecutionsDir {
	typ := GetTransformationExecutionsDirTypeGetTransformationExecutionsDir1

	return GetTransformationExecutionsDir{
		GetTransformationExecutionsDir1: &getTransformationExecutionsDir1,
		Type:                            typ,
	}
}

func CreateGetTransformationExecutionsDirArrayOfgetTransformationExecutionsDir2(arrayOfgetTransformationExecutionsDir2 []GetTransformationExecutionsDir2) GetTransformationExecutionsDir {
	typ := GetTransformationExecutionsDirTypeArrayOfgetTransformationExecutionsDir2

	return GetTransformationExecutionsDir{
		ArrayOfgetTransformationExecutionsDir2: arrayOfgetTransformationExecutionsDir2,
		Type:                                   typ,
	}
}

func (u *GetTransformationExecutionsDir) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	getTransformationExecutionsDir1 := new(GetTransformationExecutionsDir1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getTransformationExecutionsDir1); err == nil {
		u.GetTransformationExecutionsDir1 = getTransformationExecutionsDir1
		u.Type = GetTransformationExecutionsDirTypeGetTransformationExecutionsDir1
		return nil
	}

	arrayOfgetTransformationExecutionsDir2 := []GetTransformationExecutionsDir2{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfgetTransformationExecutionsDir2); err == nil {
		u.ArrayOfgetTransformationExecutionsDir2 = arrayOfgetTransformationExecutionsDir2
		u.Type = GetTransformationExecutionsDirTypeArrayOfgetTransformationExecutionsDir2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetTransformationExecutionsDir) MarshalJSON() ([]byte, error) {
	if u.GetTransformationExecutionsDir1 != nil {
		return json.Marshal(u.GetTransformationExecutionsDir1)
	}

	if u.ArrayOfgetTransformationExecutionsDir2 != nil {
		return json.Marshal(u.ArrayOfgetTransformationExecutionsDir2)
	}

	return nil, nil
}

type GetTransformationExecutionsIssueIDType string

const (
	GetTransformationExecutionsIssueIDTypeStr        GetTransformationExecutionsIssueIDType = "str"
	GetTransformationExecutionsIssueIDTypeArrayOfstr GetTransformationExecutionsIssueIDType = "arrayOfstr"
)

type GetTransformationExecutionsIssueID struct {
	Str        *string
	ArrayOfstr []string

	Type GetTransformationExecutionsIssueIDType
}

func CreateGetTransformationExecutionsIssueIDStr(str string) GetTransformationExecutionsIssueID {
	typ := GetTransformationExecutionsIssueIDTypeStr

	return GetTransformationExecutionsIssueID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetTransformationExecutionsIssueIDArrayOfstr(arrayOfstr []string) GetTransformationExecutionsIssueID {
	typ := GetTransformationExecutionsIssueIDTypeArrayOfstr

	return GetTransformationExecutionsIssueID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetTransformationExecutionsIssueID) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = GetTransformationExecutionsIssueIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetTransformationExecutionsIssueIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetTransformationExecutionsIssueID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	return nil, nil
}

type GetTransformationExecutionsLogLevel2 string

const (
	GetTransformationExecutionsLogLevel2LessThanNilGreaterThan GetTransformationExecutionsLogLevel2 = "<nil>"
	GetTransformationExecutionsLogLevel2Debug                  GetTransformationExecutionsLogLevel2 = "debug"
	GetTransformationExecutionsLogLevel2Info                   GetTransformationExecutionsLogLevel2 = "info"
	GetTransformationExecutionsLogLevel2Warn                   GetTransformationExecutionsLogLevel2 = "warn"
	GetTransformationExecutionsLogLevel2Error                  GetTransformationExecutionsLogLevel2 = "error"
	GetTransformationExecutionsLogLevel2Fatal                  GetTransformationExecutionsLogLevel2 = "fatal"
)

func (e GetTransformationExecutionsLogLevel2) ToPointer() *GetTransformationExecutionsLogLevel2 {
	return &e
}

func (e *GetTransformationExecutionsLogLevel2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "<nil>":
		fallthrough
	case "debug":
		fallthrough
	case "info":
		fallthrough
	case "warn":
		fallthrough
	case "error":
		fallthrough
	case "fatal":
		*e = GetTransformationExecutionsLogLevel2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTransformationExecutionsLogLevel2: %v", v)
	}
}

// GetTransformationExecutionsLogLevel1 - Log level of the execution
type GetTransformationExecutionsLogLevel1 string

const (
	GetTransformationExecutionsLogLevel1LessThanNilGreaterThan GetTransformationExecutionsLogLevel1 = "<nil>"
	GetTransformationExecutionsLogLevel1Debug                  GetTransformationExecutionsLogLevel1 = "debug"
	GetTransformationExecutionsLogLevel1Info                   GetTransformationExecutionsLogLevel1 = "info"
	GetTransformationExecutionsLogLevel1Warn                   GetTransformationExecutionsLogLevel1 = "warn"
	GetTransformationExecutionsLogLevel1Error                  GetTransformationExecutionsLogLevel1 = "error"
	GetTransformationExecutionsLogLevel1Fatal                  GetTransformationExecutionsLogLevel1 = "fatal"
)

func (e GetTransformationExecutionsLogLevel1) ToPointer() *GetTransformationExecutionsLogLevel1 {
	return &e
}

func (e *GetTransformationExecutionsLogLevel1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "<nil>":
		fallthrough
	case "debug":
		fallthrough
	case "info":
		fallthrough
	case "warn":
		fallthrough
	case "error":
		fallthrough
	case "fatal":
		*e = GetTransformationExecutionsLogLevel1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTransformationExecutionsLogLevel1: %v", v)
	}
}

type GetTransformationExecutionsLogLevelType string

const (
	GetTransformationExecutionsLogLevelTypeGetTransformationExecutionsLogLevel1        GetTransformationExecutionsLogLevelType = "getTransformationExecutionsLogLevel_1"
	GetTransformationExecutionsLogLevelTypeArrayOfgetTransformationExecutionsLogLevel2 GetTransformationExecutionsLogLevelType = "arrayOfgetTransformationExecutionsLogLevel_2"
)

type GetTransformationExecutionsLogLevel struct {
	GetTransformationExecutionsLogLevel1        *GetTransformationExecutionsLogLevel1
	ArrayOfgetTransformationExecutionsLogLevel2 []GetTransformationExecutionsLogLevel2

	Type GetTransformationExecutionsLogLevelType
}

func CreateGetTransformationExecutionsLogLevelGetTransformationExecutionsLogLevel1(getTransformationExecutionsLogLevel1 GetTransformationExecutionsLogLevel1) GetTransformationExecutionsLogLevel {
	typ := GetTransformationExecutionsLogLevelTypeGetTransformationExecutionsLogLevel1

	return GetTransformationExecutionsLogLevel{
		GetTransformationExecutionsLogLevel1: &getTransformationExecutionsLogLevel1,
		Type:                                 typ,
	}
}

func CreateGetTransformationExecutionsLogLevelArrayOfgetTransformationExecutionsLogLevel2(arrayOfgetTransformationExecutionsLogLevel2 []GetTransformationExecutionsLogLevel2) GetTransformationExecutionsLogLevel {
	typ := GetTransformationExecutionsLogLevelTypeArrayOfgetTransformationExecutionsLogLevel2

	return GetTransformationExecutionsLogLevel{
		ArrayOfgetTransformationExecutionsLogLevel2: arrayOfgetTransformationExecutionsLogLevel2,
		Type: typ,
	}
}

func (u *GetTransformationExecutionsLogLevel) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	getTransformationExecutionsLogLevel1 := new(GetTransformationExecutionsLogLevel1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getTransformationExecutionsLogLevel1); err == nil {
		u.GetTransformationExecutionsLogLevel1 = getTransformationExecutionsLogLevel1
		u.Type = GetTransformationExecutionsLogLevelTypeGetTransformationExecutionsLogLevel1
		return nil
	}

	arrayOfgetTransformationExecutionsLogLevel2 := []GetTransformationExecutionsLogLevel2{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfgetTransformationExecutionsLogLevel2); err == nil {
		u.ArrayOfgetTransformationExecutionsLogLevel2 = arrayOfgetTransformationExecutionsLogLevel2
		u.Type = GetTransformationExecutionsLogLevelTypeArrayOfgetTransformationExecutionsLogLevel2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetTransformationExecutionsLogLevel) MarshalJSON() ([]byte, error) {
	if u.GetTransformationExecutionsLogLevel1 != nil {
		return json.Marshal(u.GetTransformationExecutionsLogLevel1)
	}

	if u.ArrayOfgetTransformationExecutionsLogLevel2 != nil {
		return json.Marshal(u.ArrayOfgetTransformationExecutionsLogLevel2)
	}

	return nil, nil
}

type GetTransformationExecutionsOrderBy2 string

const (
	GetTransformationExecutionsOrderBy2CreatedAt GetTransformationExecutionsOrderBy2 = "created_at"
)

func (e GetTransformationExecutionsOrderBy2) ToPointer() *GetTransformationExecutionsOrderBy2 {
	return &e
}

func (e *GetTransformationExecutionsOrderBy2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created_at":
		*e = GetTransformationExecutionsOrderBy2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTransformationExecutionsOrderBy2: %v", v)
	}
}

// GetTransformationExecutionsOrderBy1 - Sort key(s)
type GetTransformationExecutionsOrderBy1 string

const (
	GetTransformationExecutionsOrderBy1CreatedAt GetTransformationExecutionsOrderBy1 = "created_at"
)

func (e GetTransformationExecutionsOrderBy1) ToPointer() *GetTransformationExecutionsOrderBy1 {
	return &e
}

func (e *GetTransformationExecutionsOrderBy1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created_at":
		*e = GetTransformationExecutionsOrderBy1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTransformationExecutionsOrderBy1: %v", v)
	}
}

type GetTransformationExecutionsOrderByType string

const (
	GetTransformationExecutionsOrderByTypeGetTransformationExecutionsOrderBy1        GetTransformationExecutionsOrderByType = "getTransformationExecutionsOrderBy_1"
	GetTransformationExecutionsOrderByTypeArrayOfgetTransformationExecutionsOrderBy2 GetTransformationExecutionsOrderByType = "arrayOfgetTransformationExecutionsOrderBy_2"
)

type GetTransformationExecutionsOrderBy struct {
	GetTransformationExecutionsOrderBy1        *GetTransformationExecutionsOrderBy1
	ArrayOfgetTransformationExecutionsOrderBy2 []GetTransformationExecutionsOrderBy2

	Type GetTransformationExecutionsOrderByType
}

func CreateGetTransformationExecutionsOrderByGetTransformationExecutionsOrderBy1(getTransformationExecutionsOrderBy1 GetTransformationExecutionsOrderBy1) GetTransformationExecutionsOrderBy {
	typ := GetTransformationExecutionsOrderByTypeGetTransformationExecutionsOrderBy1

	return GetTransformationExecutionsOrderBy{
		GetTransformationExecutionsOrderBy1: &getTransformationExecutionsOrderBy1,
		Type:                                typ,
	}
}

func CreateGetTransformationExecutionsOrderByArrayOfgetTransformationExecutionsOrderBy2(arrayOfgetTransformationExecutionsOrderBy2 []GetTransformationExecutionsOrderBy2) GetTransformationExecutionsOrderBy {
	typ := GetTransformationExecutionsOrderByTypeArrayOfgetTransformationExecutionsOrderBy2

	return GetTransformationExecutionsOrderBy{
		ArrayOfgetTransformationExecutionsOrderBy2: arrayOfgetTransformationExecutionsOrderBy2,
		Type: typ,
	}
}

func (u *GetTransformationExecutionsOrderBy) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	getTransformationExecutionsOrderBy1 := new(GetTransformationExecutionsOrderBy1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getTransformationExecutionsOrderBy1); err == nil {
		u.GetTransformationExecutionsOrderBy1 = getTransformationExecutionsOrderBy1
		u.Type = GetTransformationExecutionsOrderByTypeGetTransformationExecutionsOrderBy1
		return nil
	}

	arrayOfgetTransformationExecutionsOrderBy2 := []GetTransformationExecutionsOrderBy2{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfgetTransformationExecutionsOrderBy2); err == nil {
		u.ArrayOfgetTransformationExecutionsOrderBy2 = arrayOfgetTransformationExecutionsOrderBy2
		u.Type = GetTransformationExecutionsOrderByTypeArrayOfgetTransformationExecutionsOrderBy2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetTransformationExecutionsOrderBy) MarshalJSON() ([]byte, error) {
	if u.GetTransformationExecutionsOrderBy1 != nil {
		return json.Marshal(u.GetTransformationExecutionsOrderBy1)
	}

	if u.ArrayOfgetTransformationExecutionsOrderBy2 != nil {
		return json.Marshal(u.ArrayOfgetTransformationExecutionsOrderBy2)
	}

	return nil, nil
}

type GetTransformationExecutionsWebhookIDType string

const (
	GetTransformationExecutionsWebhookIDTypeStr        GetTransformationExecutionsWebhookIDType = "str"
	GetTransformationExecutionsWebhookIDTypeArrayOfstr GetTransformationExecutionsWebhookIDType = "arrayOfstr"
)

type GetTransformationExecutionsWebhookID struct {
	Str        *string
	ArrayOfstr []string

	Type GetTransformationExecutionsWebhookIDType
}

func CreateGetTransformationExecutionsWebhookIDStr(str string) GetTransformationExecutionsWebhookID {
	typ := GetTransformationExecutionsWebhookIDTypeStr

	return GetTransformationExecutionsWebhookID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetTransformationExecutionsWebhookIDArrayOfstr(arrayOfstr []string) GetTransformationExecutionsWebhookID {
	typ := GetTransformationExecutionsWebhookIDTypeArrayOfstr

	return GetTransformationExecutionsWebhookID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetTransformationExecutionsWebhookID) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = GetTransformationExecutionsWebhookIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetTransformationExecutionsWebhookIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetTransformationExecutionsWebhookID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	return nil, nil
}

type GetTransformationExecutionsRequest struct {
	CreatedAt *GetTransformationExecutionsCreatedAt `queryParam:"style=form,explode=true,name=created_at"`
	Dir       *GetTransformationExecutionsDir       `queryParam:"style=form,explode=true,name=dir"`
	ID        string                                `pathParam:"style=simple,explode=false,name=id"`
	IssueID   *GetTransformationExecutionsIssueID   `queryParam:"style=form,explode=true,name=issue_id"`
	Limit     *int64                                `queryParam:"style=form,explode=true,name=limit"`
	LogLevel  *GetTransformationExecutionsLogLevel  `queryParam:"style=form,explode=true,name=log_level"`
	Next      *string                               `queryParam:"style=form,explode=true,name=next"`
	OrderBy   *GetTransformationExecutionsOrderBy   `queryParam:"style=form,explode=true,name=order_by"`
	Prev      *string                               `queryParam:"style=form,explode=true,name=prev"`
	WebhookID *GetTransformationExecutionsWebhookID `queryParam:"style=form,explode=true,name=webhook_id"`
}

type GetTransformationExecutionsResponse struct {
	// Bad Request
	APIErrorResponse *shared.APIErrorResponse
	ContentType      string
	StatusCode       int
	RawResponse      *http.Response
	// List of transformation executions
	TransformationExecutionPaginatedResult *shared.TransformationExecutionPaginatedResult
}
