// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"hashicups/internal/sdk/pkg/models/shared"
	"hashicups/internal/sdk/pkg/utils"
	"net/http"
	"time"
)

// GetIgnoredEventBulkRetriesCancelledAt2 - Filter by date the bulk retry was cancelled
type GetIgnoredEventBulkRetriesCancelledAt2 struct {
	Any *bool      `queryParam:"name=any"`
	Gt  *time.Time `queryParam:"name=gt"`
	Gte *time.Time `queryParam:"name=gte"`
	Le  *time.Time `queryParam:"name=le"`
	Lte *time.Time `queryParam:"name=lte"`
}

func (g GetIgnoredEventBulkRetriesCancelledAt2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetIgnoredEventBulkRetriesCancelledAt2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetIgnoredEventBulkRetriesCancelledAt2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetIgnoredEventBulkRetriesCancelledAt2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetIgnoredEventBulkRetriesCancelledAt2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetIgnoredEventBulkRetriesCancelledAt2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetIgnoredEventBulkRetriesCancelledAt2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type GetIgnoredEventBulkRetriesCancelledAtType string

const (
	GetIgnoredEventBulkRetriesCancelledAtTypeDateTime                               GetIgnoredEventBulkRetriesCancelledAtType = "date-time"
	GetIgnoredEventBulkRetriesCancelledAtTypeGetIgnoredEventBulkRetriesCancelledAt2 GetIgnoredEventBulkRetriesCancelledAtType = "getIgnoredEventBulkRetriesCancelledAt_2"
)

type GetIgnoredEventBulkRetriesCancelledAt struct {
	DateTime                               *time.Time
	GetIgnoredEventBulkRetriesCancelledAt2 *GetIgnoredEventBulkRetriesCancelledAt2

	Type GetIgnoredEventBulkRetriesCancelledAtType
}

func CreateGetIgnoredEventBulkRetriesCancelledAtDateTime(dateTime time.Time) GetIgnoredEventBulkRetriesCancelledAt {
	typ := GetIgnoredEventBulkRetriesCancelledAtTypeDateTime

	return GetIgnoredEventBulkRetriesCancelledAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateGetIgnoredEventBulkRetriesCancelledAtGetIgnoredEventBulkRetriesCancelledAt2(getIgnoredEventBulkRetriesCancelledAt2 GetIgnoredEventBulkRetriesCancelledAt2) GetIgnoredEventBulkRetriesCancelledAt {
	typ := GetIgnoredEventBulkRetriesCancelledAtTypeGetIgnoredEventBulkRetriesCancelledAt2

	return GetIgnoredEventBulkRetriesCancelledAt{
		GetIgnoredEventBulkRetriesCancelledAt2: &getIgnoredEventBulkRetriesCancelledAt2,
		Type:                                   typ,
	}
}

func (u *GetIgnoredEventBulkRetriesCancelledAt) UnmarshalJSON(data []byte) error {

	getIgnoredEventBulkRetriesCancelledAt2 := new(GetIgnoredEventBulkRetriesCancelledAt2)
	if err := utils.UnmarshalJSON(data, &getIgnoredEventBulkRetriesCancelledAt2, "", true, true); err == nil {
		u.GetIgnoredEventBulkRetriesCancelledAt2 = getIgnoredEventBulkRetriesCancelledAt2
		u.Type = GetIgnoredEventBulkRetriesCancelledAtTypeGetIgnoredEventBulkRetriesCancelledAt2
		return nil
	}

	dateTime := new(time.Time)
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = dateTime
		u.Type = GetIgnoredEventBulkRetriesCancelledAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetIgnoredEventBulkRetriesCancelledAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.GetIgnoredEventBulkRetriesCancelledAt2 != nil {
		return utils.MarshalJSON(u.GetIgnoredEventBulkRetriesCancelledAt2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetIgnoredEventBulkRetriesCompletedAt2 - Filter by date the bulk retry completed
type GetIgnoredEventBulkRetriesCompletedAt2 struct {
	Any *bool      `queryParam:"name=any"`
	Gt  *time.Time `queryParam:"name=gt"`
	Gte *time.Time `queryParam:"name=gte"`
	Le  *time.Time `queryParam:"name=le"`
	Lte *time.Time `queryParam:"name=lte"`
}

func (g GetIgnoredEventBulkRetriesCompletedAt2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetIgnoredEventBulkRetriesCompletedAt2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetIgnoredEventBulkRetriesCompletedAt2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetIgnoredEventBulkRetriesCompletedAt2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetIgnoredEventBulkRetriesCompletedAt2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetIgnoredEventBulkRetriesCompletedAt2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetIgnoredEventBulkRetriesCompletedAt2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type GetIgnoredEventBulkRetriesCompletedAtType string

const (
	GetIgnoredEventBulkRetriesCompletedAtTypeDateTime                               GetIgnoredEventBulkRetriesCompletedAtType = "date-time"
	GetIgnoredEventBulkRetriesCompletedAtTypeGetIgnoredEventBulkRetriesCompletedAt2 GetIgnoredEventBulkRetriesCompletedAtType = "getIgnoredEventBulkRetriesCompletedAt_2"
)

type GetIgnoredEventBulkRetriesCompletedAt struct {
	DateTime                               *time.Time
	GetIgnoredEventBulkRetriesCompletedAt2 *GetIgnoredEventBulkRetriesCompletedAt2

	Type GetIgnoredEventBulkRetriesCompletedAtType
}

func CreateGetIgnoredEventBulkRetriesCompletedAtDateTime(dateTime time.Time) GetIgnoredEventBulkRetriesCompletedAt {
	typ := GetIgnoredEventBulkRetriesCompletedAtTypeDateTime

	return GetIgnoredEventBulkRetriesCompletedAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateGetIgnoredEventBulkRetriesCompletedAtGetIgnoredEventBulkRetriesCompletedAt2(getIgnoredEventBulkRetriesCompletedAt2 GetIgnoredEventBulkRetriesCompletedAt2) GetIgnoredEventBulkRetriesCompletedAt {
	typ := GetIgnoredEventBulkRetriesCompletedAtTypeGetIgnoredEventBulkRetriesCompletedAt2

	return GetIgnoredEventBulkRetriesCompletedAt{
		GetIgnoredEventBulkRetriesCompletedAt2: &getIgnoredEventBulkRetriesCompletedAt2,
		Type:                                   typ,
	}
}

func (u *GetIgnoredEventBulkRetriesCompletedAt) UnmarshalJSON(data []byte) error {

	getIgnoredEventBulkRetriesCompletedAt2 := new(GetIgnoredEventBulkRetriesCompletedAt2)
	if err := utils.UnmarshalJSON(data, &getIgnoredEventBulkRetriesCompletedAt2, "", true, true); err == nil {
		u.GetIgnoredEventBulkRetriesCompletedAt2 = getIgnoredEventBulkRetriesCompletedAt2
		u.Type = GetIgnoredEventBulkRetriesCompletedAtTypeGetIgnoredEventBulkRetriesCompletedAt2
		return nil
	}

	dateTime := new(time.Time)
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = dateTime
		u.Type = GetIgnoredEventBulkRetriesCompletedAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetIgnoredEventBulkRetriesCompletedAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.GetIgnoredEventBulkRetriesCompletedAt2 != nil {
		return utils.MarshalJSON(u.GetIgnoredEventBulkRetriesCompletedAt2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetIgnoredEventBulkRetriesCreatedAt2 - Filter by date the bulk retry was created
type GetIgnoredEventBulkRetriesCreatedAt2 struct {
	Any *bool      `queryParam:"name=any"`
	Gt  *time.Time `queryParam:"name=gt"`
	Gte *time.Time `queryParam:"name=gte"`
	Le  *time.Time `queryParam:"name=le"`
	Lte *time.Time `queryParam:"name=lte"`
}

func (g GetIgnoredEventBulkRetriesCreatedAt2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetIgnoredEventBulkRetriesCreatedAt2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetIgnoredEventBulkRetriesCreatedAt2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *GetIgnoredEventBulkRetriesCreatedAt2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetIgnoredEventBulkRetriesCreatedAt2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetIgnoredEventBulkRetriesCreatedAt2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *GetIgnoredEventBulkRetriesCreatedAt2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type GetIgnoredEventBulkRetriesCreatedAtType string

const (
	GetIgnoredEventBulkRetriesCreatedAtTypeDateTime                             GetIgnoredEventBulkRetriesCreatedAtType = "date-time"
	GetIgnoredEventBulkRetriesCreatedAtTypeGetIgnoredEventBulkRetriesCreatedAt2 GetIgnoredEventBulkRetriesCreatedAtType = "getIgnoredEventBulkRetriesCreatedAt_2"
)

type GetIgnoredEventBulkRetriesCreatedAt struct {
	DateTime                             *time.Time
	GetIgnoredEventBulkRetriesCreatedAt2 *GetIgnoredEventBulkRetriesCreatedAt2

	Type GetIgnoredEventBulkRetriesCreatedAtType
}

func CreateGetIgnoredEventBulkRetriesCreatedAtDateTime(dateTime time.Time) GetIgnoredEventBulkRetriesCreatedAt {
	typ := GetIgnoredEventBulkRetriesCreatedAtTypeDateTime

	return GetIgnoredEventBulkRetriesCreatedAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateGetIgnoredEventBulkRetriesCreatedAtGetIgnoredEventBulkRetriesCreatedAt2(getIgnoredEventBulkRetriesCreatedAt2 GetIgnoredEventBulkRetriesCreatedAt2) GetIgnoredEventBulkRetriesCreatedAt {
	typ := GetIgnoredEventBulkRetriesCreatedAtTypeGetIgnoredEventBulkRetriesCreatedAt2

	return GetIgnoredEventBulkRetriesCreatedAt{
		GetIgnoredEventBulkRetriesCreatedAt2: &getIgnoredEventBulkRetriesCreatedAt2,
		Type:                                 typ,
	}
}

func (u *GetIgnoredEventBulkRetriesCreatedAt) UnmarshalJSON(data []byte) error {

	getIgnoredEventBulkRetriesCreatedAt2 := new(GetIgnoredEventBulkRetriesCreatedAt2)
	if err := utils.UnmarshalJSON(data, &getIgnoredEventBulkRetriesCreatedAt2, "", true, true); err == nil {
		u.GetIgnoredEventBulkRetriesCreatedAt2 = getIgnoredEventBulkRetriesCreatedAt2
		u.Type = GetIgnoredEventBulkRetriesCreatedAtTypeGetIgnoredEventBulkRetriesCreatedAt2
		return nil
	}

	dateTime := new(time.Time)
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = dateTime
		u.Type = GetIgnoredEventBulkRetriesCreatedAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetIgnoredEventBulkRetriesCreatedAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.GetIgnoredEventBulkRetriesCreatedAt2 != nil {
		return utils.MarshalJSON(u.GetIgnoredEventBulkRetriesCreatedAt2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetIgnoredEventBulkRetriesDir2 string

const (
	GetIgnoredEventBulkRetriesDir2Asc  GetIgnoredEventBulkRetriesDir2 = "asc"
	GetIgnoredEventBulkRetriesDir2Desc GetIgnoredEventBulkRetriesDir2 = "desc"
)

func (e GetIgnoredEventBulkRetriesDir2) ToPointer() *GetIgnoredEventBulkRetriesDir2 {
	return &e
}

func (e *GetIgnoredEventBulkRetriesDir2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetIgnoredEventBulkRetriesDir2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIgnoredEventBulkRetriesDir2: %v", v)
	}
}

// GetIgnoredEventBulkRetriesDir1 - Sort direction
type GetIgnoredEventBulkRetriesDir1 string

const (
	GetIgnoredEventBulkRetriesDir1Asc  GetIgnoredEventBulkRetriesDir1 = "asc"
	GetIgnoredEventBulkRetriesDir1Desc GetIgnoredEventBulkRetriesDir1 = "desc"
)

func (e GetIgnoredEventBulkRetriesDir1) ToPointer() *GetIgnoredEventBulkRetriesDir1 {
	return &e
}

func (e *GetIgnoredEventBulkRetriesDir1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetIgnoredEventBulkRetriesDir1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIgnoredEventBulkRetriesDir1: %v", v)
	}
}

type GetIgnoredEventBulkRetriesDirType string

const (
	GetIgnoredEventBulkRetriesDirTypeGetIgnoredEventBulkRetriesDir1        GetIgnoredEventBulkRetriesDirType = "getIgnoredEventBulkRetriesDir_1"
	GetIgnoredEventBulkRetriesDirTypeArrayOfgetIgnoredEventBulkRetriesDir2 GetIgnoredEventBulkRetriesDirType = "arrayOfgetIgnoredEventBulkRetriesDir_2"
)

type GetIgnoredEventBulkRetriesDir struct {
	GetIgnoredEventBulkRetriesDir1        *GetIgnoredEventBulkRetriesDir1
	ArrayOfgetIgnoredEventBulkRetriesDir2 []GetIgnoredEventBulkRetriesDir2

	Type GetIgnoredEventBulkRetriesDirType
}

func CreateGetIgnoredEventBulkRetriesDirGetIgnoredEventBulkRetriesDir1(getIgnoredEventBulkRetriesDir1 GetIgnoredEventBulkRetriesDir1) GetIgnoredEventBulkRetriesDir {
	typ := GetIgnoredEventBulkRetriesDirTypeGetIgnoredEventBulkRetriesDir1

	return GetIgnoredEventBulkRetriesDir{
		GetIgnoredEventBulkRetriesDir1: &getIgnoredEventBulkRetriesDir1,
		Type:                           typ,
	}
}

func CreateGetIgnoredEventBulkRetriesDirArrayOfgetIgnoredEventBulkRetriesDir2(arrayOfgetIgnoredEventBulkRetriesDir2 []GetIgnoredEventBulkRetriesDir2) GetIgnoredEventBulkRetriesDir {
	typ := GetIgnoredEventBulkRetriesDirTypeArrayOfgetIgnoredEventBulkRetriesDir2

	return GetIgnoredEventBulkRetriesDir{
		ArrayOfgetIgnoredEventBulkRetriesDir2: arrayOfgetIgnoredEventBulkRetriesDir2,
		Type:                                  typ,
	}
}

func (u *GetIgnoredEventBulkRetriesDir) UnmarshalJSON(data []byte) error {

	getIgnoredEventBulkRetriesDir1 := new(GetIgnoredEventBulkRetriesDir1)
	if err := utils.UnmarshalJSON(data, &getIgnoredEventBulkRetriesDir1, "", true, true); err == nil {
		u.GetIgnoredEventBulkRetriesDir1 = getIgnoredEventBulkRetriesDir1
		u.Type = GetIgnoredEventBulkRetriesDirTypeGetIgnoredEventBulkRetriesDir1
		return nil
	}

	arrayOfgetIgnoredEventBulkRetriesDir2 := []GetIgnoredEventBulkRetriesDir2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetIgnoredEventBulkRetriesDir2, "", true, true); err == nil {
		u.ArrayOfgetIgnoredEventBulkRetriesDir2 = arrayOfgetIgnoredEventBulkRetriesDir2
		u.Type = GetIgnoredEventBulkRetriesDirTypeArrayOfgetIgnoredEventBulkRetriesDir2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetIgnoredEventBulkRetriesDir) MarshalJSON() ([]byte, error) {
	if u.GetIgnoredEventBulkRetriesDir1 != nil {
		return utils.MarshalJSON(u.GetIgnoredEventBulkRetriesDir1, "", true)
	}

	if u.ArrayOfgetIgnoredEventBulkRetriesDir2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetIgnoredEventBulkRetriesDir2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetIgnoredEventBulkRetriesIDType string

const (
	GetIgnoredEventBulkRetriesIDTypeStr        GetIgnoredEventBulkRetriesIDType = "str"
	GetIgnoredEventBulkRetriesIDTypeArrayOfstr GetIgnoredEventBulkRetriesIDType = "arrayOfstr"
)

type GetIgnoredEventBulkRetriesID struct {
	Str        *string
	ArrayOfstr []string

	Type GetIgnoredEventBulkRetriesIDType
}

func CreateGetIgnoredEventBulkRetriesIDStr(str string) GetIgnoredEventBulkRetriesID {
	typ := GetIgnoredEventBulkRetriesIDTypeStr

	return GetIgnoredEventBulkRetriesID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetIgnoredEventBulkRetriesIDArrayOfstr(arrayOfstr []string) GetIgnoredEventBulkRetriesID {
	typ := GetIgnoredEventBulkRetriesIDTypeArrayOfstr

	return GetIgnoredEventBulkRetriesID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetIgnoredEventBulkRetriesID) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = GetIgnoredEventBulkRetriesIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetIgnoredEventBulkRetriesIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetIgnoredEventBulkRetriesID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetIgnoredEventBulkRetriesOrderBy2 string

const (
	GetIgnoredEventBulkRetriesOrderBy2CreatedAt GetIgnoredEventBulkRetriesOrderBy2 = "created_at"
)

func (e GetIgnoredEventBulkRetriesOrderBy2) ToPointer() *GetIgnoredEventBulkRetriesOrderBy2 {
	return &e
}

func (e *GetIgnoredEventBulkRetriesOrderBy2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created_at":
		*e = GetIgnoredEventBulkRetriesOrderBy2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIgnoredEventBulkRetriesOrderBy2: %v", v)
	}
}

// GetIgnoredEventBulkRetriesOrderBy1 - Sort key(s)
type GetIgnoredEventBulkRetriesOrderBy1 string

const (
	GetIgnoredEventBulkRetriesOrderBy1CreatedAt GetIgnoredEventBulkRetriesOrderBy1 = "created_at"
)

func (e GetIgnoredEventBulkRetriesOrderBy1) ToPointer() *GetIgnoredEventBulkRetriesOrderBy1 {
	return &e
}

func (e *GetIgnoredEventBulkRetriesOrderBy1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created_at":
		*e = GetIgnoredEventBulkRetriesOrderBy1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIgnoredEventBulkRetriesOrderBy1: %v", v)
	}
}

type GetIgnoredEventBulkRetriesOrderByType string

const (
	GetIgnoredEventBulkRetriesOrderByTypeGetIgnoredEventBulkRetriesOrderBy1        GetIgnoredEventBulkRetriesOrderByType = "getIgnoredEventBulkRetriesOrderBy_1"
	GetIgnoredEventBulkRetriesOrderByTypeArrayOfgetIgnoredEventBulkRetriesOrderBy2 GetIgnoredEventBulkRetriesOrderByType = "arrayOfgetIgnoredEventBulkRetriesOrderBy_2"
)

type GetIgnoredEventBulkRetriesOrderBy struct {
	GetIgnoredEventBulkRetriesOrderBy1        *GetIgnoredEventBulkRetriesOrderBy1
	ArrayOfgetIgnoredEventBulkRetriesOrderBy2 []GetIgnoredEventBulkRetriesOrderBy2

	Type GetIgnoredEventBulkRetriesOrderByType
}

func CreateGetIgnoredEventBulkRetriesOrderByGetIgnoredEventBulkRetriesOrderBy1(getIgnoredEventBulkRetriesOrderBy1 GetIgnoredEventBulkRetriesOrderBy1) GetIgnoredEventBulkRetriesOrderBy {
	typ := GetIgnoredEventBulkRetriesOrderByTypeGetIgnoredEventBulkRetriesOrderBy1

	return GetIgnoredEventBulkRetriesOrderBy{
		GetIgnoredEventBulkRetriesOrderBy1: &getIgnoredEventBulkRetriesOrderBy1,
		Type:                               typ,
	}
}

func CreateGetIgnoredEventBulkRetriesOrderByArrayOfgetIgnoredEventBulkRetriesOrderBy2(arrayOfgetIgnoredEventBulkRetriesOrderBy2 []GetIgnoredEventBulkRetriesOrderBy2) GetIgnoredEventBulkRetriesOrderBy {
	typ := GetIgnoredEventBulkRetriesOrderByTypeArrayOfgetIgnoredEventBulkRetriesOrderBy2

	return GetIgnoredEventBulkRetriesOrderBy{
		ArrayOfgetIgnoredEventBulkRetriesOrderBy2: arrayOfgetIgnoredEventBulkRetriesOrderBy2,
		Type: typ,
	}
}

func (u *GetIgnoredEventBulkRetriesOrderBy) UnmarshalJSON(data []byte) error {

	getIgnoredEventBulkRetriesOrderBy1 := new(GetIgnoredEventBulkRetriesOrderBy1)
	if err := utils.UnmarshalJSON(data, &getIgnoredEventBulkRetriesOrderBy1, "", true, true); err == nil {
		u.GetIgnoredEventBulkRetriesOrderBy1 = getIgnoredEventBulkRetriesOrderBy1
		u.Type = GetIgnoredEventBulkRetriesOrderByTypeGetIgnoredEventBulkRetriesOrderBy1
		return nil
	}

	arrayOfgetIgnoredEventBulkRetriesOrderBy2 := []GetIgnoredEventBulkRetriesOrderBy2{}
	if err := utils.UnmarshalJSON(data, &arrayOfgetIgnoredEventBulkRetriesOrderBy2, "", true, true); err == nil {
		u.ArrayOfgetIgnoredEventBulkRetriesOrderBy2 = arrayOfgetIgnoredEventBulkRetriesOrderBy2
		u.Type = GetIgnoredEventBulkRetriesOrderByTypeArrayOfgetIgnoredEventBulkRetriesOrderBy2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetIgnoredEventBulkRetriesOrderBy) MarshalJSON() ([]byte, error) {
	if u.GetIgnoredEventBulkRetriesOrderBy1 != nil {
		return utils.MarshalJSON(u.GetIgnoredEventBulkRetriesOrderBy1, "", true)
	}

	if u.ArrayOfgetIgnoredEventBulkRetriesOrderBy2 != nil {
		return utils.MarshalJSON(u.ArrayOfgetIgnoredEventBulkRetriesOrderBy2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetIgnoredEventBulkRetriesQueryCauseType string

const (
	GetIgnoredEventBulkRetriesQueryCauseTypeStr        GetIgnoredEventBulkRetriesQueryCauseType = "str"
	GetIgnoredEventBulkRetriesQueryCauseTypeArrayOfstr GetIgnoredEventBulkRetriesQueryCauseType = "arrayOfstr"
)

type GetIgnoredEventBulkRetriesQueryCause struct {
	Str        *string
	ArrayOfstr []string

	Type GetIgnoredEventBulkRetriesQueryCauseType
}

func CreateGetIgnoredEventBulkRetriesQueryCauseStr(str string) GetIgnoredEventBulkRetriesQueryCause {
	typ := GetIgnoredEventBulkRetriesQueryCauseTypeStr

	return GetIgnoredEventBulkRetriesQueryCause{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetIgnoredEventBulkRetriesQueryCauseArrayOfstr(arrayOfstr []string) GetIgnoredEventBulkRetriesQueryCause {
	typ := GetIgnoredEventBulkRetriesQueryCauseTypeArrayOfstr

	return GetIgnoredEventBulkRetriesQueryCause{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetIgnoredEventBulkRetriesQueryCause) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = GetIgnoredEventBulkRetriesQueryCauseTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetIgnoredEventBulkRetriesQueryCauseTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetIgnoredEventBulkRetriesQueryCause) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GetIgnoredEventBulkRetriesQueryWebhookIDType string

const (
	GetIgnoredEventBulkRetriesQueryWebhookIDTypeStr        GetIgnoredEventBulkRetriesQueryWebhookIDType = "str"
	GetIgnoredEventBulkRetriesQueryWebhookIDTypeArrayOfstr GetIgnoredEventBulkRetriesQueryWebhookIDType = "arrayOfstr"
)

type GetIgnoredEventBulkRetriesQueryWebhookID struct {
	Str        *string
	ArrayOfstr []string

	Type GetIgnoredEventBulkRetriesQueryWebhookIDType
}

func CreateGetIgnoredEventBulkRetriesQueryWebhookIDStr(str string) GetIgnoredEventBulkRetriesQueryWebhookID {
	typ := GetIgnoredEventBulkRetriesQueryWebhookIDTypeStr

	return GetIgnoredEventBulkRetriesQueryWebhookID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetIgnoredEventBulkRetriesQueryWebhookIDArrayOfstr(arrayOfstr []string) GetIgnoredEventBulkRetriesQueryWebhookID {
	typ := GetIgnoredEventBulkRetriesQueryWebhookIDTypeArrayOfstr

	return GetIgnoredEventBulkRetriesQueryWebhookID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetIgnoredEventBulkRetriesQueryWebhookID) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = GetIgnoredEventBulkRetriesQueryWebhookIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetIgnoredEventBulkRetriesQueryWebhookIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetIgnoredEventBulkRetriesQueryWebhookID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// GetIgnoredEventBulkRetriesQuery - Filter by the bulk retry ignored event query object
type GetIgnoredEventBulkRetriesQuery struct {
	// The cause of the ignored event
	Cause *GetIgnoredEventBulkRetriesQueryCause `queryParam:"name=cause"`
	// The associated transformation ID (only applicable to the cause `TRANSFORMATION_FAILED`)
	TransformationID *string `queryParam:"name=transformation_id"`
	// Connection ID of the ignored event
	WebhookID *GetIgnoredEventBulkRetriesQueryWebhookID `queryParam:"name=webhook_id"`
}

func (o *GetIgnoredEventBulkRetriesQuery) GetCause() *GetIgnoredEventBulkRetriesQueryCause {
	if o == nil {
		return nil
	}
	return o.Cause
}

func (o *GetIgnoredEventBulkRetriesQuery) GetTransformationID() *string {
	if o == nil {
		return nil
	}
	return o.TransformationID
}

func (o *GetIgnoredEventBulkRetriesQuery) GetWebhookID() *GetIgnoredEventBulkRetriesQueryWebhookID {
	if o == nil {
		return nil
	}
	return o.WebhookID
}

type GetIgnoredEventBulkRetriesRequest struct {
	CancelledAt *GetIgnoredEventBulkRetriesCancelledAt `queryParam:"style=form,explode=true,name=cancelled_at"`
	CompletedAt *GetIgnoredEventBulkRetriesCompletedAt `queryParam:"style=form,explode=true,name=completed_at"`
	CreatedAt   *GetIgnoredEventBulkRetriesCreatedAt   `queryParam:"style=form,explode=true,name=created_at"`
	Dir         *GetIgnoredEventBulkRetriesDir         `queryParam:"style=form,explode=true,name=dir"`
	ID          *GetIgnoredEventBulkRetriesID          `queryParam:"style=form,explode=true,name=id"`
	InProgress  *bool                                  `queryParam:"style=form,explode=true,name=in_progress"`
	Limit       *int64                                 `queryParam:"style=form,explode=true,name=limit"`
	Next        *string                                `queryParam:"style=form,explode=true,name=next"`
	OrderBy     *GetIgnoredEventBulkRetriesOrderBy     `queryParam:"style=form,explode=true,name=order_by"`
	Prev        *string                                `queryParam:"style=form,explode=true,name=prev"`
	// Filter by the bulk retry ignored event query object
	Query             *GetIgnoredEventBulkRetriesQuery `queryParam:"style=form,explode=true,name=query"`
	QueryPartialMatch *bool                            `queryParam:"style=form,explode=true,name=query_partial_match"`
}

func (o *GetIgnoredEventBulkRetriesRequest) GetCancelledAt() *GetIgnoredEventBulkRetriesCancelledAt {
	if o == nil {
		return nil
	}
	return o.CancelledAt
}

func (o *GetIgnoredEventBulkRetriesRequest) GetCompletedAt() *GetIgnoredEventBulkRetriesCompletedAt {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

func (o *GetIgnoredEventBulkRetriesRequest) GetCreatedAt() *GetIgnoredEventBulkRetriesCreatedAt {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetIgnoredEventBulkRetriesRequest) GetDir() *GetIgnoredEventBulkRetriesDir {
	if o == nil {
		return nil
	}
	return o.Dir
}

func (o *GetIgnoredEventBulkRetriesRequest) GetID() *GetIgnoredEventBulkRetriesID {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetIgnoredEventBulkRetriesRequest) GetInProgress() *bool {
	if o == nil {
		return nil
	}
	return o.InProgress
}

func (o *GetIgnoredEventBulkRetriesRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetIgnoredEventBulkRetriesRequest) GetNext() *string {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *GetIgnoredEventBulkRetriesRequest) GetOrderBy() *GetIgnoredEventBulkRetriesOrderBy {
	if o == nil {
		return nil
	}
	return o.OrderBy
}

func (o *GetIgnoredEventBulkRetriesRequest) GetPrev() *string {
	if o == nil {
		return nil
	}
	return o.Prev
}

func (o *GetIgnoredEventBulkRetriesRequest) GetQuery() *GetIgnoredEventBulkRetriesQuery {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *GetIgnoredEventBulkRetriesRequest) GetQueryPartialMatch() *bool {
	if o == nil {
		return nil
	}
	return o.QueryPartialMatch
}

type GetIgnoredEventBulkRetriesResponse struct {
	// Bad Request
	APIErrorResponse *shared.APIErrorResponse
	// List of ignored events bulk retries
	BatchOperationPaginatedResult *shared.BatchOperationPaginatedResult
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetIgnoredEventBulkRetriesResponse) GetAPIErrorResponse() *shared.APIErrorResponse {
	if o == nil {
		return nil
	}
	return o.APIErrorResponse
}

func (o *GetIgnoredEventBulkRetriesResponse) GetBatchOperationPaginatedResult() *shared.BatchOperationPaginatedResult {
	if o == nil {
		return nil
	}
	return o.BatchOperationPaginatedResult
}

func (o *GetIgnoredEventBulkRetriesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetIgnoredEventBulkRetriesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetIgnoredEventBulkRetriesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
