// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"hashicups/internal/sdk/pkg/models/shared"
	"hashicups/internal/sdk/pkg/utils"
	"net/http"
	"time"
)

// CreateRequestBulkRetryRequestBodyQueryBody2 - URL Encoded string of the JSON to match to the data body
type CreateRequestBulkRetryRequestBodyQueryBody2 struct {
}

type CreateRequestBulkRetryRequestBodyQueryBodyType string

const (
	CreateRequestBulkRetryRequestBodyQueryBodyTypeStr                                         CreateRequestBulkRetryRequestBodyQueryBodyType = "str"
	CreateRequestBulkRetryRequestBodyQueryBodyTypeCreateRequestBulkRetryRequestBodyQueryBody2 CreateRequestBulkRetryRequestBodyQueryBodyType = "createRequestBulkRetry_requestBody_query_body_2"
)

type CreateRequestBulkRetryRequestBodyQueryBody struct {
	Str                                         *string
	CreateRequestBulkRetryRequestBodyQueryBody2 *CreateRequestBulkRetryRequestBodyQueryBody2

	Type CreateRequestBulkRetryRequestBodyQueryBodyType
}

func CreateCreateRequestBulkRetryRequestBodyQueryBodyStr(str string) CreateRequestBulkRetryRequestBodyQueryBody {
	typ := CreateRequestBulkRetryRequestBodyQueryBodyTypeStr

	return CreateRequestBulkRetryRequestBodyQueryBody{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateRequestBulkRetryRequestBodyQueryBodyCreateRequestBulkRetryRequestBodyQueryBody2(createRequestBulkRetryRequestBodyQueryBody2 CreateRequestBulkRetryRequestBodyQueryBody2) CreateRequestBulkRetryRequestBodyQueryBody {
	typ := CreateRequestBulkRetryRequestBodyQueryBodyTypeCreateRequestBulkRetryRequestBodyQueryBody2

	return CreateRequestBulkRetryRequestBodyQueryBody{
		CreateRequestBulkRetryRequestBodyQueryBody2: &createRequestBulkRetryRequestBodyQueryBody2,
		Type: typ,
	}
}

func (u *CreateRequestBulkRetryRequestBodyQueryBody) UnmarshalJSON(data []byte) error {

	createRequestBulkRetryRequestBodyQueryBody2 := new(CreateRequestBulkRetryRequestBodyQueryBody2)
	if err := utils.UnmarshalJSON(data, &createRequestBulkRetryRequestBodyQueryBody2, "", true, true); err == nil {
		u.CreateRequestBulkRetryRequestBodyQueryBody2 = createRequestBulkRetryRequestBodyQueryBody2
		u.Type = CreateRequestBulkRetryRequestBodyQueryBodyTypeCreateRequestBulkRetryRequestBodyQueryBody2
		return nil
	}

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = CreateRequestBulkRetryRequestBodyQueryBodyTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateRequestBulkRetryRequestBodyQueryBody) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CreateRequestBulkRetryRequestBodyQueryBody2 != nil {
		return utils.MarshalJSON(u.CreateRequestBulkRetryRequestBodyQueryBody2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateRequestBulkRetryRequestBodyQueryBulkRetryIDType string

const (
	CreateRequestBulkRetryRequestBodyQueryBulkRetryIDTypeStr        CreateRequestBulkRetryRequestBodyQueryBulkRetryIDType = "str"
	CreateRequestBulkRetryRequestBodyQueryBulkRetryIDTypeArrayOfstr CreateRequestBulkRetryRequestBodyQueryBulkRetryIDType = "arrayOfstr"
)

type CreateRequestBulkRetryRequestBodyQueryBulkRetryID struct {
	Str        *string
	ArrayOfstr []string

	Type CreateRequestBulkRetryRequestBodyQueryBulkRetryIDType
}

func CreateCreateRequestBulkRetryRequestBodyQueryBulkRetryIDStr(str string) CreateRequestBulkRetryRequestBodyQueryBulkRetryID {
	typ := CreateRequestBulkRetryRequestBodyQueryBulkRetryIDTypeStr

	return CreateRequestBulkRetryRequestBodyQueryBulkRetryID{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateRequestBulkRetryRequestBodyQueryBulkRetryIDArrayOfstr(arrayOfstr []string) CreateRequestBulkRetryRequestBodyQueryBulkRetryID {
	typ := CreateRequestBulkRetryRequestBodyQueryBulkRetryIDTypeArrayOfstr

	return CreateRequestBulkRetryRequestBodyQueryBulkRetryID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *CreateRequestBulkRetryRequestBodyQueryBulkRetryID) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = CreateRequestBulkRetryRequestBodyQueryBulkRetryIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = CreateRequestBulkRetryRequestBodyQueryBulkRetryIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateRequestBulkRetryRequestBodyQueryBulkRetryID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateRequestBulkRetryRequestBodyQueryCreatedAt2 struct {
	Any *bool      `json:"any,omitempty"`
	Gt  *time.Time `json:"gt,omitempty"`
	Gte *time.Time `json:"gte,omitempty"`
	Le  *time.Time `json:"le,omitempty"`
	Lte *time.Time `json:"lte,omitempty"`
}

func (c CreateRequestBulkRetryRequestBodyQueryCreatedAt2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateRequestBulkRetryRequestBodyQueryCreatedAt2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateRequestBulkRetryRequestBodyQueryCreatedAt2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *CreateRequestBulkRetryRequestBodyQueryCreatedAt2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CreateRequestBulkRetryRequestBodyQueryCreatedAt2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CreateRequestBulkRetryRequestBodyQueryCreatedAt2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *CreateRequestBulkRetryRequestBodyQueryCreatedAt2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type CreateRequestBulkRetryRequestBodyQueryCreatedAtType string

const (
	CreateRequestBulkRetryRequestBodyQueryCreatedAtTypeDateTime                                         CreateRequestBulkRetryRequestBodyQueryCreatedAtType = "date-time"
	CreateRequestBulkRetryRequestBodyQueryCreatedAtTypeCreateRequestBulkRetryRequestBodyQueryCreatedAt2 CreateRequestBulkRetryRequestBodyQueryCreatedAtType = "createRequestBulkRetry_requestBody_query_created_at_2"
)

type CreateRequestBulkRetryRequestBodyQueryCreatedAt struct {
	DateTime                                         *time.Time
	CreateRequestBulkRetryRequestBodyQueryCreatedAt2 *CreateRequestBulkRetryRequestBodyQueryCreatedAt2

	Type CreateRequestBulkRetryRequestBodyQueryCreatedAtType
}

func CreateCreateRequestBulkRetryRequestBodyQueryCreatedAtDateTime(dateTime time.Time) CreateRequestBulkRetryRequestBodyQueryCreatedAt {
	typ := CreateRequestBulkRetryRequestBodyQueryCreatedAtTypeDateTime

	return CreateRequestBulkRetryRequestBodyQueryCreatedAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateCreateRequestBulkRetryRequestBodyQueryCreatedAtCreateRequestBulkRetryRequestBodyQueryCreatedAt2(createRequestBulkRetryRequestBodyQueryCreatedAt2 CreateRequestBulkRetryRequestBodyQueryCreatedAt2) CreateRequestBulkRetryRequestBodyQueryCreatedAt {
	typ := CreateRequestBulkRetryRequestBodyQueryCreatedAtTypeCreateRequestBulkRetryRequestBodyQueryCreatedAt2

	return CreateRequestBulkRetryRequestBodyQueryCreatedAt{
		CreateRequestBulkRetryRequestBodyQueryCreatedAt2: &createRequestBulkRetryRequestBodyQueryCreatedAt2,
		Type: typ,
	}
}

func (u *CreateRequestBulkRetryRequestBodyQueryCreatedAt) UnmarshalJSON(data []byte) error {

	createRequestBulkRetryRequestBodyQueryCreatedAt2 := new(CreateRequestBulkRetryRequestBodyQueryCreatedAt2)
	if err := utils.UnmarshalJSON(data, &createRequestBulkRetryRequestBodyQueryCreatedAt2, "", true, true); err == nil {
		u.CreateRequestBulkRetryRequestBodyQueryCreatedAt2 = createRequestBulkRetryRequestBodyQueryCreatedAt2
		u.Type = CreateRequestBulkRetryRequestBodyQueryCreatedAtTypeCreateRequestBulkRetryRequestBodyQueryCreatedAt2
		return nil
	}

	dateTime := new(time.Time)
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = dateTime
		u.Type = CreateRequestBulkRetryRequestBodyQueryCreatedAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateRequestBulkRetryRequestBodyQueryCreatedAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.CreateRequestBulkRetryRequestBodyQueryCreatedAt2 != nil {
		return utils.MarshalJSON(u.CreateRequestBulkRetryRequestBodyQueryCreatedAt2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateRequestBulkRetryRequestBodyQueryEventsCount2 struct {
	Any      *bool  `json:"any,omitempty"`
	Contains *int64 `json:"contains,omitempty"`
	Gt       *int64 `json:"gt,omitempty"`
	Gte      *int64 `json:"gte,omitempty"`
	Le       *int64 `json:"le,omitempty"`
	Lte      *int64 `json:"lte,omitempty"`
}

func (o *CreateRequestBulkRetryRequestBodyQueryEventsCount2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *CreateRequestBulkRetryRequestBodyQueryEventsCount2) GetContains() *int64 {
	if o == nil {
		return nil
	}
	return o.Contains
}

func (o *CreateRequestBulkRetryRequestBodyQueryEventsCount2) GetGt() *int64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CreateRequestBulkRetryRequestBodyQueryEventsCount2) GetGte() *int64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CreateRequestBulkRetryRequestBodyQueryEventsCount2) GetLe() *int64 {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *CreateRequestBulkRetryRequestBodyQueryEventsCount2) GetLte() *int64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type CreateRequestBulkRetryRequestBodyQueryEventsCountType string

const (
	CreateRequestBulkRetryRequestBodyQueryEventsCountTypeInteger                                            CreateRequestBulkRetryRequestBodyQueryEventsCountType = "integer"
	CreateRequestBulkRetryRequestBodyQueryEventsCountTypeCreateRequestBulkRetryRequestBodyQueryEventsCount2 CreateRequestBulkRetryRequestBodyQueryEventsCountType = "createRequestBulkRetry_requestBody_query_events_count_2"
	CreateRequestBulkRetryRequestBodyQueryEventsCountTypeArrayOfinteger                                     CreateRequestBulkRetryRequestBodyQueryEventsCountType = "arrayOfinteger"
)

type CreateRequestBulkRetryRequestBodyQueryEventsCount struct {
	Integer                                            *int64
	CreateRequestBulkRetryRequestBodyQueryEventsCount2 *CreateRequestBulkRetryRequestBodyQueryEventsCount2
	ArrayOfinteger                                     []int64

	Type CreateRequestBulkRetryRequestBodyQueryEventsCountType
}

func CreateCreateRequestBulkRetryRequestBodyQueryEventsCountInteger(integer int64) CreateRequestBulkRetryRequestBodyQueryEventsCount {
	typ := CreateRequestBulkRetryRequestBodyQueryEventsCountTypeInteger

	return CreateRequestBulkRetryRequestBodyQueryEventsCount{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateCreateRequestBulkRetryRequestBodyQueryEventsCountCreateRequestBulkRetryRequestBodyQueryEventsCount2(createRequestBulkRetryRequestBodyQueryEventsCount2 CreateRequestBulkRetryRequestBodyQueryEventsCount2) CreateRequestBulkRetryRequestBodyQueryEventsCount {
	typ := CreateRequestBulkRetryRequestBodyQueryEventsCountTypeCreateRequestBulkRetryRequestBodyQueryEventsCount2

	return CreateRequestBulkRetryRequestBodyQueryEventsCount{
		CreateRequestBulkRetryRequestBodyQueryEventsCount2: &createRequestBulkRetryRequestBodyQueryEventsCount2,
		Type: typ,
	}
}

func CreateCreateRequestBulkRetryRequestBodyQueryEventsCountArrayOfinteger(arrayOfinteger []int64) CreateRequestBulkRetryRequestBodyQueryEventsCount {
	typ := CreateRequestBulkRetryRequestBodyQueryEventsCountTypeArrayOfinteger

	return CreateRequestBulkRetryRequestBodyQueryEventsCount{
		ArrayOfinteger: arrayOfinteger,
		Type:           typ,
	}
}

func (u *CreateRequestBulkRetryRequestBodyQueryEventsCount) UnmarshalJSON(data []byte) error {

	createRequestBulkRetryRequestBodyQueryEventsCount2 := new(CreateRequestBulkRetryRequestBodyQueryEventsCount2)
	if err := utils.UnmarshalJSON(data, &createRequestBulkRetryRequestBodyQueryEventsCount2, "", true, true); err == nil {
		u.CreateRequestBulkRetryRequestBodyQueryEventsCount2 = createRequestBulkRetryRequestBodyQueryEventsCount2
		u.Type = CreateRequestBulkRetryRequestBodyQueryEventsCountTypeCreateRequestBulkRetryRequestBodyQueryEventsCount2
		return nil
	}

	integer := new(int64)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = integer
		u.Type = CreateRequestBulkRetryRequestBodyQueryEventsCountTypeInteger
		return nil
	}

	arrayOfinteger := []int64{}
	if err := utils.UnmarshalJSON(data, &arrayOfinteger, "", true, true); err == nil {
		u.ArrayOfinteger = arrayOfinteger
		u.Type = CreateRequestBulkRetryRequestBodyQueryEventsCountTypeArrayOfinteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateRequestBulkRetryRequestBodyQueryEventsCount) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.CreateRequestBulkRetryRequestBodyQueryEventsCount2 != nil {
		return utils.MarshalJSON(u.CreateRequestBulkRetryRequestBodyQueryEventsCount2, "", true)
	}

	if u.ArrayOfinteger != nil {
		return utils.MarshalJSON(u.ArrayOfinteger, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateRequestBulkRetryRequestBodyQueryHeaders2 - URL Encoded string of the JSON to match to the data headers
type CreateRequestBulkRetryRequestBodyQueryHeaders2 struct {
}

type CreateRequestBulkRetryRequestBodyQueryHeadersType string

const (
	CreateRequestBulkRetryRequestBodyQueryHeadersTypeStr                                            CreateRequestBulkRetryRequestBodyQueryHeadersType = "str"
	CreateRequestBulkRetryRequestBodyQueryHeadersTypeCreateRequestBulkRetryRequestBodyQueryHeaders2 CreateRequestBulkRetryRequestBodyQueryHeadersType = "createRequestBulkRetry_requestBody_query_headers_2"
)

type CreateRequestBulkRetryRequestBodyQueryHeaders struct {
	Str                                            *string
	CreateRequestBulkRetryRequestBodyQueryHeaders2 *CreateRequestBulkRetryRequestBodyQueryHeaders2

	Type CreateRequestBulkRetryRequestBodyQueryHeadersType
}

func CreateCreateRequestBulkRetryRequestBodyQueryHeadersStr(str string) CreateRequestBulkRetryRequestBodyQueryHeaders {
	typ := CreateRequestBulkRetryRequestBodyQueryHeadersTypeStr

	return CreateRequestBulkRetryRequestBodyQueryHeaders{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateRequestBulkRetryRequestBodyQueryHeadersCreateRequestBulkRetryRequestBodyQueryHeaders2(createRequestBulkRetryRequestBodyQueryHeaders2 CreateRequestBulkRetryRequestBodyQueryHeaders2) CreateRequestBulkRetryRequestBodyQueryHeaders {
	typ := CreateRequestBulkRetryRequestBodyQueryHeadersTypeCreateRequestBulkRetryRequestBodyQueryHeaders2

	return CreateRequestBulkRetryRequestBodyQueryHeaders{
		CreateRequestBulkRetryRequestBodyQueryHeaders2: &createRequestBulkRetryRequestBodyQueryHeaders2,
		Type: typ,
	}
}

func (u *CreateRequestBulkRetryRequestBodyQueryHeaders) UnmarshalJSON(data []byte) error {

	createRequestBulkRetryRequestBodyQueryHeaders2 := new(CreateRequestBulkRetryRequestBodyQueryHeaders2)
	if err := utils.UnmarshalJSON(data, &createRequestBulkRetryRequestBodyQueryHeaders2, "", true, true); err == nil {
		u.CreateRequestBulkRetryRequestBodyQueryHeaders2 = createRequestBulkRetryRequestBodyQueryHeaders2
		u.Type = CreateRequestBulkRetryRequestBodyQueryHeadersTypeCreateRequestBulkRetryRequestBodyQueryHeaders2
		return nil
	}

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = CreateRequestBulkRetryRequestBodyQueryHeadersTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateRequestBulkRetryRequestBodyQueryHeaders) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CreateRequestBulkRetryRequestBodyQueryHeaders2 != nil {
		return utils.MarshalJSON(u.CreateRequestBulkRetryRequestBodyQueryHeaders2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateRequestBulkRetryRequestBodyQueryIDType string

const (
	CreateRequestBulkRetryRequestBodyQueryIDTypeStr        CreateRequestBulkRetryRequestBodyQueryIDType = "str"
	CreateRequestBulkRetryRequestBodyQueryIDTypeArrayOfstr CreateRequestBulkRetryRequestBodyQueryIDType = "arrayOfstr"
)

type CreateRequestBulkRetryRequestBodyQueryID struct {
	Str        *string
	ArrayOfstr []string

	Type CreateRequestBulkRetryRequestBodyQueryIDType
}

func CreateCreateRequestBulkRetryRequestBodyQueryIDStr(str string) CreateRequestBulkRetryRequestBodyQueryID {
	typ := CreateRequestBulkRetryRequestBodyQueryIDTypeStr

	return CreateRequestBulkRetryRequestBodyQueryID{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateRequestBulkRetryRequestBodyQueryIDArrayOfstr(arrayOfstr []string) CreateRequestBulkRetryRequestBodyQueryID {
	typ := CreateRequestBulkRetryRequestBodyQueryIDTypeArrayOfstr

	return CreateRequestBulkRetryRequestBodyQueryID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *CreateRequestBulkRetryRequestBodyQueryID) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = CreateRequestBulkRetryRequestBodyQueryIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = CreateRequestBulkRetryRequestBodyQueryIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateRequestBulkRetryRequestBodyQueryID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateRequestBulkRetryRequestBodyQueryIgnoredCount2 struct {
	Any      *bool  `json:"any,omitempty"`
	Contains *int64 `json:"contains,omitempty"`
	Gt       *int64 `json:"gt,omitempty"`
	Gte      *int64 `json:"gte,omitempty"`
	Le       *int64 `json:"le,omitempty"`
	Lte      *int64 `json:"lte,omitempty"`
}

func (o *CreateRequestBulkRetryRequestBodyQueryIgnoredCount2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *CreateRequestBulkRetryRequestBodyQueryIgnoredCount2) GetContains() *int64 {
	if o == nil {
		return nil
	}
	return o.Contains
}

func (o *CreateRequestBulkRetryRequestBodyQueryIgnoredCount2) GetGt() *int64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CreateRequestBulkRetryRequestBodyQueryIgnoredCount2) GetGte() *int64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CreateRequestBulkRetryRequestBodyQueryIgnoredCount2) GetLe() *int64 {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *CreateRequestBulkRetryRequestBodyQueryIgnoredCount2) GetLte() *int64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type CreateRequestBulkRetryRequestBodyQueryIgnoredCountType string

const (
	CreateRequestBulkRetryRequestBodyQueryIgnoredCountTypeInteger                                             CreateRequestBulkRetryRequestBodyQueryIgnoredCountType = "integer"
	CreateRequestBulkRetryRequestBodyQueryIgnoredCountTypeCreateRequestBulkRetryRequestBodyQueryIgnoredCount2 CreateRequestBulkRetryRequestBodyQueryIgnoredCountType = "createRequestBulkRetry_requestBody_query_ignored_count_2"
	CreateRequestBulkRetryRequestBodyQueryIgnoredCountTypeArrayOfinteger                                      CreateRequestBulkRetryRequestBodyQueryIgnoredCountType = "arrayOfinteger"
)

type CreateRequestBulkRetryRequestBodyQueryIgnoredCount struct {
	Integer                                             *int64
	CreateRequestBulkRetryRequestBodyQueryIgnoredCount2 *CreateRequestBulkRetryRequestBodyQueryIgnoredCount2
	ArrayOfinteger                                      []int64

	Type CreateRequestBulkRetryRequestBodyQueryIgnoredCountType
}

func CreateCreateRequestBulkRetryRequestBodyQueryIgnoredCountInteger(integer int64) CreateRequestBulkRetryRequestBodyQueryIgnoredCount {
	typ := CreateRequestBulkRetryRequestBodyQueryIgnoredCountTypeInteger

	return CreateRequestBulkRetryRequestBodyQueryIgnoredCount{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateCreateRequestBulkRetryRequestBodyQueryIgnoredCountCreateRequestBulkRetryRequestBodyQueryIgnoredCount2(createRequestBulkRetryRequestBodyQueryIgnoredCount2 CreateRequestBulkRetryRequestBodyQueryIgnoredCount2) CreateRequestBulkRetryRequestBodyQueryIgnoredCount {
	typ := CreateRequestBulkRetryRequestBodyQueryIgnoredCountTypeCreateRequestBulkRetryRequestBodyQueryIgnoredCount2

	return CreateRequestBulkRetryRequestBodyQueryIgnoredCount{
		CreateRequestBulkRetryRequestBodyQueryIgnoredCount2: &createRequestBulkRetryRequestBodyQueryIgnoredCount2,
		Type: typ,
	}
}

func CreateCreateRequestBulkRetryRequestBodyQueryIgnoredCountArrayOfinteger(arrayOfinteger []int64) CreateRequestBulkRetryRequestBodyQueryIgnoredCount {
	typ := CreateRequestBulkRetryRequestBodyQueryIgnoredCountTypeArrayOfinteger

	return CreateRequestBulkRetryRequestBodyQueryIgnoredCount{
		ArrayOfinteger: arrayOfinteger,
		Type:           typ,
	}
}

func (u *CreateRequestBulkRetryRequestBodyQueryIgnoredCount) UnmarshalJSON(data []byte) error {

	createRequestBulkRetryRequestBodyQueryIgnoredCount2 := new(CreateRequestBulkRetryRequestBodyQueryIgnoredCount2)
	if err := utils.UnmarshalJSON(data, &createRequestBulkRetryRequestBodyQueryIgnoredCount2, "", true, true); err == nil {
		u.CreateRequestBulkRetryRequestBodyQueryIgnoredCount2 = createRequestBulkRetryRequestBodyQueryIgnoredCount2
		u.Type = CreateRequestBulkRetryRequestBodyQueryIgnoredCountTypeCreateRequestBulkRetryRequestBodyQueryIgnoredCount2
		return nil
	}

	integer := new(int64)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = integer
		u.Type = CreateRequestBulkRetryRequestBodyQueryIgnoredCountTypeInteger
		return nil
	}

	arrayOfinteger := []int64{}
	if err := utils.UnmarshalJSON(data, &arrayOfinteger, "", true, true); err == nil {
		u.ArrayOfinteger = arrayOfinteger
		u.Type = CreateRequestBulkRetryRequestBodyQueryIgnoredCountTypeArrayOfinteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateRequestBulkRetryRequestBodyQueryIgnoredCount) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.CreateRequestBulkRetryRequestBodyQueryIgnoredCount2 != nil {
		return utils.MarshalJSON(u.CreateRequestBulkRetryRequestBodyQueryIgnoredCount2, "", true)
	}

	if u.ArrayOfinteger != nil {
		return utils.MarshalJSON(u.ArrayOfinteger, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateRequestBulkRetryRequestBodyQueryIngestedAt2 struct {
	Any *bool      `json:"any,omitempty"`
	Gt  *time.Time `json:"gt,omitempty"`
	Gte *time.Time `json:"gte,omitempty"`
	Le  *time.Time `json:"le,omitempty"`
	Lte *time.Time `json:"lte,omitempty"`
}

func (c CreateRequestBulkRetryRequestBodyQueryIngestedAt2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateRequestBulkRetryRequestBodyQueryIngestedAt2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateRequestBulkRetryRequestBodyQueryIngestedAt2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *CreateRequestBulkRetryRequestBodyQueryIngestedAt2) GetGt() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CreateRequestBulkRetryRequestBodyQueryIngestedAt2) GetGte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CreateRequestBulkRetryRequestBodyQueryIngestedAt2) GetLe() *time.Time {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *CreateRequestBulkRetryRequestBodyQueryIngestedAt2) GetLte() *time.Time {
	if o == nil {
		return nil
	}
	return o.Lte
}

type CreateRequestBulkRetryRequestBodyQueryIngestedAtType string

const (
	CreateRequestBulkRetryRequestBodyQueryIngestedAtTypeDateTime                                          CreateRequestBulkRetryRequestBodyQueryIngestedAtType = "date-time"
	CreateRequestBulkRetryRequestBodyQueryIngestedAtTypeCreateRequestBulkRetryRequestBodyQueryIngestedAt2 CreateRequestBulkRetryRequestBodyQueryIngestedAtType = "createRequestBulkRetry_requestBody_query_ingested_at_2"
)

type CreateRequestBulkRetryRequestBodyQueryIngestedAt struct {
	DateTime                                          *time.Time
	CreateRequestBulkRetryRequestBodyQueryIngestedAt2 *CreateRequestBulkRetryRequestBodyQueryIngestedAt2

	Type CreateRequestBulkRetryRequestBodyQueryIngestedAtType
}

func CreateCreateRequestBulkRetryRequestBodyQueryIngestedAtDateTime(dateTime time.Time) CreateRequestBulkRetryRequestBodyQueryIngestedAt {
	typ := CreateRequestBulkRetryRequestBodyQueryIngestedAtTypeDateTime

	return CreateRequestBulkRetryRequestBodyQueryIngestedAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateCreateRequestBulkRetryRequestBodyQueryIngestedAtCreateRequestBulkRetryRequestBodyQueryIngestedAt2(createRequestBulkRetryRequestBodyQueryIngestedAt2 CreateRequestBulkRetryRequestBodyQueryIngestedAt2) CreateRequestBulkRetryRequestBodyQueryIngestedAt {
	typ := CreateRequestBulkRetryRequestBodyQueryIngestedAtTypeCreateRequestBulkRetryRequestBodyQueryIngestedAt2

	return CreateRequestBulkRetryRequestBodyQueryIngestedAt{
		CreateRequestBulkRetryRequestBodyQueryIngestedAt2: &createRequestBulkRetryRequestBodyQueryIngestedAt2,
		Type: typ,
	}
}

func (u *CreateRequestBulkRetryRequestBodyQueryIngestedAt) UnmarshalJSON(data []byte) error {

	createRequestBulkRetryRequestBodyQueryIngestedAt2 := new(CreateRequestBulkRetryRequestBodyQueryIngestedAt2)
	if err := utils.UnmarshalJSON(data, &createRequestBulkRetryRequestBodyQueryIngestedAt2, "", true, true); err == nil {
		u.CreateRequestBulkRetryRequestBodyQueryIngestedAt2 = createRequestBulkRetryRequestBodyQueryIngestedAt2
		u.Type = CreateRequestBulkRetryRequestBodyQueryIngestedAtTypeCreateRequestBulkRetryRequestBodyQueryIngestedAt2
		return nil
	}

	dateTime := new(time.Time)
	if err := utils.UnmarshalJSON(data, &dateTime, "", true, true); err == nil {
		u.DateTime = dateTime
		u.Type = CreateRequestBulkRetryRequestBodyQueryIngestedAtTypeDateTime
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateRequestBulkRetryRequestBodyQueryIngestedAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return utils.MarshalJSON(u.DateTime, "", true)
	}

	if u.CreateRequestBulkRetryRequestBodyQueryIngestedAt2 != nil {
		return utils.MarshalJSON(u.CreateRequestBulkRetryRequestBodyQueryIngestedAt2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateRequestBulkRetryRequestBodyQueryParsedQuery2 - URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)
type CreateRequestBulkRetryRequestBodyQueryParsedQuery2 struct {
}

type CreateRequestBulkRetryRequestBodyQueryParsedQueryType string

const (
	CreateRequestBulkRetryRequestBodyQueryParsedQueryTypeStr                                                CreateRequestBulkRetryRequestBodyQueryParsedQueryType = "str"
	CreateRequestBulkRetryRequestBodyQueryParsedQueryTypeCreateRequestBulkRetryRequestBodyQueryParsedQuery2 CreateRequestBulkRetryRequestBodyQueryParsedQueryType = "createRequestBulkRetry_requestBody_query_parsed_query_2"
)

type CreateRequestBulkRetryRequestBodyQueryParsedQuery struct {
	Str                                                *string
	CreateRequestBulkRetryRequestBodyQueryParsedQuery2 *CreateRequestBulkRetryRequestBodyQueryParsedQuery2

	Type CreateRequestBulkRetryRequestBodyQueryParsedQueryType
}

func CreateCreateRequestBulkRetryRequestBodyQueryParsedQueryStr(str string) CreateRequestBulkRetryRequestBodyQueryParsedQuery {
	typ := CreateRequestBulkRetryRequestBodyQueryParsedQueryTypeStr

	return CreateRequestBulkRetryRequestBodyQueryParsedQuery{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateRequestBulkRetryRequestBodyQueryParsedQueryCreateRequestBulkRetryRequestBodyQueryParsedQuery2(createRequestBulkRetryRequestBodyQueryParsedQuery2 CreateRequestBulkRetryRequestBodyQueryParsedQuery2) CreateRequestBulkRetryRequestBodyQueryParsedQuery {
	typ := CreateRequestBulkRetryRequestBodyQueryParsedQueryTypeCreateRequestBulkRetryRequestBodyQueryParsedQuery2

	return CreateRequestBulkRetryRequestBodyQueryParsedQuery{
		CreateRequestBulkRetryRequestBodyQueryParsedQuery2: &createRequestBulkRetryRequestBodyQueryParsedQuery2,
		Type: typ,
	}
}

func (u *CreateRequestBulkRetryRequestBodyQueryParsedQuery) UnmarshalJSON(data []byte) error {

	createRequestBulkRetryRequestBodyQueryParsedQuery2 := new(CreateRequestBulkRetryRequestBodyQueryParsedQuery2)
	if err := utils.UnmarshalJSON(data, &createRequestBulkRetryRequestBodyQueryParsedQuery2, "", true, true); err == nil {
		u.CreateRequestBulkRetryRequestBodyQueryParsedQuery2 = createRequestBulkRetryRequestBodyQueryParsedQuery2
		u.Type = CreateRequestBulkRetryRequestBodyQueryParsedQueryTypeCreateRequestBulkRetryRequestBodyQueryParsedQuery2
		return nil
	}

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = CreateRequestBulkRetryRequestBodyQueryParsedQueryTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateRequestBulkRetryRequestBodyQueryParsedQuery) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CreateRequestBulkRetryRequestBodyQueryParsedQuery2 != nil {
		return utils.MarshalJSON(u.CreateRequestBulkRetryRequestBodyQueryParsedQuery2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CreateRequestBulkRetryRequestBodyQueryRejectionCause2 - Filter by rejection cause
type CreateRequestBulkRetryRequestBodyQueryRejectionCause2 struct {
	Any      *bool                         `json:"any,omitempty"`
	Contains *shared.RequestRejectionCause `json:"contains,omitempty"`
	Gt       *shared.RequestRejectionCause `json:"gt,omitempty"`
	Gte      *shared.RequestRejectionCause `json:"gte,omitempty"`
	Le       *shared.RequestRejectionCause `json:"le,omitempty"`
	Lte      *shared.RequestRejectionCause `json:"lte,omitempty"`
}

func (o *CreateRequestBulkRetryRequestBodyQueryRejectionCause2) GetAny() *bool {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *CreateRequestBulkRetryRequestBodyQueryRejectionCause2) GetContains() *shared.RequestRejectionCause {
	if o == nil {
		return nil
	}
	return o.Contains
}

func (o *CreateRequestBulkRetryRequestBodyQueryRejectionCause2) GetGt() *shared.RequestRejectionCause {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CreateRequestBulkRetryRequestBodyQueryRejectionCause2) GetGte() *shared.RequestRejectionCause {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CreateRequestBulkRetryRequestBodyQueryRejectionCause2) GetLe() *shared.RequestRejectionCause {
	if o == nil {
		return nil
	}
	return o.Le
}

func (o *CreateRequestBulkRetryRequestBodyQueryRejectionCause2) GetLte() *shared.RequestRejectionCause {
	if o == nil {
		return nil
	}
	return o.Lte
}

// CreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCause - Filter by rejection cause
type CreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCause string

const (
	CreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCauseSourceArchived         CreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCause = "SOURCE_ARCHIVED"
	CreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCauseNoWebhook              CreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCause = "NO_WEBHOOK"
	CreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCauseVerificationFailed     CreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCause = "VERIFICATION_FAILED"
	CreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCauseUnsupportedHTTPMethod  CreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCause = "UNSUPPORTED_HTTP_METHOD"
	CreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCauseUnsupportedContentType CreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCause = "UNSUPPORTED_CONTENT_TYPE"
	CreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCauseUnparsableJSON         CreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCause = "UNPARSABLE_JSON"
	CreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCausePayloadTooLarge        CreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCause = "PAYLOAD_TOO_LARGE"
	CreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCauseIngestionFatal         CreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCause = "INGESTION_FATAL"
	CreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCauseUnknown                CreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCause = "UNKNOWN"
)

func (e CreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCause) ToPointer() *CreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCause {
	return &e
}

func (e *CreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCause) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SOURCE_ARCHIVED":
		fallthrough
	case "NO_WEBHOOK":
		fallthrough
	case "VERIFICATION_FAILED":
		fallthrough
	case "UNSUPPORTED_HTTP_METHOD":
		fallthrough
	case "UNSUPPORTED_CONTENT_TYPE":
		fallthrough
	case "UNPARSABLE_JSON":
		fallthrough
	case "PAYLOAD_TOO_LARGE":
		fallthrough
	case "INGESTION_FATAL":
		fallthrough
	case "UNKNOWN":
		*e = CreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCause(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCause: %v", v)
	}
}

type CreateRequestBulkRetryRequestBodyQueryRejectionCauseType string

const (
	CreateRequestBulkRetryRequestBodyQueryRejectionCauseTypeCreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCause CreateRequestBulkRetryRequestBodyQueryRejectionCauseType = "createRequestBulkRetry_requestBody_query_rejection_cause_RequestRejectionCause"
	CreateRequestBulkRetryRequestBodyQueryRejectionCauseTypeCreateRequestBulkRetryRequestBodyQueryRejectionCause2                     CreateRequestBulkRetryRequestBodyQueryRejectionCauseType = "createRequestBulkRetry_requestBody_query_rejection_cause_2"
	CreateRequestBulkRetryRequestBodyQueryRejectionCauseTypeArrayOfRequestRejectionCause                                              CreateRequestBulkRetryRequestBodyQueryRejectionCauseType = "arrayOfRequestRejectionCause"
)

type CreateRequestBulkRetryRequestBodyQueryRejectionCause struct {
	CreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCause *CreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCause
	CreateRequestBulkRetryRequestBodyQueryRejectionCause2                     *CreateRequestBulkRetryRequestBodyQueryRejectionCause2
	ArrayOfRequestRejectionCause                                              []shared.RequestRejectionCause

	Type CreateRequestBulkRetryRequestBodyQueryRejectionCauseType
}

func CreateCreateRequestBulkRetryRequestBodyQueryRejectionCauseCreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCause(createRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCause CreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCause) CreateRequestBulkRetryRequestBodyQueryRejectionCause {
	typ := CreateRequestBulkRetryRequestBodyQueryRejectionCauseTypeCreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCause

	return CreateRequestBulkRetryRequestBodyQueryRejectionCause{
		CreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCause: &createRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCause,
		Type: typ,
	}
}

func CreateCreateRequestBulkRetryRequestBodyQueryRejectionCauseCreateRequestBulkRetryRequestBodyQueryRejectionCause2(createRequestBulkRetryRequestBodyQueryRejectionCause2 CreateRequestBulkRetryRequestBodyQueryRejectionCause2) CreateRequestBulkRetryRequestBodyQueryRejectionCause {
	typ := CreateRequestBulkRetryRequestBodyQueryRejectionCauseTypeCreateRequestBulkRetryRequestBodyQueryRejectionCause2

	return CreateRequestBulkRetryRequestBodyQueryRejectionCause{
		CreateRequestBulkRetryRequestBodyQueryRejectionCause2: &createRequestBulkRetryRequestBodyQueryRejectionCause2,
		Type: typ,
	}
}

func CreateCreateRequestBulkRetryRequestBodyQueryRejectionCauseArrayOfRequestRejectionCause(arrayOfRequestRejectionCause []shared.RequestRejectionCause) CreateRequestBulkRetryRequestBodyQueryRejectionCause {
	typ := CreateRequestBulkRetryRequestBodyQueryRejectionCauseTypeArrayOfRequestRejectionCause

	return CreateRequestBulkRetryRequestBodyQueryRejectionCause{
		ArrayOfRequestRejectionCause: arrayOfRequestRejectionCause,
		Type:                         typ,
	}
}

func (u *CreateRequestBulkRetryRequestBodyQueryRejectionCause) UnmarshalJSON(data []byte) error {

	createRequestBulkRetryRequestBodyQueryRejectionCause2 := new(CreateRequestBulkRetryRequestBodyQueryRejectionCause2)
	if err := utils.UnmarshalJSON(data, &createRequestBulkRetryRequestBodyQueryRejectionCause2, "", true, true); err == nil {
		u.CreateRequestBulkRetryRequestBodyQueryRejectionCause2 = createRequestBulkRetryRequestBodyQueryRejectionCause2
		u.Type = CreateRequestBulkRetryRequestBodyQueryRejectionCauseTypeCreateRequestBulkRetryRequestBodyQueryRejectionCause2
		return nil
	}

	createRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCause := new(CreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCause)
	if err := utils.UnmarshalJSON(data, &createRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCause, "", true, true); err == nil {
		u.CreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCause = createRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCause
		u.Type = CreateRequestBulkRetryRequestBodyQueryRejectionCauseTypeCreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCause
		return nil
	}

	arrayOfRequestRejectionCause := []shared.RequestRejectionCause{}
	if err := utils.UnmarshalJSON(data, &arrayOfRequestRejectionCause, "", true, true); err == nil {
		u.ArrayOfRequestRejectionCause = arrayOfRequestRejectionCause
		u.Type = CreateRequestBulkRetryRequestBodyQueryRejectionCauseTypeArrayOfRequestRejectionCause
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateRequestBulkRetryRequestBodyQueryRejectionCause) MarshalJSON() ([]byte, error) {
	if u.CreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCause != nil {
		return utils.MarshalJSON(u.CreateRequestBulkRetryRequestBodyQueryRejectionCauseRequestRejectionCause, "", true)
	}

	if u.CreateRequestBulkRetryRequestBodyQueryRejectionCause2 != nil {
		return utils.MarshalJSON(u.CreateRequestBulkRetryRequestBodyQueryRejectionCause2, "", true)
	}

	if u.ArrayOfRequestRejectionCause != nil {
		return utils.MarshalJSON(u.ArrayOfRequestRejectionCause, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateRequestBulkRetryRequestBodyQuerySourceIDType string

const (
	CreateRequestBulkRetryRequestBodyQuerySourceIDTypeStr        CreateRequestBulkRetryRequestBodyQuerySourceIDType = "str"
	CreateRequestBulkRetryRequestBodyQuerySourceIDTypeArrayOfstr CreateRequestBulkRetryRequestBodyQuerySourceIDType = "arrayOfstr"
)

type CreateRequestBulkRetryRequestBodyQuerySourceID struct {
	Str        *string
	ArrayOfstr []string

	Type CreateRequestBulkRetryRequestBodyQuerySourceIDType
}

func CreateCreateRequestBulkRetryRequestBodyQuerySourceIDStr(str string) CreateRequestBulkRetryRequestBodyQuerySourceID {
	typ := CreateRequestBulkRetryRequestBodyQuerySourceIDTypeStr

	return CreateRequestBulkRetryRequestBodyQuerySourceID{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateRequestBulkRetryRequestBodyQuerySourceIDArrayOfstr(arrayOfstr []string) CreateRequestBulkRetryRequestBodyQuerySourceID {
	typ := CreateRequestBulkRetryRequestBodyQuerySourceIDTypeArrayOfstr

	return CreateRequestBulkRetryRequestBodyQuerySourceID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *CreateRequestBulkRetryRequestBodyQuerySourceID) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = CreateRequestBulkRetryRequestBodyQuerySourceIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = CreateRequestBulkRetryRequestBodyQuerySourceIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateRequestBulkRetryRequestBodyQuerySourceID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateRequestBulkRetryRequestBodyQueryStatus string

const (
	CreateRequestBulkRetryRequestBodyQueryStatusAccepted CreateRequestBulkRetryRequestBodyQueryStatus = "accepted"
	CreateRequestBulkRetryRequestBodyQueryStatusRejected CreateRequestBulkRetryRequestBodyQueryStatus = "rejected"
)

func (e CreateRequestBulkRetryRequestBodyQueryStatus) ToPointer() *CreateRequestBulkRetryRequestBodyQueryStatus {
	return &e
}

func (e *CreateRequestBulkRetryRequestBodyQueryStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "accepted":
		fallthrough
	case "rejected":
		*e = CreateRequestBulkRetryRequestBodyQueryStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRequestBulkRetryRequestBodyQueryStatus: %v", v)
	}
}

// CreateRequestBulkRetryRequestBodyQuery - Filter properties for the events to be included in the bulk retry, use query parameters of [Requests](#requests)
type CreateRequestBulkRetryRequestBodyQuery struct {
	// URL Encoded string of the JSON to match to the data body
	Body        *CreateRequestBulkRetryRequestBodyQueryBody        `json:"body,omitempty"`
	BulkRetryID *CreateRequestBulkRetryRequestBodyQueryBulkRetryID `json:"bulk_retry_id,omitempty"`
	CreatedAt   *CreateRequestBulkRetryRequestBodyQueryCreatedAt   `json:"created_at,omitempty"`
	EventsCount *CreateRequestBulkRetryRequestBodyQueryEventsCount `json:"events_count,omitempty"`
	// URL Encoded string of the JSON to match to the data headers
	Headers *CreateRequestBulkRetryRequestBodyQueryHeaders `json:"headers,omitempty"`
	// Filter by requests IDs
	ID           *CreateRequestBulkRetryRequestBodyQueryID           `json:"id,omitempty"`
	IgnoredCount *CreateRequestBulkRetryRequestBodyQueryIgnoredCount `json:"ignored_count,omitempty"`
	IngestedAt   *CreateRequestBulkRetryRequestBodyQueryIngestedAt   `json:"ingested_at,omitempty"`
	// URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)
	ParsedQuery *CreateRequestBulkRetryRequestBodyQueryParsedQuery `json:"parsed_query,omitempty"`
	// URL Encoded string of the string to match partially to the path
	Path *string `json:"path,omitempty"`
	// Filter by rejection cause
	RejectionCause *CreateRequestBulkRetryRequestBodyQueryRejectionCause `json:"rejection_cause,omitempty"`
	// URL Encoded string of the string to match partially to the body, headers, parsed_query or path
	SearchTerm *string `json:"search_term,omitempty"`
	// Filter by source IDs
	SourceID *CreateRequestBulkRetryRequestBodyQuerySourceID `json:"source_id,omitempty"`
	Status   *CreateRequestBulkRetryRequestBodyQueryStatus   `json:"status,omitempty"`
	// Filter by verification status
	Verified *bool `json:"verified,omitempty"`
}

func (o *CreateRequestBulkRetryRequestBodyQuery) GetBody() *CreateRequestBulkRetryRequestBodyQueryBody {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *CreateRequestBulkRetryRequestBodyQuery) GetBulkRetryID() *CreateRequestBulkRetryRequestBodyQueryBulkRetryID {
	if o == nil {
		return nil
	}
	return o.BulkRetryID
}

func (o *CreateRequestBulkRetryRequestBodyQuery) GetCreatedAt() *CreateRequestBulkRetryRequestBodyQueryCreatedAt {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateRequestBulkRetryRequestBodyQuery) GetEventsCount() *CreateRequestBulkRetryRequestBodyQueryEventsCount {
	if o == nil {
		return nil
	}
	return o.EventsCount
}

func (o *CreateRequestBulkRetryRequestBodyQuery) GetHeaders() *CreateRequestBulkRetryRequestBodyQueryHeaders {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateRequestBulkRetryRequestBodyQuery) GetID() *CreateRequestBulkRetryRequestBodyQueryID {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CreateRequestBulkRetryRequestBodyQuery) GetIgnoredCount() *CreateRequestBulkRetryRequestBodyQueryIgnoredCount {
	if o == nil {
		return nil
	}
	return o.IgnoredCount
}

func (o *CreateRequestBulkRetryRequestBodyQuery) GetIngestedAt() *CreateRequestBulkRetryRequestBodyQueryIngestedAt {
	if o == nil {
		return nil
	}
	return o.IngestedAt
}

func (o *CreateRequestBulkRetryRequestBodyQuery) GetParsedQuery() *CreateRequestBulkRetryRequestBodyQueryParsedQuery {
	if o == nil {
		return nil
	}
	return o.ParsedQuery
}

func (o *CreateRequestBulkRetryRequestBodyQuery) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *CreateRequestBulkRetryRequestBodyQuery) GetRejectionCause() *CreateRequestBulkRetryRequestBodyQueryRejectionCause {
	if o == nil {
		return nil
	}
	return o.RejectionCause
}

func (o *CreateRequestBulkRetryRequestBodyQuery) GetSearchTerm() *string {
	if o == nil {
		return nil
	}
	return o.SearchTerm
}

func (o *CreateRequestBulkRetryRequestBodyQuery) GetSourceID() *CreateRequestBulkRetryRequestBodyQuerySourceID {
	if o == nil {
		return nil
	}
	return o.SourceID
}

func (o *CreateRequestBulkRetryRequestBodyQuery) GetStatus() *CreateRequestBulkRetryRequestBodyQueryStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *CreateRequestBulkRetryRequestBodyQuery) GetVerified() *bool {
	if o == nil {
		return nil
	}
	return o.Verified
}

type CreateRequestBulkRetryRequestBody struct {
	// Filter properties for the events to be included in the bulk retry, use query parameters of [Requests](#requests)
	Query *CreateRequestBulkRetryRequestBodyQuery `json:"query,omitempty"`
}

func (o *CreateRequestBulkRetryRequestBody) GetQuery() *CreateRequestBulkRetryRequestBodyQuery {
	if o == nil {
		return nil
	}
	return o.Query
}

type CreateRequestBulkRetryResponse struct {
	// Bad Request
	APIErrorResponse *shared.APIErrorResponse
	// A single requests bulk retry
	BatchOperation *shared.BatchOperation
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *CreateRequestBulkRetryResponse) GetAPIErrorResponse() *shared.APIErrorResponse {
	if o == nil {
		return nil
	}
	return o.APIErrorResponse
}

func (o *CreateRequestBulkRetryResponse) GetBatchOperation() *shared.BatchOperation {
	if o == nil {
		return nil
	}
	return o.BatchOperation
}

func (o *CreateRequestBulkRetryResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateRequestBulkRetryResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateRequestBulkRetryResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
