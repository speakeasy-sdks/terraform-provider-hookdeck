// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"hashicups/internal/sdk/pkg/models/shared"
	"net/http"
	"time"
)

type GetBookmarksDir2 string

const (
	GetBookmarksDir2Asc  GetBookmarksDir2 = "asc"
	GetBookmarksDir2Desc GetBookmarksDir2 = "desc"
)

func (e GetBookmarksDir2) ToPointer() *GetBookmarksDir2 {
	return &e
}

func (e *GetBookmarksDir2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetBookmarksDir2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetBookmarksDir2: %v", v)
	}
}

// GetBookmarksDir1 - Sort direction
type GetBookmarksDir1 string

const (
	GetBookmarksDir1Asc  GetBookmarksDir1 = "asc"
	GetBookmarksDir1Desc GetBookmarksDir1 = "desc"
)

func (e GetBookmarksDir1) ToPointer() *GetBookmarksDir1 {
	return &e
}

func (e *GetBookmarksDir1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetBookmarksDir1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetBookmarksDir1: %v", v)
	}
}

type GetBookmarksDirType string

const (
	GetBookmarksDirTypeGetBookmarksDir1        GetBookmarksDirType = "getBookmarksDir_1"
	GetBookmarksDirTypeArrayOfgetBookmarksDir2 GetBookmarksDirType = "arrayOfgetBookmarksDir_2"
)

type GetBookmarksDir struct {
	GetBookmarksDir1        *GetBookmarksDir1
	ArrayOfgetBookmarksDir2 []GetBookmarksDir2

	Type GetBookmarksDirType
}

func CreateGetBookmarksDirGetBookmarksDir1(getBookmarksDir1 GetBookmarksDir1) GetBookmarksDir {
	typ := GetBookmarksDirTypeGetBookmarksDir1

	return GetBookmarksDir{
		GetBookmarksDir1: &getBookmarksDir1,
		Type:             typ,
	}
}

func CreateGetBookmarksDirArrayOfgetBookmarksDir2(arrayOfgetBookmarksDir2 []GetBookmarksDir2) GetBookmarksDir {
	typ := GetBookmarksDirTypeArrayOfgetBookmarksDir2

	return GetBookmarksDir{
		ArrayOfgetBookmarksDir2: arrayOfgetBookmarksDir2,
		Type:                    typ,
	}
}

func (u *GetBookmarksDir) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	getBookmarksDir1 := new(GetBookmarksDir1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getBookmarksDir1); err == nil {
		u.GetBookmarksDir1 = getBookmarksDir1
		u.Type = GetBookmarksDirTypeGetBookmarksDir1
		return nil
	}

	arrayOfgetBookmarksDir2 := []GetBookmarksDir2{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfgetBookmarksDir2); err == nil {
		u.ArrayOfgetBookmarksDir2 = arrayOfgetBookmarksDir2
		u.Type = GetBookmarksDirTypeArrayOfgetBookmarksDir2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetBookmarksDir) MarshalJSON() ([]byte, error) {
	if u.GetBookmarksDir1 != nil {
		return json.Marshal(u.GetBookmarksDir1)
	}

	if u.ArrayOfgetBookmarksDir2 != nil {
		return json.Marshal(u.ArrayOfgetBookmarksDir2)
	}

	return nil, nil
}

type GetBookmarksEventDataIDType string

const (
	GetBookmarksEventDataIDTypeStr        GetBookmarksEventDataIDType = "str"
	GetBookmarksEventDataIDTypeArrayOfstr GetBookmarksEventDataIDType = "arrayOfstr"
)

type GetBookmarksEventDataID struct {
	Str        *string
	ArrayOfstr []string

	Type GetBookmarksEventDataIDType
}

func CreateGetBookmarksEventDataIDStr(str string) GetBookmarksEventDataID {
	typ := GetBookmarksEventDataIDTypeStr

	return GetBookmarksEventDataID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetBookmarksEventDataIDArrayOfstr(arrayOfstr []string) GetBookmarksEventDataID {
	typ := GetBookmarksEventDataIDTypeArrayOfstr

	return GetBookmarksEventDataID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetBookmarksEventDataID) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = GetBookmarksEventDataIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetBookmarksEventDataIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetBookmarksEventDataID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	return nil, nil
}

type GetBookmarksIDType string

const (
	GetBookmarksIDTypeStr        GetBookmarksIDType = "str"
	GetBookmarksIDTypeArrayOfstr GetBookmarksIDType = "arrayOfstr"
)

type GetBookmarksID struct {
	Str        *string
	ArrayOfstr []string

	Type GetBookmarksIDType
}

func CreateGetBookmarksIDStr(str string) GetBookmarksID {
	typ := GetBookmarksIDTypeStr

	return GetBookmarksID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetBookmarksIDArrayOfstr(arrayOfstr []string) GetBookmarksID {
	typ := GetBookmarksIDTypeArrayOfstr

	return GetBookmarksID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetBookmarksID) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = GetBookmarksIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetBookmarksIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetBookmarksID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	return nil, nil
}

type GetBookmarksLabelType string

const (
	GetBookmarksLabelTypeStr        GetBookmarksLabelType = "str"
	GetBookmarksLabelTypeArrayOfstr GetBookmarksLabelType = "arrayOfstr"
)

type GetBookmarksLabel struct {
	Str        *string
	ArrayOfstr []string

	Type GetBookmarksLabelType
}

func CreateGetBookmarksLabelStr(str string) GetBookmarksLabel {
	typ := GetBookmarksLabelTypeStr

	return GetBookmarksLabel{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetBookmarksLabelArrayOfstr(arrayOfstr []string) GetBookmarksLabel {
	typ := GetBookmarksLabelTypeArrayOfstr

	return GetBookmarksLabel{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetBookmarksLabel) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = GetBookmarksLabelTypeStr
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetBookmarksLabelTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetBookmarksLabel) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	return nil, nil
}

// GetBookmarksLastUsedAt2 - Filter by last used date
type GetBookmarksLastUsedAt2 struct {
	Any *bool `queryParam:"name=any"`
	// Last used date
	Gt *time.Time `queryParam:"name=gt"`
	// Last used date
	Gte *time.Time `queryParam:"name=gte"`
	// Last used date
	Le *time.Time `queryParam:"name=le"`
	// Last used date
	Lte *time.Time `queryParam:"name=lte"`
}

type GetBookmarksLastUsedAtType string

const (
	GetBookmarksLastUsedAtTypeDateTime                GetBookmarksLastUsedAtType = "date-time"
	GetBookmarksLastUsedAtTypeGetBookmarksLastUsedAt2 GetBookmarksLastUsedAtType = "getBookmarksLastUsedAt_2"
)

type GetBookmarksLastUsedAt struct {
	DateTime                *time.Time
	GetBookmarksLastUsedAt2 *GetBookmarksLastUsedAt2

	Type GetBookmarksLastUsedAtType
}

func CreateGetBookmarksLastUsedAtDateTime(dateTime time.Time) GetBookmarksLastUsedAt {
	typ := GetBookmarksLastUsedAtTypeDateTime

	return GetBookmarksLastUsedAt{
		DateTime: &dateTime,
		Type:     typ,
	}
}

func CreateGetBookmarksLastUsedAtGetBookmarksLastUsedAt2(getBookmarksLastUsedAt2 GetBookmarksLastUsedAt2) GetBookmarksLastUsedAt {
	typ := GetBookmarksLastUsedAtTypeGetBookmarksLastUsedAt2

	return GetBookmarksLastUsedAt{
		GetBookmarksLastUsedAt2: &getBookmarksLastUsedAt2,
		Type:                    typ,
	}
}

func (u *GetBookmarksLastUsedAt) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	dateTime := new(time.Time)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&dateTime); err == nil {
		u.DateTime = dateTime
		u.Type = GetBookmarksLastUsedAtTypeDateTime
		return nil
	}

	getBookmarksLastUsedAt2 := new(GetBookmarksLastUsedAt2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getBookmarksLastUsedAt2); err == nil {
		u.GetBookmarksLastUsedAt2 = getBookmarksLastUsedAt2
		u.Type = GetBookmarksLastUsedAtTypeGetBookmarksLastUsedAt2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetBookmarksLastUsedAt) MarshalJSON() ([]byte, error) {
	if u.DateTime != nil {
		return json.Marshal(u.DateTime)
	}

	if u.GetBookmarksLastUsedAt2 != nil {
		return json.Marshal(u.GetBookmarksLastUsedAt2)
	}

	return nil, nil
}

type GetBookmarksNameType string

const (
	GetBookmarksNameTypeStr        GetBookmarksNameType = "str"
	GetBookmarksNameTypeArrayOfstr GetBookmarksNameType = "arrayOfstr"
)

type GetBookmarksName struct {
	Str        *string
	ArrayOfstr []string

	Type GetBookmarksNameType
}

func CreateGetBookmarksNameStr(str string) GetBookmarksName {
	typ := GetBookmarksNameTypeStr

	return GetBookmarksName{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetBookmarksNameArrayOfstr(arrayOfstr []string) GetBookmarksName {
	typ := GetBookmarksNameTypeArrayOfstr

	return GetBookmarksName{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetBookmarksName) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = GetBookmarksNameTypeStr
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetBookmarksNameTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetBookmarksName) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	return nil, nil
}

type GetBookmarksOrderBy2 string

const (
	GetBookmarksOrderBy2CreatedAt GetBookmarksOrderBy2 = "created_at"
)

func (e GetBookmarksOrderBy2) ToPointer() *GetBookmarksOrderBy2 {
	return &e
}

func (e *GetBookmarksOrderBy2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created_at":
		*e = GetBookmarksOrderBy2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetBookmarksOrderBy2: %v", v)
	}
}

// GetBookmarksOrderBy1 - Sort key(s)
type GetBookmarksOrderBy1 string

const (
	GetBookmarksOrderBy1CreatedAt GetBookmarksOrderBy1 = "created_at"
)

func (e GetBookmarksOrderBy1) ToPointer() *GetBookmarksOrderBy1 {
	return &e
}

func (e *GetBookmarksOrderBy1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created_at":
		*e = GetBookmarksOrderBy1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetBookmarksOrderBy1: %v", v)
	}
}

type GetBookmarksOrderByType string

const (
	GetBookmarksOrderByTypeGetBookmarksOrderBy1        GetBookmarksOrderByType = "getBookmarksOrderBy_1"
	GetBookmarksOrderByTypeArrayOfgetBookmarksOrderBy2 GetBookmarksOrderByType = "arrayOfgetBookmarksOrderBy_2"
)

type GetBookmarksOrderBy struct {
	GetBookmarksOrderBy1        *GetBookmarksOrderBy1
	ArrayOfgetBookmarksOrderBy2 []GetBookmarksOrderBy2

	Type GetBookmarksOrderByType
}

func CreateGetBookmarksOrderByGetBookmarksOrderBy1(getBookmarksOrderBy1 GetBookmarksOrderBy1) GetBookmarksOrderBy {
	typ := GetBookmarksOrderByTypeGetBookmarksOrderBy1

	return GetBookmarksOrderBy{
		GetBookmarksOrderBy1: &getBookmarksOrderBy1,
		Type:                 typ,
	}
}

func CreateGetBookmarksOrderByArrayOfgetBookmarksOrderBy2(arrayOfgetBookmarksOrderBy2 []GetBookmarksOrderBy2) GetBookmarksOrderBy {
	typ := GetBookmarksOrderByTypeArrayOfgetBookmarksOrderBy2

	return GetBookmarksOrderBy{
		ArrayOfgetBookmarksOrderBy2: arrayOfgetBookmarksOrderBy2,
		Type:                        typ,
	}
}

func (u *GetBookmarksOrderBy) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	getBookmarksOrderBy1 := new(GetBookmarksOrderBy1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getBookmarksOrderBy1); err == nil {
		u.GetBookmarksOrderBy1 = getBookmarksOrderBy1
		u.Type = GetBookmarksOrderByTypeGetBookmarksOrderBy1
		return nil
	}

	arrayOfgetBookmarksOrderBy2 := []GetBookmarksOrderBy2{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfgetBookmarksOrderBy2); err == nil {
		u.ArrayOfgetBookmarksOrderBy2 = arrayOfgetBookmarksOrderBy2
		u.Type = GetBookmarksOrderByTypeArrayOfgetBookmarksOrderBy2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetBookmarksOrderBy) MarshalJSON() ([]byte, error) {
	if u.GetBookmarksOrderBy1 != nil {
		return json.Marshal(u.GetBookmarksOrderBy1)
	}

	if u.ArrayOfgetBookmarksOrderBy2 != nil {
		return json.Marshal(u.ArrayOfgetBookmarksOrderBy2)
	}

	return nil, nil
}

type GetBookmarksWebhookIDType string

const (
	GetBookmarksWebhookIDTypeStr        GetBookmarksWebhookIDType = "str"
	GetBookmarksWebhookIDTypeArrayOfstr GetBookmarksWebhookIDType = "arrayOfstr"
)

type GetBookmarksWebhookID struct {
	Str        *string
	ArrayOfstr []string

	Type GetBookmarksWebhookIDType
}

func CreateGetBookmarksWebhookIDStr(str string) GetBookmarksWebhookID {
	typ := GetBookmarksWebhookIDTypeStr

	return GetBookmarksWebhookID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetBookmarksWebhookIDArrayOfstr(arrayOfstr []string) GetBookmarksWebhookID {
	typ := GetBookmarksWebhookIDTypeArrayOfstr

	return GetBookmarksWebhookID{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *GetBookmarksWebhookID) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = GetBookmarksWebhookIDTypeStr
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = GetBookmarksWebhookIDTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetBookmarksWebhookID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	return nil, nil
}

type GetBookmarksRequest struct {
	Dir         *GetBookmarksDir         `queryParam:"style=form,explode=true,name=dir"`
	EventDataID *GetBookmarksEventDataID `queryParam:"style=form,explode=true,name=event_data_id"`
	ID          *GetBookmarksID          `queryParam:"style=form,explode=true,name=id"`
	Label       *GetBookmarksLabel       `queryParam:"style=form,explode=true,name=label"`
	LastUsedAt  *GetBookmarksLastUsedAt  `queryParam:"style=form,explode=true,name=last_used_at"`
	Limit       *int64                   `queryParam:"style=form,explode=true,name=limit"`
	Name        *GetBookmarksName        `queryParam:"style=form,explode=true,name=name"`
	Next        *string                  `queryParam:"style=form,explode=true,name=next"`
	OrderBy     *GetBookmarksOrderBy     `queryParam:"style=form,explode=true,name=order_by"`
	Prev        *string                  `queryParam:"style=form,explode=true,name=prev"`
	WebhookID   *GetBookmarksWebhookID   `queryParam:"style=form,explode=true,name=webhook_id"`
}

type GetBookmarksResponse struct {
	// Bad Request
	APIErrorResponse *shared.APIErrorResponse
	// List of bookmarks
	BookmarkPaginatedResult *shared.BookmarkPaginatedResult
	ContentType             string
	StatusCode              int
	RawResponse             *http.Response
}
