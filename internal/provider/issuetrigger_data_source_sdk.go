// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"hashicups/internal/sdk/pkg/models/shared"
	"time"
)

func (r *IssueTriggerDataSourceModel) RefreshFromGetResponse(resp *shared.IssueTrigger) {
	if r.Channels == nil {
		r.Channels = &IssueTriggerChannels{}
	}
	if resp.Channels == nil {
		r.Channels = nil
	} else {
		r.Channels = &IssueTriggerChannels{}
		if r.Channels.Email == nil {
			r.Channels.Email = &IssueTriggerEmailChannel{}
		}
		if resp.Channels.Email == nil {
			r.Channels.Email = nil
		} else {
			r.Channels.Email = &IssueTriggerEmailChannel{}
		}
		if r.Channels.Opsgenie == nil {
			r.Channels.Opsgenie = &IssueTriggerIntegrationChannel{}
		}
		if resp.Channels.Opsgenie == nil {
			r.Channels.Opsgenie = nil
		} else {
			r.Channels.Opsgenie = &IssueTriggerIntegrationChannel{}
		}
		if r.Channels.Slack == nil {
			r.Channels.Slack = &IssueTriggerSlackChannel{}
		}
		if resp.Channels.Slack == nil {
			r.Channels.Slack = nil
		} else {
			r.Channels.Slack = &IssueTriggerSlackChannel{}
			r.Channels.Slack.ChannelName = types.StringValue(resp.Channels.Slack.ChannelName)
		}
	}
	if resp.Configs.IssueTriggerDeliveryConfigs != nil {
		r.Configs.IssueTriggerDeliveryConfigs = &IssueTriggerDeliveryConfigs{}
		if resp.Configs.IssueTriggerDeliveryConfigs.Connections.Str != nil {
			if resp.Configs.IssueTriggerDeliveryConfigs.Connections.Str != nil {
				r.Configs.IssueTriggerDeliveryConfigs.Connections.Str = types.StringValue(*resp.Configs.IssueTriggerDeliveryConfigs.Connections.Str)
			} else {
				r.Configs.IssueTriggerDeliveryConfigs.Connections.Str = types.StringNull()
			}
		}
		if resp.Configs.IssueTriggerDeliveryConfigs.Connections.ArrayOfstr != nil {
			r.Configs.IssueTriggerDeliveryConfigs.Connections.ArrayOfstr = nil
			for _, v := range resp.Configs.IssueTriggerDeliveryConfigs.Connections.ArrayOfstr {
				r.Configs.IssueTriggerDeliveryConfigs.Connections.ArrayOfstr = append(r.Configs.IssueTriggerDeliveryConfigs.Connections.ArrayOfstr, types.StringValue(v))
			}
		}
		r.Configs.IssueTriggerDeliveryConfigs.Strategy = types.StringValue(string(resp.Configs.IssueTriggerDeliveryConfigs.Strategy))
	}
	if resp.Configs.IssueTriggerTransformationConfigs != nil {
		r.Configs.IssueTriggerTransformationConfigs = &IssueTriggerTransformationConfigs{}
		r.Configs.IssueTriggerTransformationConfigs.LogLevel = types.StringValue(string(resp.Configs.IssueTriggerTransformationConfigs.LogLevel))
		if resp.Configs.IssueTriggerTransformationConfigs.Transformations.Str != nil {
			if resp.Configs.IssueTriggerTransformationConfigs.Transformations.Str != nil {
				r.Configs.IssueTriggerTransformationConfigs.Transformations.Str = types.StringValue(*resp.Configs.IssueTriggerTransformationConfigs.Transformations.Str)
			} else {
				r.Configs.IssueTriggerTransformationConfigs.Transformations.Str = types.StringNull()
			}
		}
		if resp.Configs.IssueTriggerTransformationConfigs.Transformations.ArrayOfstr != nil {
			r.Configs.IssueTriggerTransformationConfigs.Transformations.ArrayOfstr = nil
			for _, v := range resp.Configs.IssueTriggerTransformationConfigs.Transformations.ArrayOfstr {
				r.Configs.IssueTriggerTransformationConfigs.Transformations.ArrayOfstr = append(r.Configs.IssueTriggerTransformationConfigs.Transformations.ArrayOfstr, types.StringValue(v))
			}
		}
	}
	if resp.Configs.IssueTriggerBackpressureConfigs != nil {
		r.Configs.IssueTriggerBackpressureConfigs = &IssueTriggerBackpressureConfigs{}
		r.Configs.IssueTriggerBackpressureConfigs.Delay = types.Int64Value(resp.Configs.IssueTriggerBackpressureConfigs.Delay)
		if resp.Configs.IssueTriggerBackpressureConfigs.Destinations.Str != nil {
			if resp.Configs.IssueTriggerBackpressureConfigs.Destinations.Str != nil {
				r.Configs.IssueTriggerBackpressureConfigs.Destinations.Str = types.StringValue(*resp.Configs.IssueTriggerBackpressureConfigs.Destinations.Str)
			} else {
				r.Configs.IssueTriggerBackpressureConfigs.Destinations.Str = types.StringNull()
			}
		}
		if resp.Configs.IssueTriggerBackpressureConfigs.Destinations.ArrayOfstr != nil {
			r.Configs.IssueTriggerBackpressureConfigs.Destinations.ArrayOfstr = nil
			for _, v := range resp.Configs.IssueTriggerBackpressureConfigs.Destinations.ArrayOfstr {
				r.Configs.IssueTriggerBackpressureConfigs.Destinations.ArrayOfstr = append(r.Configs.IssueTriggerBackpressureConfigs.Destinations.ArrayOfstr, types.StringValue(v))
			}
		}
	}
	r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339))
	if resp.DeletedAt != nil {
		r.DeletedAt = types.StringValue(resp.DeletedAt.Format(time.RFC3339))
	} else {
		r.DeletedAt = types.StringNull()
	}
	if resp.DisabledAt != nil {
		r.DisabledAt = types.StringValue(resp.DisabledAt.Format(time.RFC3339))
	} else {
		r.DisabledAt = types.StringNull()
	}
	r.ID = types.StringValue(resp.ID)
	if resp.Name != nil {
		r.Name = types.StringValue(*resp.Name)
	} else {
		r.Name = types.StringNull()
	}
	if resp.TeamID != nil {
		r.TeamID = types.StringValue(*resp.TeamID)
	} else {
		r.TeamID = types.StringNull()
	}
	r.Type = types.StringValue(string(resp.Type))
	r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339))
}
