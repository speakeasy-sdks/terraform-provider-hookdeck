// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"hashicups/internal/sdk"
	"hashicups/internal/sdk/pkg/models/operations"
	"hashicups/internal/sdk/pkg/models/shared"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"hashicups/internal/validators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &IssueTriggerResource{}
var _ resource.ResourceWithImportState = &IssueTriggerResource{}

func NewIssueTriggerResource() resource.Resource {
	return &IssueTriggerResource{}
}

// IssueTriggerResource defines the resource implementation.
type IssueTriggerResource struct {
	client *sdk.SDK
}

// IssueTriggerResourceModel describes the resource data model.
type IssueTriggerResourceModel struct {
	ChannelName types.String                    `tfsdk:"channel_name"`
	Channels    *IssueTriggerChannels           `tfsdk:"channels"`
	Configs     IssueTriggerReference           `tfsdk:"configs"`
	CreatedAt   types.String                    `tfsdk:"created_at"`
	DeletedAt   types.String                    `tfsdk:"deleted_at"`
	DisabledAt  types.String                    `tfsdk:"disabled_at"`
	Email       *IssueTriggerEmailChannel       `tfsdk:"email"`
	ID          types.String                    `tfsdk:"id"`
	Name        types.String                    `tfsdk:"name"`
	Opsgenie    *IssueTriggerIntegrationChannel `tfsdk:"opsgenie"`
	TeamID      types.String                    `tfsdk:"team_id"`
	Type        types.String                    `tfsdk:"type"`
	UpdatedAt   types.String                    `tfsdk:"updated_at"`
}

func (r *IssueTriggerResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_issue_trigger"
}

func (r *IssueTriggerResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "IssueTrigger Resource",

		Attributes: map[string]schema.Attribute{
			"channel_name": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Required:    true,
				Description: `Channel name`,
			},
			"channels": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"email": schema.SingleNestedAttribute{
						Computed:    true,
						Attributes:  map[string]schema.Attribute{},
						Description: `Email channel for an issue trigger`,
					},
					"opsgenie": schema.SingleNestedAttribute{
						Computed:    true,
						Attributes:  map[string]schema.Attribute{},
						Description: `Integration channel for an issue trigger`,
					},
					"slack": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"channel_name": schema.StringAttribute{
								Computed:    true,
								Description: `Channel name`,
							},
						},
						Description: `Slack channel for an issue trigger`,
					},
				},
				Description: `Notification channels object for the specific channel type`,
			},
			"configs": schema.SingleNestedAttribute{
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
				Required: true,
				Attributes: map[string]schema.Attribute{
					"issue_trigger_backpressure_configs": schema.SingleNestedAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplace(),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"delay": schema.Int64Attribute{
								PlanModifiers: []planmodifier.Int64{
									int64planmodifier.RequiresReplace(),
								},
								Required:    true,
								Description: `The minimum delay (backpressure) to open the issue for min of 1 minute (60000) and max of 1 day (86400000)`,
							},
							"destinations": schema.SingleNestedAttribute{
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplace(),
								},
								Required: true,
								Attributes: map[string]schema.Attribute{
									"str": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplace(),
										},
										Optional: true,
									},
									"array_ofstr": schema.ListAttribute{
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplace(),
										},
										Optional:    true,
										ElementType: types.StringType,
									},
								},
								Validators: []validator.Object{
									validators.ExactlyOneChild(),
								},
								Description: `A pattern to match on the destination name or array of destination IDs. Use ` + "`" + `*` + "`" + ` as wildcard.`,
							},
						},
						Description: `Configurations for a 'Backpressure' issue trigger`,
					},
					"issue_trigger_delivery_configs": schema.SingleNestedAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplace(),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"connections": schema.SingleNestedAttribute{
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplace(),
								},
								Required: true,
								Attributes: map[string]schema.Attribute{
									"str": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplace(),
										},
										Optional: true,
									},
									"array_ofstr": schema.ListAttribute{
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplace(),
										},
										Optional:    true,
										ElementType: types.StringType,
									},
								},
								Validators: []validator.Object{
									validators.ExactlyOneChild(),
								},
								Description: `A pattern to match on the connection name or array of connection IDs. Use ` + "`" + `*` + "`" + ` as wildcard.`,
							},
							"strategy": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Required: true,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"first_attempt",
										"final_attempt",
									),
								},
								MarkdownDescription: `must be one of [first_attempt, final_attempt]` + "\n" +
									`The strategy uses to open the issue`,
							},
						},
						Description: `Configurations for a 'delivery' issue trigger`,
					},
					"issue_trigger_transformation_configs": schema.SingleNestedAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplace(),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"log_level": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Required: true,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"debug",
										"info",
										"warn",
										"error",
										"fatal",
									),
								},
								MarkdownDescription: `must be one of [debug, info, warn, error, fatal]` + "\n" +
									`The minimum log level to open the issue on`,
							},
							"transformations": schema.SingleNestedAttribute{
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplace(),
								},
								Required: true,
								Attributes: map[string]schema.Attribute{
									"str": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplace(),
										},
										Optional: true,
									},
									"array_ofstr": schema.ListAttribute{
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplace(),
										},
										Optional:    true,
										ElementType: types.StringType,
									},
								},
								Validators: []validator.Object{
									validators.ExactlyOneChild(),
								},
								Description: `A pattern to match on the transformation name or array of transformation IDs. Use ` + "`" + `*` + "`" + ` as wildcard.`,
							},
						},
						Description: `Configurations for a 'Transformation' issue trigger`,
					},
				},
				Validators: []validator.Object{
					validators.ExactlyOneChild(),
				},
				Description: `Configuration object for the specific issue type selected`,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
				Description: `ISO timestamp for when the issue trigger was created`,
			},
			"deleted_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
				Description: `ISO timestamp for when the issue trigger was deleted`,
			},
			"disabled_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
				Description: `ISO timestamp for when the issue trigger was disabled`,
			},
			"email": schema.SingleNestedAttribute{
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
				Optional:    true,
				Attributes:  map[string]schema.Attribute{},
				Description: `Email channel for an issue trigger`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `ID of the issue trigger`,
			},
			"name": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional:    true,
				Description: `Optional unique name to use as reference when using the API`,
			},
			"opsgenie": schema.SingleNestedAttribute{
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
				Optional:    true,
				Attributes:  map[string]schema.Attribute{},
				Description: `Integration channel for an issue trigger`,
			},
			"team_id": schema.StringAttribute{
				Computed:    true,
				Description: `ID of the workspace`,
			},
			"type": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Required: true,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"delivery",
						"transformation",
						"backpressure",
					),
				},
				MarkdownDescription: `must be one of [delivery, transformation, backpressure]` + "\n" +
					`Issue type`,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
				Description: `ISO timestamp for when the issue trigger was last updated`,
			},
		},
	}
}

func (r *IssueTriggerResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *IssueTriggerResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *IssueTriggerResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var email *shared.IssueTriggerEmailChannel
	if data != nil {
		email = &shared.IssueTriggerEmailChannel{}
	}
	var opsgenie *shared.IssueTriggerIntegrationChannel
	if data != nil {
		opsgenie = &shared.IssueTriggerIntegrationChannel{}
	}
	var slack *shared.IssueTriggerSlackChannel
	if data != nil {
		channelName := data.ChannelName.ValueString()
		slack = &shared.IssueTriggerSlackChannel{
			ChannelName: channelName,
		}
	}
	channels := shared.IssueTriggerChannels{
		Email:    email,
		Opsgenie: opsgenie,
		Slack:    slack,
	}
	var configs *operations.CreateIssueTriggerRequestBodyConfigs
	var issueTriggerDeliveryConfigs *shared.IssueTriggerDeliveryConfigs
	if data.Configs != nil {
		var connections shared.IssueTriggerDeliveryConfigsConnections
		if data.Configs.IssueTriggerBackpressureConfigs != nil {
		}
		strategy := shared.IssueTriggerStrategy(data.Configs.IssueTriggerBackpressureConfigs.ValueString())
		issueTriggerDeliveryConfigs = &shared.IssueTriggerDeliveryConfigs{
			Connections: connections,
			Strategy:    strategy,
		}
	}
	if issueTriggerDeliveryConfigs != nil {
		configs = &operations.CreateIssueTriggerRequestBodyConfigs{
			IssueTriggerDeliveryConfigs: issueTriggerDeliveryConfigs,
		}
	}
	var issueTriggerTransformationConfigs *shared.IssueTriggerTransformationConfigs
	if data.Configs != nil {
		logLevel := shared.TransformationExecutionLogLevel(data.Configs.IssueTriggerDeliveryConfigs.ValueString())
		var transformations shared.IssueTriggerTransformationConfigsTransformations
		if data.Configs.IssueTriggerDeliveryConfigs != nil {
		}
		issueTriggerTransformationConfigs = &shared.IssueTriggerTransformationConfigs{
			LogLevel:        logLevel,
			Transformations: transformations,
		}
	}
	if issueTriggerTransformationConfigs != nil {
		configs = &operations.CreateIssueTriggerRequestBodyConfigs{
			IssueTriggerTransformationConfigs: issueTriggerTransformationConfigs,
		}
	}
	var issueTriggerBackpressureConfigs *shared.IssueTriggerBackpressureConfigs
	if data.Configs != nil {
		delay := data.Configs.IssueTriggerTransformationConfigs.ValueInt64()
		var destinations shared.IssueTriggerBackpressureConfigsDestinations
		if data.Configs.IssueTriggerTransformationConfigs != nil {
		}
		issueTriggerBackpressureConfigs = &shared.IssueTriggerBackpressureConfigs{
			Delay:        delay,
			Destinations: destinations,
		}
	}
	if issueTriggerBackpressureConfigs != nil {
		configs = &operations.CreateIssueTriggerRequestBodyConfigs{
			IssueTriggerBackpressureConfigs: issueTriggerBackpressureConfigs,
		}
	}
	name := new(string)
	if !data.Name.IsUnknown() && !data.Name.IsNull() {
		*name = data.Name.ValueString()
	} else {
		name = nil
	}
	type1 := shared.IssueType(data.Type.ValueString())
	request := operations.CreateIssueTriggerRequestBody{
		Channels: channels,
		Configs:  configs,
		Name:     name,
		Type:     type1,
	}
	res, err := r.client.IssueTrigger.CreateIssueTrigger(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.IssueTrigger == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromCreateResponse(res.IssueTrigger)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *IssueTriggerResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *IssueTriggerResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	id := data.ID.ValueString()
	request := operations.GetIssueTriggerRequest{
		ID: id,
	}
	res, err := r.client.IssueTrigger.GetIssueTrigger(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.IssueTrigger == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromGetResponse(res.IssueTrigger)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *IssueTriggerResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *IssueTriggerResourceModel
	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; all attributes marked as RequiresReplace

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *IssueTriggerResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *IssueTriggerResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	id := data.ID.ValueString()
	request := operations.DeleteIssueTriggerRequest{
		ID: id,
	}
	res, err := r.client.IssueTrigger.DeleteIssueTrigger(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *IssueTriggerResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)
}
