// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"hashicups/internal/sdk"
	"hashicups/internal/sdk/pkg/models/operations"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"hashicups/internal/validators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &DestinationDataSource{}
var _ datasource.DataSourceWithConfigure = &DestinationDataSource{}

func NewDestinationDataSource() datasource.DataSource {
	return &DestinationDataSource{}
}

// DestinationDataSource is the data source implementation.
type DestinationDataSource struct {
	client *sdk.SDK
}

// DestinationDataSourceModel describes the data model.
type DestinationDataSourceModel struct {
	ArchivedAt             types.String                 `tfsdk:"archived_at"`
	AuthMethod             *DestinationAuthMethodConfig `tfsdk:"auth_method"`
	CliPath                types.String                 `tfsdk:"cli_path"`
	CreatedAt              types.String                 `tfsdk:"created_at"`
	HTTPMethod             types.String                 `tfsdk:"http_method"`
	ID                     types.String                 `tfsdk:"id"`
	Name                   types.String                 `tfsdk:"name"`
	PathForwardingDisabled types.Bool                   `tfsdk:"path_forwarding_disabled"`
	RateLimit              types.Int64                  `tfsdk:"rate_limit"`
	RateLimitPeriod        types.String                 `tfsdk:"rate_limit_period"`
	TeamID                 types.String                 `tfsdk:"team_id"`
	UpdatedAt              types.String                 `tfsdk:"updated_at"`
	URL                    types.String                 `tfsdk:"url"`
}

// Metadata returns the data source type name.
func (r *DestinationDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_destination"
}

// Schema defines the schema for the data source.
func (r *DestinationDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Destination DataSource",

		Attributes: map[string]schema.Attribute{
			"archived_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
				Description: `Date the destination was archived`,
			},
			"auth_method": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"hookdeck_signature": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"config": schema.SingleNestedAttribute{
								Computed:    true,
								Attributes:  map[string]schema.Attribute{},
								Description: `Empty config for the destination's auth method`,
							},
							"type": schema.StringAttribute{
								Computed: true,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"HOOKDECK_SIGNATURE",
									),
								},
								MarkdownDescription: `must be one of ["HOOKDECK_SIGNATURE"]` + "\n" +
									`Type of auth method`,
							},
						},
						Description: `Hookdeck Signature`,
					},
					"basic_auth": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"config": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"password": schema.StringAttribute{
										Computed:    true,
										Description: `Password for basic auth`,
									},
									"username": schema.StringAttribute{
										Computed:    true,
										Description: `Username for basic auth`,
									},
								},
								Description: `Basic auth config for the destination's auth method`,
							},
							"type": schema.StringAttribute{
								Computed: true,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"BASIC_AUTH",
									),
								},
								MarkdownDescription: `must be one of ["BASIC_AUTH"]` + "\n" +
									`Type of auth method`,
							},
						},
						Description: `Basic Auth`,
					},
					"api_key": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"config": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"api_key": schema.StringAttribute{
										Computed:    true,
										Description: `API key for the API key auth`,
									},
									"key": schema.StringAttribute{
										Computed:    true,
										Description: `Key for the API key auth`,
									},
									"to": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"header",
												"query",
											),
										},
										MarkdownDescription: `must be one of ["header", "query"]` + "\n" +
											`Whether the API key should be sent as a header or a query parameter`,
									},
								},
								Description: `API key config for the destination's auth method`,
							},
							"type": schema.StringAttribute{
								Computed: true,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"API_KEY",
									),
								},
								MarkdownDescription: `must be one of ["API_KEY"]` + "\n" +
									`Type of auth method`,
							},
						},
						Description: `API Key`,
					},
					"bearer_token": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"config": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"token": schema.StringAttribute{
										Computed:    true,
										Description: `Token for the bearer token auth`,
									},
								},
								Description: `Bearer token config for the destination's auth method`,
							},
							"type": schema.StringAttribute{
								Computed: true,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"BEARER_TOKEN",
									),
								},
								MarkdownDescription: `must be one of ["BEARER_TOKEN"]` + "\n" +
									`Type of auth method`,
							},
						},
						Description: `Bearer Token`,
					},
					"custom_signature": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"config": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"key": schema.StringAttribute{
										Computed:    true,
										Description: `Key for the custom signature auth`,
									},
									"signing_secret": schema.StringAttribute{
										Computed:    true,
										Description: `Signing secret for the custom signature auth. If left empty a secret will be generated for you.`,
									},
								},
								Description: `Custom signature config for the destination's auth method`,
							},
							"type": schema.StringAttribute{
								Computed: true,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"CUSTOM_SIGNATURE",
									),
								},
								MarkdownDescription: `must be one of ["CUSTOM_SIGNATURE"]` + "\n" +
									`Type of auth method`,
							},
						},
						Description: `Custom Signature`,
					},
				},
				Validators: []validator.Object{
					validators.ExactlyOneChild(),
				},
				Description: `Config for the destination's auth method`,
			},
			"cli_path": schema.StringAttribute{
				Computed:    true,
				Description: `Path for the CLI destination`,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
				Description: `Date the destination was created`,
			},
			"http_method": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"<nil>",
						"GET",
						"POST",
						"PUT",
						"PATCH",
						"DELETE",
					),
				},
				MarkdownDescription: `must be one of ["<nil>", "GET", "POST", "PUT", "PATCH", "DELETE"]` + "\n" +
					`HTTP method used on requests sent to the destination, overrides the method used on requests sent to the source.`,
			},
			"id": schema.StringAttribute{
				Required:    true,
				Description: `ID of the destination`,
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Description: `A unique, human-friendly name for the destination`,
			},
			"path_forwarding_disabled": schema.BoolAttribute{
				Computed: true,
			},
			"rate_limit": schema.Int64Attribute{
				Computed:    true,
				Description: `Limit event attempts to receive per period. Max value is workspace plan's max attempts thoughput.`,
			},
			"rate_limit_period": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"<nil>",
						"second",
						"minute",
						"hour",
					),
				},
				MarkdownDescription: `must be one of ["<nil>", "second", "minute", "hour"]` + "\n" +
					`Period to rate limit attempts`,
			},
			"team_id": schema.StringAttribute{
				Computed:    true,
				Description: `ID of the workspace`,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
				Description: `Date the destination was last updated`,
			},
			"url": schema.StringAttribute{
				Computed:    true,
				Description: `HTTP endpoint of the destination`,
			},
		},
	}
}

func (r *DestinationDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *DestinationDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *DestinationDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	id := data.ID.ValueString()
	request := operations.GetDestinationRequest{
		ID: id,
	}
	res, err := r.client.Destination.GetDestination(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.Destination == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromGetResponse(res.Destination)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
