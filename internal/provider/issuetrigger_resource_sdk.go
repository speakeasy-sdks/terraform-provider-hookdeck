// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"hashicups/internal/sdk/pkg/models/operations"
	"hashicups/internal/sdk/pkg/models/shared"
	"time"
)

func (r *IssueTriggerResourceModel) ToCreateSDKType() *operations.CreateIssueTriggerRequestBody {
	var channels *shared.IssueTriggerChannels
	if r.Channels != nil {
		var email *shared.IssueTriggerEmailChannel
		if r.Channels.Email != nil {
			email = &shared.IssueTriggerEmailChannel{}
		}
		var opsgenie *shared.IssueTriggerIntegrationChannel
		if r.Channels.Opsgenie != nil {
			opsgenie = &shared.IssueTriggerIntegrationChannel{}
		}
		var slack *shared.IssueTriggerSlackChannel
		if r.Channels.Slack != nil {
			channelName := r.Channels.Slack.ChannelName.ValueString()
			slack = &shared.IssueTriggerSlackChannel{
				ChannelName: channelName,
			}
		}
		channels = &shared.IssueTriggerChannels{
			Email:    email,
			Opsgenie: opsgenie,
			Slack:    slack,
		}
	}
	var configs *operations.CreateIssueTriggerRequestBodyConfigs
	var issueTriggerDeliveryConfigs *shared.IssueTriggerDeliveryConfigs
	if r.Configs.IssueTriggerDeliveryConfigs != nil {
		var connections shared.IssueTriggerDeliveryConfigsConnections
		str := new(string)
		if !r.Configs.IssueTriggerDeliveryConfigs.Connections.Str.IsUnknown() && !r.Configs.IssueTriggerDeliveryConfigs.Connections.Str.IsNull() {
			*str = r.Configs.IssueTriggerDeliveryConfigs.Connections.Str.ValueString()
		} else {
			str = nil
		}
		if str != nil {
			connections = shared.IssueTriggerDeliveryConfigsConnections{
				Str: str,
			}
		}
		var arrayOfstr []string = nil
		for _, arrayOfstrItem := range r.Configs.IssueTriggerDeliveryConfigs.Connections.ArrayOfstr {
			arrayOfstr = append(arrayOfstr, arrayOfstrItem.ValueString())
		}
		if arrayOfstr != nil {
			connections = shared.IssueTriggerDeliveryConfigsConnections{
				ArrayOfstr: arrayOfstr,
			}
		}
		strategy := shared.IssueTriggerStrategy(r.Configs.IssueTriggerDeliveryConfigs.Strategy.ValueString())
		issueTriggerDeliveryConfigs = &shared.IssueTriggerDeliveryConfigs{
			Connections: connections,
			Strategy:    strategy,
		}
	}
	if issueTriggerDeliveryConfigs != nil {
		configs = &operations.CreateIssueTriggerRequestBodyConfigs{
			IssueTriggerDeliveryConfigs: issueTriggerDeliveryConfigs,
		}
	}
	var issueTriggerTransformationConfigs *shared.IssueTriggerTransformationConfigs
	if r.Configs.IssueTriggerTransformationConfigs != nil {
		logLevel := shared.TransformationExecutionLogLevel(r.Configs.IssueTriggerTransformationConfigs.LogLevel.ValueString())
		var transformations shared.IssueTriggerTransformationConfigsTransformations
		str1 := new(string)
		if !r.Configs.IssueTriggerTransformationConfigs.Transformations.Str.IsUnknown() && !r.Configs.IssueTriggerTransformationConfigs.Transformations.Str.IsNull() {
			*str1 = r.Configs.IssueTriggerTransformationConfigs.Transformations.Str.ValueString()
		} else {
			str1 = nil
		}
		if str1 != nil {
			transformations = shared.IssueTriggerTransformationConfigsTransformations{
				Str: str1,
			}
		}
		var arrayOfstr1 []string = nil
		for _, arrayOfstrItem1 := range r.Configs.IssueTriggerTransformationConfigs.Transformations.ArrayOfstr {
			arrayOfstr1 = append(arrayOfstr1, arrayOfstrItem1.ValueString())
		}
		if arrayOfstr1 != nil {
			transformations = shared.IssueTriggerTransformationConfigsTransformations{
				ArrayOfstr: arrayOfstr1,
			}
		}
		issueTriggerTransformationConfigs = &shared.IssueTriggerTransformationConfigs{
			LogLevel:        logLevel,
			Transformations: transformations,
		}
	}
	if issueTriggerTransformationConfigs != nil {
		configs = &operations.CreateIssueTriggerRequestBodyConfigs{
			IssueTriggerTransformationConfigs: issueTriggerTransformationConfigs,
		}
	}
	var issueTriggerBackpressureConfigs *shared.IssueTriggerBackpressureConfigs
	if r.Configs.IssueTriggerBackpressureConfigs != nil {
		delay := r.Configs.IssueTriggerBackpressureConfigs.Delay.ValueInt64()
		var destinations shared.IssueTriggerBackpressureConfigsDestinations
		str2 := new(string)
		if !r.Configs.IssueTriggerBackpressureConfigs.Destinations.Str.IsUnknown() && !r.Configs.IssueTriggerBackpressureConfigs.Destinations.Str.IsNull() {
			*str2 = r.Configs.IssueTriggerBackpressureConfigs.Destinations.Str.ValueString()
		} else {
			str2 = nil
		}
		if str2 != nil {
			destinations = shared.IssueTriggerBackpressureConfigsDestinations{
				Str: str2,
			}
		}
		var arrayOfstr2 []string = nil
		for _, arrayOfstrItem2 := range r.Configs.IssueTriggerBackpressureConfigs.Destinations.ArrayOfstr {
			arrayOfstr2 = append(arrayOfstr2, arrayOfstrItem2.ValueString())
		}
		if arrayOfstr2 != nil {
			destinations = shared.IssueTriggerBackpressureConfigsDestinations{
				ArrayOfstr: arrayOfstr2,
			}
		}
		issueTriggerBackpressureConfigs = &shared.IssueTriggerBackpressureConfigs{
			Delay:        delay,
			Destinations: destinations,
		}
	}
	if issueTriggerBackpressureConfigs != nil {
		configs = &operations.CreateIssueTriggerRequestBodyConfigs{
			IssueTriggerBackpressureConfigs: issueTriggerBackpressureConfigs,
		}
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	typeVar := shared.IssueType(r.Type.ValueString())
	out := operations.CreateIssueTriggerRequestBody{
		Channels: channels,
		Configs:  configs,
		Name:     name,
		Type:     typeVar,
	}
	return &out
}

func (r *IssueTriggerResourceModel) ToGetSDKType() *operations.CreateIssueTriggerRequestBody {
	out := r.ToCreateSDKType()
	return out
}

func (r *IssueTriggerResourceModel) ToDeleteSDKType() *operations.CreateIssueTriggerRequestBody {
	out := r.ToCreateSDKType()
	return out
}

func (r *IssueTriggerResourceModel) RefreshFromGetResponse(resp *shared.IssueTrigger) {
	if resp.Channels == nil {
		r.Channels = nil
	} else {
		r.Channels = &IssueTriggerChannels{}
		if resp.Channels.Email == nil {
			r.Channels.Email = nil
		} else {
			r.Channels.Email = &DestinationAuthMethodSignatureConfig{}
		}
		if resp.Channels.Opsgenie == nil {
			r.Channels.Opsgenie = nil
		} else {
			r.Channels.Opsgenie = &DestinationAuthMethodSignatureConfig{}
		}
		if resp.Channels.Slack == nil {
			r.Channels.Slack = nil
		} else {
			r.Channels.Slack = &IssueTriggerSlackChannel{}
			r.Channels.Slack.ChannelName = types.StringValue(resp.Channels.Slack.ChannelName)
		}
	}
	if resp.Configs.IssueTriggerBackpressureConfigs != nil {
		r.Configs.IssueTriggerBackpressureConfigs = &IssueTriggerBackpressureConfigs{}
		r.Configs.IssueTriggerBackpressureConfigs.Delay = types.Int64Value(resp.Configs.IssueTriggerBackpressureConfigs.Delay)
		if resp.Configs.IssueTriggerBackpressureConfigs.Destinations.Str != nil {
			if resp.Configs.IssueTriggerBackpressureConfigs.Destinations.Str != nil {
				r.Configs.IssueTriggerBackpressureConfigs.Destinations.Str = types.StringValue(*resp.Configs.IssueTriggerBackpressureConfigs.Destinations.Str)
			} else {
				r.Configs.IssueTriggerBackpressureConfigs.Destinations.Str = types.StringNull()
			}
		}
		if resp.Configs.IssueTriggerBackpressureConfigs.Destinations.ArrayOfstr != nil {
			r.Configs.IssueTriggerBackpressureConfigs.Destinations.ArrayOfstr = nil
			for _, v := range resp.Configs.IssueTriggerBackpressureConfigs.Destinations.ArrayOfstr {
				r.Configs.IssueTriggerBackpressureConfigs.Destinations.ArrayOfstr = append(r.Configs.IssueTriggerBackpressureConfigs.Destinations.ArrayOfstr, types.StringValue(v))
			}
		}
	}
	if resp.Configs.IssueTriggerDeliveryConfigs != nil {
		r.Configs.IssueTriggerDeliveryConfigs = &IssueTriggerDeliveryConfigs{}
		if resp.Configs.IssueTriggerDeliveryConfigs.Connections.Str != nil {
			if resp.Configs.IssueTriggerDeliveryConfigs.Connections.Str != nil {
				r.Configs.IssueTriggerDeliveryConfigs.Connections.Str = types.StringValue(*resp.Configs.IssueTriggerDeliveryConfigs.Connections.Str)
			} else {
				r.Configs.IssueTriggerDeliveryConfigs.Connections.Str = types.StringNull()
			}
		}
		if resp.Configs.IssueTriggerDeliveryConfigs.Connections.ArrayOfstr != nil {
			r.Configs.IssueTriggerDeliveryConfigs.Connections.ArrayOfstr = nil
			for _, v := range resp.Configs.IssueTriggerDeliveryConfigs.Connections.ArrayOfstr {
				r.Configs.IssueTriggerDeliveryConfigs.Connections.ArrayOfstr = append(r.Configs.IssueTriggerDeliveryConfigs.Connections.ArrayOfstr, types.StringValue(v))
			}
		}
		r.Configs.IssueTriggerDeliveryConfigs.Strategy = types.StringValue(string(resp.Configs.IssueTriggerDeliveryConfigs.Strategy))
	}
	if resp.Configs.IssueTriggerTransformationConfigs != nil {
		r.Configs.IssueTriggerTransformationConfigs = &IssueTriggerTransformationConfigs{}
		r.Configs.IssueTriggerTransformationConfigs.LogLevel = types.StringValue(string(resp.Configs.IssueTriggerTransformationConfigs.LogLevel))
		if resp.Configs.IssueTriggerTransformationConfigs.Transformations.Str != nil {
			if resp.Configs.IssueTriggerTransformationConfigs.Transformations.Str != nil {
				r.Configs.IssueTriggerTransformationConfigs.Transformations.Str = types.StringValue(*resp.Configs.IssueTriggerTransformationConfigs.Transformations.Str)
			} else {
				r.Configs.IssueTriggerTransformationConfigs.Transformations.Str = types.StringNull()
			}
		}
		if resp.Configs.IssueTriggerTransformationConfigs.Transformations.ArrayOfstr != nil {
			r.Configs.IssueTriggerTransformationConfigs.Transformations.ArrayOfstr = nil
			for _, v := range resp.Configs.IssueTriggerTransformationConfigs.Transformations.ArrayOfstr {
				r.Configs.IssueTriggerTransformationConfigs.Transformations.ArrayOfstr = append(r.Configs.IssueTriggerTransformationConfigs.Transformations.ArrayOfstr, types.StringValue(v))
			}
		}
	}
	r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339Nano))
	if resp.DeletedAt != nil {
		r.DeletedAt = types.StringValue(resp.DeletedAt.Format(time.RFC3339Nano))
	} else {
		r.DeletedAt = types.StringNull()
	}
	if resp.DisabledAt != nil {
		r.DisabledAt = types.StringValue(resp.DisabledAt.Format(time.RFC3339Nano))
	} else {
		r.DisabledAt = types.StringNull()
	}
	r.ID = types.StringValue(resp.ID)
	if resp.Name != nil {
		r.Name = types.StringValue(*resp.Name)
	} else {
		r.Name = types.StringNull()
	}
	if resp.TeamID != nil {
		r.TeamID = types.StringValue(*resp.TeamID)
	} else {
		r.TeamID = types.StringNull()
	}
	r.Type = types.StringValue(string(resp.Type))
	r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
}

func (r *IssueTriggerResourceModel) RefreshFromCreateResponse(resp *shared.IssueTrigger) {
	r.RefreshFromGetResponse(resp)
}
