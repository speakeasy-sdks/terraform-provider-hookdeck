// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"hashicups/internal/sdk"
	"hashicups/internal/sdk/pkg/models/operations"
	"hashicups/internal/sdk/pkg/models/shared"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/mapplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/numberplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"hashicups/internal/validators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &ConnectionResource{}
var _ resource.ResourceWithImportState = &ConnectionResource{}

func NewConnectionResource() resource.Resource {
	return &ConnectionResource{}
}

// ConnectionResource defines the resource implementation.
type ConnectionResource struct {
	client *sdk.SDK
}

// ConnectionResourceModel describes the resource data model.
type ConnectionResourceModel struct {
	AllowedHTTPMethods     []types.String               `tfsdk:"allowed_http_methods"`
	ArchivedAt             types.String                 `tfsdk:"archived_at"`
	AuthMethod             *DestinationAuthMethodConfig `tfsdk:"auth_method"`
	Body                   types.String                 `tfsdk:"body"`
	CliPath                types.String                 `tfsdk:"cli_path"`
	ContentType            types.String                 `tfsdk:"content_type"`
	CreatedAt              types.String                 `tfsdk:"created_at"`
	Destination            Destination                  `tfsdk:"destination"`
	DestinationID          types.String                 `tfsdk:"destination_id"`
	HTTPMethod             types.String                 `tfsdk:"http_method"`
	ID                     types.String                 `tfsdk:"id"`
	IsTeamDefault          types.Bool                   `tfsdk:"is_team_default"`
	Name                   types.String                 `tfsdk:"name"`
	PathForwardingDisabled types.Bool                   `tfsdk:"path_forwarding_disabled"`
	PausedAt               types.String                 `tfsdk:"paused_at"`
	RateLimit              *RateLimit                   `tfsdk:"rate_limit"`
	RateLimitPeriod        types.String                 `tfsdk:"rate_limit_period"`
	ResolvedRules          []Rule                       `tfsdk:"resolved_rules"`
	Rules                  []Rule                       `tfsdk:"rules"`
	Ruleset                *Ruleset                     `tfsdk:"ruleset"`
	RulesetID              types.String                 `tfsdk:"ruleset_id"`
	Source                 Source                       `tfsdk:"source"`
	SourceID               types.String                 `tfsdk:"source_id"`
	TeamID                 types.String                 `tfsdk:"team_id"`
	UpdatedAt              types.String                 `tfsdk:"updated_at"`
	URL                    types.String                 `tfsdk:"url"`
}

func (r *ConnectionResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_connection"
}

func (r *ConnectionResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Connection Resource",

		Attributes: map[string]schema.Attribute{
			"allowed_http_methods": schema.ListAttribute{
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplace(),
				},
				Optional:    true,
				ElementType: types.StringType,
				Description: `List of allowed HTTP methods. Defaults to PUT, POST, PATCH, DELETE.`,
			},
			"archived_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
				Description: `Date the connection was archived`,
			},
			"auth_method": schema.SingleNestedAttribute{
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"hookdeck_signature": schema.SingleNestedAttribute{
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplace(),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"config": schema.SingleNestedAttribute{
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplace(),
								},
								Optional:    true,
								Attributes:  map[string]schema.Attribute{},
								Description: `Empty config for the destination's auth method`,
							},
							"type": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Required: true,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"HOOKDECK_SIGNATURE",
									),
								},
								MarkdownDescription: `must be one of ["HOOKDECK_SIGNATURE"]` + "\n" +
									`Type of auth method`,
							},
						},
						Description: `Hookdeck Signature`,
					},
					"basic_auth": schema.SingleNestedAttribute{
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplace(),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"config": schema.SingleNestedAttribute{
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplace(),
								},
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"password": schema.StringAttribute{
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplace(),
										},
										Required:    true,
										Description: `Password for basic auth`,
									},
									"username": schema.StringAttribute{
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplace(),
										},
										Required:    true,
										Description: `Username for basic auth`,
									},
								},
								Description: `Basic auth config for the destination's auth method`,
							},
							"type": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Required: true,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"BASIC_AUTH",
									),
								},
								MarkdownDescription: `must be one of ["BASIC_AUTH"]` + "\n" +
									`Type of auth method`,
							},
						},
						Description: `Basic Auth`,
					},
					"api_key": schema.SingleNestedAttribute{
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplace(),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"config": schema.SingleNestedAttribute{
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplace(),
								},
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"api_key": schema.StringAttribute{
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplace(),
										},
										Required:    true,
										Description: `API key for the API key auth`,
									},
									"key": schema.StringAttribute{
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplace(),
										},
										Required:    true,
										Description: `Key for the API key auth`,
									},
									"to": schema.StringAttribute{
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplace(),
										},
										Optional: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"header",
												"query",
											),
										},
										MarkdownDescription: `must be one of ["header", "query"]` + "\n" +
											`Whether the API key should be sent as a header or a query parameter`,
									},
								},
								Description: `API key config for the destination's auth method`,
							},
							"type": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Required: true,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"API_KEY",
									),
								},
								MarkdownDescription: `must be one of ["API_KEY"]` + "\n" +
									`Type of auth method`,
							},
						},
						Description: `API Key`,
					},
					"bearer_token": schema.SingleNestedAttribute{
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplace(),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"config": schema.SingleNestedAttribute{
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplace(),
								},
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"token": schema.StringAttribute{
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplace(),
										},
										Required:    true,
										Description: `Token for the bearer token auth`,
									},
								},
								Description: `Bearer token config for the destination's auth method`,
							},
							"type": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Required: true,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"BEARER_TOKEN",
									),
								},
								MarkdownDescription: `must be one of ["BEARER_TOKEN"]` + "\n" +
									`Type of auth method`,
							},
						},
						Description: `Bearer Token`,
					},
					"custom_signature": schema.SingleNestedAttribute{
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplace(),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"config": schema.SingleNestedAttribute{
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplace(),
								},
								Required: true,
								Attributes: map[string]schema.Attribute{
									"key": schema.StringAttribute{
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplace(),
										},
										Required:    true,
										Description: `Key for the custom signature auth`,
									},
									"signing_secret": schema.StringAttribute{
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplace(),
										},
										Optional:    true,
										Description: `Signing secret for the custom signature auth. If left empty a secret will be generated for you.`,
									},
								},
								Description: `Custom signature config for the destination's auth method`,
							},
							"type": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Required: true,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"CUSTOM_SIGNATURE",
									),
								},
								MarkdownDescription: `must be one of ["CUSTOM_SIGNATURE"]` + "\n" +
									`Type of auth method`,
							},
						},
						Description: `Custom Signature`,
					},
				},
				Validators: []validator.Object{
					validators.ExactlyOneChild(),
				},
				Description: `Config for the destination's auth method`,
			},
			"body": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Required:    true,
				Description: `Body of the custom response`,
			},
			"cli_path": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional:    true,
				Description: `Path for the CLI destination`,
			},
			"content_type": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Required: true,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"json",
						"text",
						"xml",
					),
				},
				MarkdownDescription: `must be one of ["json", "text", "xml"]` + "\n" +
					`Content type of the custom response`,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
				Description: `Date the connection was created`,
			},
			"destination": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"archived_at": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
						Description: `Date the destination was archived`,
					},
					"auth_method": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"api_key": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"config": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"api_key": schema.StringAttribute{
												Computed:    true,
												Description: `API key for the API key auth`,
											},
											"key": schema.StringAttribute{
												Computed:    true,
												Description: `Key for the API key auth`,
											},
											"to": schema.StringAttribute{
												Computed: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"header",
														"query",
													),
												},
												MarkdownDescription: `must be one of ["header", "query"]` + "\n" +
													`Whether the API key should be sent as a header or a query parameter`,
											},
										},
										Description: `API key config for the destination's auth method`,
									},
									"type": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"API_KEY",
											),
										},
										MarkdownDescription: `must be one of ["API_KEY"]` + "\n" +
											`Type of auth method`,
									},
								},
								Description: `API Key`,
							},
							"basic_auth": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"config": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"password": schema.StringAttribute{
												Computed:    true,
												Description: `Password for basic auth`,
											},
											"username": schema.StringAttribute{
												Computed:    true,
												Description: `Username for basic auth`,
											},
										},
										Description: `Basic auth config for the destination's auth method`,
									},
									"type": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"BASIC_AUTH",
											),
										},
										MarkdownDescription: `must be one of ["BASIC_AUTH"]` + "\n" +
											`Type of auth method`,
									},
								},
								Description: `Basic Auth`,
							},
							"bearer_token": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"config": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"token": schema.StringAttribute{
												Computed:    true,
												Description: `Token for the bearer token auth`,
											},
										},
										Description: `Bearer token config for the destination's auth method`,
									},
									"type": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"BEARER_TOKEN",
											),
										},
										MarkdownDescription: `must be one of ["BEARER_TOKEN"]` + "\n" +
											`Type of auth method`,
									},
								},
								Description: `Bearer Token`,
							},
							"custom_signature": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"config": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"key": schema.StringAttribute{
												Computed:    true,
												Description: `Key for the custom signature auth`,
											},
											"signing_secret": schema.StringAttribute{
												Computed:    true,
												Description: `Signing secret for the custom signature auth. If left empty a secret will be generated for you.`,
											},
										},
										Description: `Custom signature config for the destination's auth method`,
									},
									"type": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"CUSTOM_SIGNATURE",
											),
										},
										MarkdownDescription: `must be one of ["CUSTOM_SIGNATURE"]` + "\n" +
											`Type of auth method`,
									},
								},
								Description: `Custom Signature`,
							},
							"hookdeck_signature": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"config": schema.SingleNestedAttribute{
										Computed:    true,
										Attributes:  map[string]schema.Attribute{},
										Description: `Empty config for the destination's auth method`,
									},
									"type": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"HOOKDECK_SIGNATURE",
											),
										},
										MarkdownDescription: `must be one of ["HOOKDECK_SIGNATURE"]` + "\n" +
											`Type of auth method`,
									},
								},
								Description: `Hookdeck Signature`,
							},
						},
						Validators: []validator.Object{
							validators.ExactlyOneChild(),
						},
						Description: `Config for the destination's auth method`,
					},
					"cli_path": schema.StringAttribute{
						Computed:    true,
						Description: `Path for the CLI destination`,
					},
					"created_at": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
						Description: `Date the destination was created`,
					},
					"http_method": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"<nil>",
								"GET",
								"POST",
								"PUT",
								"PATCH",
								"DELETE",
							),
						},
						MarkdownDescription: `must be one of ["<nil>", "GET", "POST", "PUT", "PATCH", "DELETE"]` + "\n" +
							`HTTP method used on requests sent to the destination, overrides the method used on requests sent to the source.`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Description: `ID of the destination`,
					},
					"name": schema.StringAttribute{
						Computed:    true,
						Description: `A unique, human-friendly name for the destination`,
					},
					"path_forwarding_disabled": schema.BoolAttribute{
						Computed: true,
					},
					"rate_limit": schema.Int64Attribute{
						Computed:    true,
						Description: `Limit event attempts to receive per period. Max value is workspace plan's max attempts thoughput.`,
					},
					"rate_limit_period": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"<nil>",
								"second",
								"minute",
								"hour",
							),
						},
						MarkdownDescription: `must be one of ["<nil>", "second", "minute", "hour"]` + "\n" +
							`Period to rate limit attempts`,
					},
					"team_id": schema.StringAttribute{
						Computed:    true,
						Description: `ID of the workspace`,
					},
					"updated_at": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
						Description: `Date the destination was last updated`,
					},
					"url": schema.StringAttribute{
						Computed:    true,
						Description: `HTTP endpoint of the destination`,
					},
				},
				Description: `Associated [Destination](#destination-object) object`,
			},
			"destination_id": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional:    true,
				Description: `ID of a destination to bind to the connection`,
			},
			"http_method": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"<nil>",
						"GET",
						"POST",
						"PUT",
						"PATCH",
						"DELETE",
					),
				},
				MarkdownDescription: `must be one of ["<nil>", "GET", "POST", "PUT", "PATCH", "DELETE"]` + "\n" +
					`HTTP method used on requests sent to the destination, overrides the method used on requests sent to the source.`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `ID of the connection`,
			},
			"is_team_default": schema.BoolAttribute{
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"name": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Required:    true,
				Description: `Unique name of the connection for this source`,
			},
			"path_forwarding_disabled": schema.BoolAttribute{
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"paused_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
				Description: `Date the connection was paused`,
			},
			"rate_limit": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"integer": schema.Int64Attribute{
						PlanModifiers: []planmodifier.Int64{
							int64planmodifier.RequiresReplace(),
						},
						Optional: true,
					},
					"integer": schema.Int64Attribute{
						PlanModifiers: []planmodifier.Int64{
							int64planmodifier.RequiresReplace(),
						},
						Optional: true,
					},
					"integer": schema.Int64Attribute{
						PlanModifiers: []planmodifier.Int64{
							int64planmodifier.RequiresReplace(),
						},
						Optional: true,
					},
				},
				Validators: []validator.Object{
					validators.ExactlyOneChild(),
				},
				Validators: []validator.String{
					validators.IsValidJSON(),
				},
				MarkdownDescription: `Parsed as JSON.` + "\n" +
					`Limit event attempts to receive per period`,
			},
			"rate_limit_period": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"second",
						"minute",
						"hour",
					),
				},
				MarkdownDescription: `must be one of ["second", "minute", "hour"]` + "\n" +
					`Period to rate limit attempts`,
			},
			"resolved_rules": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"alert_rule": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"strategy": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"each_attempt",
											"last_attempt",
										),
									},
									MarkdownDescription: `must be one of ["each_attempt", "last_attempt"]` + "\n" +
										`Alert strategy to use`,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"alert",
										),
									},
									MarkdownDescription: `must be one of ["alert"]` + "\n" +
										`An alert rule must be of type ` + "`" + `alert` + "`" + ``,
								},
							},
						},
						"delay_rule": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"delay": schema.Int64Attribute{
									Computed:    true,
									Description: `Delay to introduce in MS`,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"delay",
										),
									},
									MarkdownDescription: `must be one of ["delay"]` + "\n" +
										`A delay rule must be of type ` + "`" + `delay` + "`" + ``,
								},
							},
						},
						"filter_rule": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"body": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"str": schema.StringAttribute{
											Computed: true,
										},
										"float32": schema.NumberAttribute{
											Computed: true,
										},
										"boolean": schema.BoolAttribute{
											Computed: true,
										},
										"connection_filter_property_4": schema.SingleNestedAttribute{
											Computed:    true,
											Attributes:  map[string]schema.Attribute{},
											Description: `JSON using our filter syntax to filter on request headers`,
										},
									},
									Validators: []validator.Object{
										validators.ExactlyOneChild(),
									},
									Description: `JSON using our filter syntax to filter on request headers`,
								},
								"headers": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"str": schema.StringAttribute{
											Computed: true,
										},
										"float32": schema.NumberAttribute{
											Computed: true,
										},
										"boolean": schema.BoolAttribute{
											Computed: true,
										},
										"connection_filter_property_4": schema.SingleNestedAttribute{
											Computed:    true,
											Attributes:  map[string]schema.Attribute{},
											Description: `JSON using our filter syntax to filter on request headers`,
										},
									},
									Validators: []validator.Object{
										validators.ExactlyOneChild(),
									},
									Description: `JSON using our filter syntax to filter on request headers`,
								},
								"path": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"str": schema.StringAttribute{
											Computed: true,
										},
										"float32": schema.NumberAttribute{
											Computed: true,
										},
										"boolean": schema.BoolAttribute{
											Computed: true,
										},
										"connection_filter_property_4": schema.SingleNestedAttribute{
											Computed:    true,
											Attributes:  map[string]schema.Attribute{},
											Description: `JSON using our filter syntax to filter on request headers`,
										},
									},
									Validators: []validator.Object{
										validators.ExactlyOneChild(),
									},
									Description: `JSON using our filter syntax to filter on request headers`,
								},
								"query": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"str": schema.StringAttribute{
											Computed: true,
										},
										"float32": schema.NumberAttribute{
											Computed: true,
										},
										"boolean": schema.BoolAttribute{
											Computed: true,
										},
										"connection_filter_property_4": schema.SingleNestedAttribute{
											Computed:    true,
											Attributes:  map[string]schema.Attribute{},
											Description: `JSON using our filter syntax to filter on request headers`,
										},
									},
									Validators: []validator.Object{
										validators.ExactlyOneChild(),
									},
									Description: `JSON using our filter syntax to filter on request headers`,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"filter",
										),
									},
									MarkdownDescription: `must be one of ["filter"]` + "\n" +
										`A filter rule must be of type ` + "`" + `filter` + "`" + ``,
								},
							},
						},
						"retry_rule": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"count": schema.Int64Attribute{
									Computed:    true,
									Description: `Maximum number of retries to attempt`,
								},
								"interval": schema.Int64Attribute{
									Computed:    true,
									Description: `Time in MS between each retry`,
								},
								"strategy": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"linear",
											"exponential",
										),
									},
									MarkdownDescription: `must be one of ["linear", "exponential"]` + "\n" +
										`Algorithm to use when calculating delay between retries`,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"retry",
										),
									},
									MarkdownDescription: `must be one of ["retry"]` + "\n" +
										`A retry rule must be of type ` + "`" + `retry` + "`" + ``,
								},
							},
						},
						"transform_rule": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"transform_full": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"transformation": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"code": schema.StringAttribute{
													Computed:    true,
													Description: `A string representation of your JavaScript (ES6) code to run`,
												},
												"env": schema.MapAttribute{
													Computed:    true,
													ElementType: types.StringType,
													Description: `A key-value object of environment variables to encrypt and expose to your transformation code`,
												},
												"name": schema.StringAttribute{
													Computed:    true,
													Description: `The unique name of the transformation`,
												},
											},
											Description: `You can optionally define a new transformation while creating a transform rule`,
										},
										"transformation_id": schema.StringAttribute{
											Computed:    true,
											Description: `ID of the attached transformation object. Optional input, always set once the rule is defined`,
										},
										"type": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"transform",
												),
											},
											MarkdownDescription: `must be one of ["transform"]` + "\n" +
												`A transformation rule must be of type ` + "`" + `transformation` + "`" + ``,
										},
									},
								},
								"transform_reference": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"transformation_id": schema.StringAttribute{
											Computed:    true,
											Description: `ID of the attached transformation object. Optional input, always set once the rule is defined`,
										},
										"type": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"transform",
												),
											},
											MarkdownDescription: `must be one of ["transform"]` + "\n" +
												`A transformation rule must be of type ` + "`" + `transformation` + "`" + ``,
										},
									},
								},
							},
							Validators: []validator.Object{
								validators.ExactlyOneChild(),
							},
						},
					},
					Validators: []validator.Object{
						validators.ExactlyOneChild(),
					},
				},
				Description: `Array of rules applied to connection after factoring for the ruleset`,
			},
			"rules": schema.ListNestedAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplace(),
				},
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"alert_rule": schema.SingleNestedAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Object{
								objectplanmodifier.RequiresReplace(),
							},
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"strategy": schema.StringAttribute{
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.RequiresReplace(),
									},
									Required: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"each_attempt",
											"last_attempt",
										),
									},
									MarkdownDescription: `must be one of ["each_attempt", "last_attempt"]` + "\n" +
										`Alert strategy to use`,
								},
								"type": schema.StringAttribute{
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.RequiresReplace(),
									},
									Required: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"alert",
										),
									},
									MarkdownDescription: `must be one of ["alert"]` + "\n" +
										`An alert rule must be of type ` + "`" + `alert` + "`" + ``,
								},
							},
						},
						"delay_rule": schema.SingleNestedAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Object{
								objectplanmodifier.RequiresReplace(),
							},
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"delay": schema.Int64Attribute{
									PlanModifiers: []planmodifier.Int64{
										int64planmodifier.RequiresReplace(),
									},
									Required:    true,
									Description: `Delay to introduce in MS`,
								},
								"type": schema.StringAttribute{
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.RequiresReplace(),
									},
									Required: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"delay",
										),
									},
									MarkdownDescription: `must be one of ["delay"]` + "\n" +
										`A delay rule must be of type ` + "`" + `delay` + "`" + ``,
								},
							},
						},
						"filter_rule": schema.SingleNestedAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Object{
								objectplanmodifier.RequiresReplace(),
							},
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"body": schema.SingleNestedAttribute{
									Computed: true,
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplace(),
									},
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"str": schema.StringAttribute{
											Computed: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplace(),
											},
											Optional: true,
										},
										"float32": schema.NumberAttribute{
											PlanModifiers: []planmodifier.Number{
												numberplanmodifier.RequiresReplace(),
											},
											Optional: true,
										},
										"boolean": schema.BoolAttribute{
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplace(),
											},
											Optional: true,
										},
										"connection_filter_property_4": schema.SingleNestedAttribute{
											Computed: true,
											PlanModifiers: []planmodifier.Object{
												objectplanmodifier.RequiresReplace(),
											},
											Optional:    true,
											Attributes:  map[string]schema.Attribute{},
											Description: `JSON using our filter syntax to filter on request headers`,
										},
									},
									Validators: []validator.Object{
										validators.ExactlyOneChild(),
									},
									Description: `JSON using our filter syntax to filter on request headers`,
								},
								"headers": schema.SingleNestedAttribute{
									Computed: true,
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplace(),
									},
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"str": schema.StringAttribute{
											Computed: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplace(),
											},
											Optional: true,
										},
										"float32": schema.NumberAttribute{
											PlanModifiers: []planmodifier.Number{
												numberplanmodifier.RequiresReplace(),
											},
											Optional: true,
										},
										"boolean": schema.BoolAttribute{
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplace(),
											},
											Optional: true,
										},
										"connection_filter_property_4": schema.SingleNestedAttribute{
											Computed: true,
											PlanModifiers: []planmodifier.Object{
												objectplanmodifier.RequiresReplace(),
											},
											Optional:    true,
											Attributes:  map[string]schema.Attribute{},
											Description: `JSON using our filter syntax to filter on request headers`,
										},
									},
									Validators: []validator.Object{
										validators.ExactlyOneChild(),
									},
									Description: `JSON using our filter syntax to filter on request headers`,
								},
								"path": schema.SingleNestedAttribute{
									Computed: true,
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplace(),
									},
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"str": schema.StringAttribute{
											Computed: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplace(),
											},
											Optional: true,
										},
										"float32": schema.NumberAttribute{
											PlanModifiers: []planmodifier.Number{
												numberplanmodifier.RequiresReplace(),
											},
											Optional: true,
										},
										"boolean": schema.BoolAttribute{
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplace(),
											},
											Optional: true,
										},
										"connection_filter_property_4": schema.SingleNestedAttribute{
											Computed: true,
											PlanModifiers: []planmodifier.Object{
												objectplanmodifier.RequiresReplace(),
											},
											Optional:    true,
											Attributes:  map[string]schema.Attribute{},
											Description: `JSON using our filter syntax to filter on request headers`,
										},
									},
									Validators: []validator.Object{
										validators.ExactlyOneChild(),
									},
									Description: `JSON using our filter syntax to filter on request headers`,
								},
								"query": schema.SingleNestedAttribute{
									Computed: true,
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplace(),
									},
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"str": schema.StringAttribute{
											Computed: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplace(),
											},
											Optional: true,
										},
										"float32": schema.NumberAttribute{
											PlanModifiers: []planmodifier.Number{
												numberplanmodifier.RequiresReplace(),
											},
											Optional: true,
										},
										"boolean": schema.BoolAttribute{
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplace(),
											},
											Optional: true,
										},
										"connection_filter_property_4": schema.SingleNestedAttribute{
											Computed: true,
											PlanModifiers: []planmodifier.Object{
												objectplanmodifier.RequiresReplace(),
											},
											Optional:    true,
											Attributes:  map[string]schema.Attribute{},
											Description: `JSON using our filter syntax to filter on request headers`,
										},
									},
									Validators: []validator.Object{
										validators.ExactlyOneChild(),
									},
									Description: `JSON using our filter syntax to filter on request headers`,
								},
								"type": schema.StringAttribute{
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.RequiresReplace(),
									},
									Required: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"filter",
										),
									},
									MarkdownDescription: `must be one of ["filter"]` + "\n" +
										`A filter rule must be of type ` + "`" + `filter` + "`" + ``,
								},
							},
						},
						"retry_rule": schema.SingleNestedAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Object{
								objectplanmodifier.RequiresReplace(),
							},
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"count": schema.Int64Attribute{
									Computed: true,
									PlanModifiers: []planmodifier.Int64{
										int64planmodifier.RequiresReplace(),
									},
									Optional:    true,
									Description: `Maximum number of retries to attempt`,
								},
								"interval": schema.Int64Attribute{
									Computed: true,
									PlanModifiers: []planmodifier.Int64{
										int64planmodifier.RequiresReplace(),
									},
									Optional:    true,
									Description: `Time in MS between each retry`,
								},
								"strategy": schema.StringAttribute{
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.RequiresReplace(),
									},
									Required: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"linear",
											"exponential",
										),
									},
									MarkdownDescription: `must be one of ["linear", "exponential"]` + "\n" +
										`Algorithm to use when calculating delay between retries`,
								},
								"type": schema.StringAttribute{
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.RequiresReplace(),
									},
									Required: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"retry",
										),
									},
									MarkdownDescription: `must be one of ["retry"]` + "\n" +
										`A retry rule must be of type ` + "`" + `retry` + "`" + ``,
								},
							},
						},
						"transform_rule": schema.SingleNestedAttribute{
							Computed: true,
							PlanModifiers: []planmodifier.Object{
								objectplanmodifier.RequiresReplace(),
							},
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"transform_full": schema.SingleNestedAttribute{
									Computed: true,
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplace(),
									},
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"transformation": schema.SingleNestedAttribute{
											Computed: true,
											PlanModifiers: []planmodifier.Object{
												objectplanmodifier.RequiresReplace(),
											},
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"code": schema.StringAttribute{
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplace(),
													},
													Required:    true,
													Description: `A string representation of your JavaScript (ES6) code to run`,
												},
												"env": schema.MapAttribute{
													Computed: true,
													PlanModifiers: []planmodifier.Map{
														mapplanmodifier.RequiresReplace(),
													},
													Optional:    true,
													ElementType: types.StringType,
													Description: `A key-value object of environment variables to encrypt and expose to your transformation code`,
												},
												"name": schema.StringAttribute{
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplace(),
													},
													Required:    true,
													Description: `The unique name of the transformation`,
												},
											},
											Description: `You can optionally define a new transformation while creating a transform rule`,
										},
										"transformation_id": schema.StringAttribute{
											Computed: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplace(),
											},
											Optional:    true,
											Description: `ID of the attached transformation object. Optional input, always set once the rule is defined`,
										},
										"type": schema.StringAttribute{
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplace(),
											},
											Required: true,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"transform",
												),
											},
											MarkdownDescription: `must be one of ["transform"]` + "\n" +
												`A transformation rule must be of type ` + "`" + `transformation` + "`" + ``,
										},
									},
								},
								"transform_reference": schema.SingleNestedAttribute{
									Computed: true,
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplace(),
									},
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"transformation_id": schema.StringAttribute{
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplace(),
											},
											Required:    true,
											Description: `ID of the attached transformation object. Optional input, always set once the rule is defined`,
										},
										"type": schema.StringAttribute{
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplace(),
											},
											Required: true,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"transform",
												),
											},
											MarkdownDescription: `must be one of ["transform"]` + "\n" +
												`A transformation rule must be of type ` + "`" + `transformation` + "`" + ``,
										},
									},
								},
							},
							Validators: []validator.Object{
								validators.ExactlyOneChild(),
							},
						},
					},
					Validators: []validator.Object{
						validators.ExactlyOneChild(),
					},
				},
				Description: `Array of rules configured on the connection`,
			},
			"ruleset": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"archived_at": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
						Description: `Date the ruleset was archived`,
					},
					"created_at": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
						Description: `Date the ruleset was created`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Description: `ID of the ruleset`,
					},
					"is_team_default": schema.BoolAttribute{
						Computed:    true,
						Description: `Default ruleset of Workspace`,
					},
					"name": schema.StringAttribute{
						Computed:    true,
						Description: `A unique name for the ruleset`,
					},
					"rules": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"alert_rule": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"strategy": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"each_attempt",
													"last_attempt",
												),
											},
											MarkdownDescription: `must be one of ["each_attempt", "last_attempt"]` + "\n" +
												`Alert strategy to use`,
										},
										"type": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"alert",
												),
											},
											MarkdownDescription: `must be one of ["alert"]` + "\n" +
												`An alert rule must be of type ` + "`" + `alert` + "`" + ``,
										},
									},
								},
								"delay_rule": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"delay": schema.Int64Attribute{
											Computed:    true,
											Description: `Delay to introduce in MS`,
										},
										"type": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"delay",
												),
											},
											MarkdownDescription: `must be one of ["delay"]` + "\n" +
												`A delay rule must be of type ` + "`" + `delay` + "`" + ``,
										},
									},
								},
								"filter_rule": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"body": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"str": schema.StringAttribute{
													Computed: true,
												},
												"float32": schema.NumberAttribute{
													Computed: true,
												},
												"boolean": schema.BoolAttribute{
													Computed: true,
												},
												"connection_filter_property_4": schema.SingleNestedAttribute{
													Computed:    true,
													Attributes:  map[string]schema.Attribute{},
													Description: `JSON using our filter syntax to filter on request headers`,
												},
											},
											Validators: []validator.Object{
												validators.ExactlyOneChild(),
											},
											Description: `JSON using our filter syntax to filter on request headers`,
										},
										"headers": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"str": schema.StringAttribute{
													Computed: true,
												},
												"float32": schema.NumberAttribute{
													Computed: true,
												},
												"boolean": schema.BoolAttribute{
													Computed: true,
												},
												"connection_filter_property_4": schema.SingleNestedAttribute{
													Computed:    true,
													Attributes:  map[string]schema.Attribute{},
													Description: `JSON using our filter syntax to filter on request headers`,
												},
											},
											Validators: []validator.Object{
												validators.ExactlyOneChild(),
											},
											Description: `JSON using our filter syntax to filter on request headers`,
										},
										"path": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"str": schema.StringAttribute{
													Computed: true,
												},
												"float32": schema.NumberAttribute{
													Computed: true,
												},
												"boolean": schema.BoolAttribute{
													Computed: true,
												},
												"connection_filter_property_4": schema.SingleNestedAttribute{
													Computed:    true,
													Attributes:  map[string]schema.Attribute{},
													Description: `JSON using our filter syntax to filter on request headers`,
												},
											},
											Validators: []validator.Object{
												validators.ExactlyOneChild(),
											},
											Description: `JSON using our filter syntax to filter on request headers`,
										},
										"query": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"str": schema.StringAttribute{
													Computed: true,
												},
												"float32": schema.NumberAttribute{
													Computed: true,
												},
												"boolean": schema.BoolAttribute{
													Computed: true,
												},
												"connection_filter_property_4": schema.SingleNestedAttribute{
													Computed:    true,
													Attributes:  map[string]schema.Attribute{},
													Description: `JSON using our filter syntax to filter on request headers`,
												},
											},
											Validators: []validator.Object{
												validators.ExactlyOneChild(),
											},
											Description: `JSON using our filter syntax to filter on request headers`,
										},
										"type": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"filter",
												),
											},
											MarkdownDescription: `must be one of ["filter"]` + "\n" +
												`A filter rule must be of type ` + "`" + `filter` + "`" + ``,
										},
									},
								},
								"retry_rule": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"count": schema.Int64Attribute{
											Computed:    true,
											Description: `Maximum number of retries to attempt`,
										},
										"interval": schema.Int64Attribute{
											Computed:    true,
											Description: `Time in MS between each retry`,
										},
										"strategy": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"linear",
													"exponential",
												),
											},
											MarkdownDescription: `must be one of ["linear", "exponential"]` + "\n" +
												`Algorithm to use when calculating delay between retries`,
										},
										"type": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"retry",
												),
											},
											MarkdownDescription: `must be one of ["retry"]` + "\n" +
												`A retry rule must be of type ` + "`" + `retry` + "`" + ``,
										},
									},
								},
								"transform_rule": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"transform_full": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"transformation": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"code": schema.StringAttribute{
															Computed:    true,
															Description: `A string representation of your JavaScript (ES6) code to run`,
														},
														"env": schema.MapAttribute{
															Computed:    true,
															ElementType: types.StringType,
															Description: `A key-value object of environment variables to encrypt and expose to your transformation code`,
														},
														"name": schema.StringAttribute{
															Computed:    true,
															Description: `The unique name of the transformation`,
														},
													},
													Description: `You can optionally define a new transformation while creating a transform rule`,
												},
												"transformation_id": schema.StringAttribute{
													Computed:    true,
													Description: `ID of the attached transformation object. Optional input, always set once the rule is defined`,
												},
												"type": schema.StringAttribute{
													Computed: true,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"transform",
														),
													},
													MarkdownDescription: `must be one of ["transform"]` + "\n" +
														`A transformation rule must be of type ` + "`" + `transformation` + "`" + ``,
												},
											},
										},
										"transform_reference": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"transformation_id": schema.StringAttribute{
													Computed:    true,
													Description: `ID of the attached transformation object. Optional input, always set once the rule is defined`,
												},
												"type": schema.StringAttribute{
													Computed: true,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"transform",
														),
													},
													MarkdownDescription: `must be one of ["transform"]` + "\n" +
														`A transformation rule must be of type ` + "`" + `transformation` + "`" + ``,
												},
											},
										},
									},
									Validators: []validator.Object{
										validators.ExactlyOneChild(),
									},
								},
							},
							Validators: []validator.Object{
								validators.ExactlyOneChild(),
							},
						},
						Description: `Array of rules to apply`,
					},
					"team_id": schema.StringAttribute{
						Computed:    true,
						Description: `ID of the workspace`,
					},
					"updated_at": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
						Description: `Date the ruleset was last updated`,
					},
				},
				Description: `Associated [Ruleset](#ruleset-object) object`,
			},
			"ruleset_id": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional:    true,
				Description: `ID of a rule to bind to the connection. Default to the Workspace default ruleset`,
			},
			"source": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"allowed_http_methods": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `List of allowed HTTP methods. Defaults to PUT, POST, PATCH, DELETE.`,
					},
					"archived_at": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
						Description: `Date the source was archived`,
					},
					"created_at": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
						Description: `Date the source was created`,
					},
					"custom_response": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"body": schema.StringAttribute{
								Computed:    true,
								Description: `Body of the custom response`,
							},
							"content_type": schema.StringAttribute{
								Computed: true,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"json",
										"text",
										"xml",
									),
								},
								MarkdownDescription: `must be one of ["json", "text", "xml"]` + "\n" +
									`Content type of the custom response`,
							},
						},
						Description: `Custom response object`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Description: `ID of the source`,
					},
					"integration": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"features": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
								Description: `List of enabled features`,
							},
							"id": schema.StringAttribute{
								Computed:    true,
								Description: `ID of the integration`,
							},
							"label": schema.StringAttribute{
								Computed:    true,
								Description: `Label of the integration`,
							},
							"provider": schema.StringAttribute{
								Computed: true,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"twitter",
										"stripe",
										"recharge",
										"github",
										"shopify",
										"postmark",
										"typeform",
										"hmac",
										"basic_auth",
										"api_key",
										"xero",
										"svix",
										"zoom",
										"akeneo",
										"adyen",
										"gitlab",
										"property-finder",
										"woocommerce",
										"oura",
										"commercelayer",
										"mailgun",
										"pipedrive",
										"sendgrid",
										"workos",
										"synctera",
										"aws_sns",
									),
								},
								MarkdownDescription: `must be one of ["twitter", "stripe", "recharge", "github", "shopify", "postmark", "typeform", "hmac", "basic_auth", "api_key", "xero", "svix", "zoom", "akeneo", "adyen", "gitlab", "property-finder", "woocommerce", "oura", "commercelayer", "mailgun", "pipedrive", "sendgrid", "workos", "synctera", "aws_sns"]` + "\n" +
									`The provider name`,
							},
						},
						Description: `Integration object`,
					},
					"integration_id": schema.StringAttribute{
						Computed:    true,
						Description: `ID of the integration`,
					},
					"name": schema.StringAttribute{
						Computed:    true,
						Description: `Name for the source`,
					},
					"team_id": schema.StringAttribute{
						Computed:    true,
						Description: `ID of the workspace`,
					},
					"updated_at": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
						Description: `Date the source was last updated`,
					},
					"url": schema.StringAttribute{
						Computed:    true,
						Description: `A unique URL that must be supplied to your webhook's provider`,
					},
				},
				Description: `Associated [Source](#source-object) object`,
			},
			"source_id": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional:    true,
				Description: `ID of a source to bind to the connection`,
			},
			"team_id": schema.StringAttribute{
				Computed:    true,
				Description: `ID of the workspace`,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
				Description: `Date the connection was last updated`,
			},
			"url": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional:    true,
				Description: `Endpoint of the destination`,
			},
		},
	}
}

func (r *ConnectionResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *ConnectionResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *ConnectionResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var destination *operations.CreateConnectionRequestBodyDestination
	var authMethod *shared.DestinationAuthMethodConfig
	if data.AuthMethod != nil {
		var hookdeckSignature *shared.HookdeckSignature
		if data.AuthMethod != nil {
			var config *shared.DestinationAuthMethodSignatureConfig
			if data.AuthMethod != nil {
				config = &shared.DestinationAuthMethodSignatureConfig{}
			}
			typeVar := shared.HookdeckSignatureType(data.AuthMethod.Type.ValueString())
			hookdeckSignature = &shared.HookdeckSignature{
				Config: config,
				Type:   typeVar,
			}
		}
		if hookdeckSignature != nil {
			authMethod = &shared.DestinationAuthMethodConfig{
				HookdeckSignature: hookdeckSignature,
			}
		}
		var basicAuth *shared.BasicAuth
		if data.AuthMethod != nil {
			var config1 *shared.DestinationAuthMethodBasicAuthConfig
			if data.AuthMethod != nil {
				password := data.AuthMethod.Password.ValueString()
				username := data.AuthMethod.Username.ValueString()
				config1 = &shared.DestinationAuthMethodBasicAuthConfig{
					Password: password,
					Username: username,
				}
			}
			typeVar1 := shared.BasicAuthType(data.AuthMethod.Type.ValueString())
			basicAuth = &shared.BasicAuth{
				Config: config1,
				Type:   typeVar1,
			}
		}
		if basicAuth != nil {
			authMethod = &shared.DestinationAuthMethodConfig{
				BasicAuth: basicAuth,
			}
		}
		var apiKey *shared.APIKey
		if data.AuthMethod != nil {
			var config2 *shared.DestinationAuthMethodAPIKeyConfig
			if data.AuthMethod != nil {
				apiKey1 := data.AuthMethod.APIKey.ValueString()
				key := data.AuthMethod.Key.ValueString()
				to := new(shared.DestinationAuthMethodAPIKeyConfigTo)
				if !data.AuthMethod.To.IsUnknown() && !data.AuthMethod.To.IsNull() {
					*to = shared.DestinationAuthMethodAPIKeyConfigTo(data.AuthMethod.To.ValueString())
				} else {
					to = nil
				}
				config2 = &shared.DestinationAuthMethodAPIKeyConfig{
					APIKey: apiKey1,
					Key:    key,
					To:     to,
				}
			}
			typeVar2 := shared.APIKeyType(data.AuthMethod.Type.ValueString())
			apiKey = &shared.APIKey{
				Config: config2,
				Type:   typeVar2,
			}
		}
		if apiKey != nil {
			authMethod = &shared.DestinationAuthMethodConfig{
				APIKey: apiKey,
			}
		}
		var bearerToken *shared.BearerToken
		if data.AuthMethod != nil {
			var config3 *shared.DestinationAuthMethodBearerTokenConfig
			if data.AuthMethod != nil {
				token := data.AuthMethod.Token.ValueString()
				config3 = &shared.DestinationAuthMethodBearerTokenConfig{
					Token: token,
				}
			}
			typeVar3 := shared.BearerTokenType(data.AuthMethod.Type.ValueString())
			bearerToken = &shared.BearerToken{
				Config: config3,
				Type:   typeVar3,
			}
		}
		if bearerToken != nil {
			authMethod = &shared.DestinationAuthMethodConfig{
				BearerToken: bearerToken,
			}
		}
		var customSignature *shared.CustomSignature
		if data.AuthMethod != nil {
			key1 := data.AuthMethod.Key.ValueString()
			signingSecret := new(string)
			if !data.AuthMethod.SigningSecret.IsUnknown() && !data.AuthMethod.SigningSecret.IsNull() {
				*signingSecret = data.AuthMethod.SigningSecret.ValueString()
			} else {
				signingSecret = nil
			}
			config4 := shared.DestinationAuthMethodCustomSignatureConfig{
				Key:           key1,
				SigningSecret: signingSecret,
			}
			typeVar4 := shared.CustomSignatureType(data.AuthMethod.Type.ValueString())
			customSignature = &shared.CustomSignature{
				Config: config4,
				Type:   typeVar4,
			}
		}
		if customSignature != nil {
			authMethod = &shared.DestinationAuthMethodConfig{
				CustomSignature: customSignature,
			}
		}
	}
	cliPath := new(string)
	if !data.CliPath.IsUnknown() && !data.CliPath.IsNull() {
		*cliPath = data.CliPath.ValueString()
	} else {
		cliPath = nil
	}
	httpMethod := new(shared.DestinationHTTPMethod)
	if !data.HTTPMethod.IsUnknown() && !data.HTTPMethod.IsNull() {
		*httpMethod = shared.DestinationHTTPMethod(data.HTTPMethod.ValueString())
	} else {
		httpMethod = nil
	}
	name := data.Name.ValueString()
	pathForwardingDisabled := new(bool)
	if !data.PathForwardingDisabled.IsUnknown() && !data.PathForwardingDisabled.IsNull() {
		*pathForwardingDisabled = data.PathForwardingDisabled.ValueBool()
	} else {
		pathForwardingDisabled = nil
	}
	var rateLimit interface{}
	if data.RateLimit != nil {
	}
	rateLimitPeriod := new(operations.CreateConnectionRequestBodyDestinationRateLimitPeriod)
	if !data.RateLimitPeriod.IsUnknown() && !data.RateLimitPeriod.IsNull() {
		*rateLimitPeriod = operations.CreateConnectionRequestBodyDestinationRateLimitPeriod(data.RateLimitPeriod.ValueString())
	} else {
		rateLimitPeriod = nil
	}
	url := new(string)
	if !data.URL.IsUnknown() && !data.URL.IsNull() {
		*url = data.URL.ValueString()
	} else {
		url = nil
	}
	destination = &operations.CreateConnectionRequestBodyDestination{
		AuthMethod:             authMethod,
		CliPath:                cliPath,
		HTTPMethod:             httpMethod,
		Name:                   name,
		PathForwardingDisabled: pathForwardingDisabled,
		RateLimit:              rateLimit,
		RateLimitPeriod:        rateLimitPeriod,
		URL:                    url,
	}
	destinationID := new(string)
	if !data.DestinationID.IsUnknown() && !data.DestinationID.IsNull() {
		*destinationID = data.DestinationID.ValueString()
	} else {
		destinationID = nil
	}
	name1 := data.Name.ValueString()
	var rules []shared.Rule = nil
	for _, rulesItem := range data.Rules {
	}
	var ruleset *operations.CreateConnectionRequestBodyRuleset
	if data != nil {
		isTeamDefault := new(bool)
		if !data.IsTeamDefault.IsUnknown() && !data.IsTeamDefault.IsNull() {
			*isTeamDefault = data.IsTeamDefault.ValueBool()
		} else {
			isTeamDefault = nil
		}
		name2 := data.Name.ValueString()
		var rules1 []shared.Rule = nil
		for _, rulesItem1 := range data.Rules {
		}
		ruleset = &operations.CreateConnectionRequestBodyRuleset{
			IsTeamDefault: isTeamDefault,
			Name:          name2,
			Rules:         rules1,
		}
	}
	rulesetID := new(string)
	if !data.RulesetID.IsUnknown() && !data.RulesetID.IsNull() {
		*rulesetID = data.RulesetID.ValueString()
	} else {
		rulesetID = nil
	}
	var source *operations.CreateConnectionRequestBodySource
	var allowedHTTPMethods []shared.SourceAllowedHTTPMethod = nil
	for _, allowedHTTPMethodsItem := range data.AllowedHTTPMethods {
		allowedHTTPMethods = append(allowedHTTPMethods, shared.SourceAllowedHTTPMethod(allowedHTTPMethodsItem.ValueString()))
	}
	var customResponse *shared.SourceCustomResponse
	if data != nil {
		body := data.Body.ValueString()
		contentType := shared.SourceCustomResponseContentType(data.ContentType.ValueString())
		customResponse = &shared.SourceCustomResponse{
			Body:        body,
			ContentType: contentType,
		}
	}
	name3 := data.Name.ValueString()
	source = &operations.CreateConnectionRequestBodySource{
		AllowedHTTPMethods: allowedHTTPMethods,
		CustomResponse:     customResponse,
		Name:               name3,
	}
	sourceID := new(string)
	if !data.SourceID.IsUnknown() && !data.SourceID.IsNull() {
		*sourceID = data.SourceID.ValueString()
	} else {
		sourceID = nil
	}
	request := operations.CreateConnectionRequestBody{
		Destination:   destination,
		DestinationID: destinationID,
		Name:          name1,
		Rules:         rules,
		Ruleset:       ruleset,
		RulesetID:     rulesetID,
		Source:        source,
		SourceID:      sourceID,
	}
	res, err := r.client.Connection.CreateConnection(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.Connection == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromCreateResponse(res.Connection)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ConnectionResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *ConnectionResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	id := data.ID.ValueString()
	request := operations.GetConnectionRequest{
		ID: id,
	}
	res, err := r.client.Connection.GetConnection(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.Connection == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromGetResponse(res.Connection)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ConnectionResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *ConnectionResourceModel
	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; all attributes marked as RequiresReplace

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ConnectionResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *ConnectionResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	id := data.ID.ValueString()
	request := operations.DeleteConnectionRequest{
		ID: id,
	}
	res, err := r.client.Connection.DeleteConnection(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *ConnectionResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)
}
