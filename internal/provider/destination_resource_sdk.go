// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"hashicups/internal/sdk/pkg/models/operations"
	"hashicups/internal/sdk/pkg/models/shared"
	"time"
)

func (r *DestinationResourceModel) ToCreateSDKType() *operations.CreateDestinationRequestBody {
	var authMethod *shared.DestinationAuthMethodConfig
	if r.AuthMethod != nil {
		var hookdeckSignature *shared.HookdeckSignature
		if r.AuthMethod.HookdeckSignature != nil {
			var config *shared.DestinationAuthMethodSignatureConfig
			if r.AuthMethod.HookdeckSignature.Config != nil {
				config = &shared.DestinationAuthMethodSignatureConfig{}
			}
			typeVar := shared.HookdeckSignatureType(r.AuthMethod.HookdeckSignature.Type.ValueString())
			hookdeckSignature = &shared.HookdeckSignature{
				Config: config,
				Type:   typeVar,
			}
		}
		if hookdeckSignature != nil {
			authMethod = &shared.DestinationAuthMethodConfig{
				HookdeckSignature: hookdeckSignature,
			}
		}
		var basicAuth *shared.BasicAuth
		if r.AuthMethod.BasicAuth != nil {
			var config1 *shared.DestinationAuthMethodBasicAuthConfig
			if r.AuthMethod.BasicAuth.Config != nil {
				password := r.AuthMethod.BasicAuth.Config.Password.ValueString()
				username := r.AuthMethod.BasicAuth.Config.Username.ValueString()
				config1 = &shared.DestinationAuthMethodBasicAuthConfig{
					Password: password,
					Username: username,
				}
			}
			typeVar1 := shared.BasicAuthType(r.AuthMethod.BasicAuth.Type.ValueString())
			basicAuth = &shared.BasicAuth{
				Config: config1,
				Type:   typeVar1,
			}
		}
		if basicAuth != nil {
			authMethod = &shared.DestinationAuthMethodConfig{
				BasicAuth: basicAuth,
			}
		}
		var apiKey *shared.APIKey
		if r.AuthMethod.APIKey != nil {
			var config2 *shared.DestinationAuthMethodAPIKeyConfig
			if r.AuthMethod.APIKey.Config != nil {
				apiKey1 := r.AuthMethod.APIKey.Config.APIKey.ValueString()
				key := r.AuthMethod.APIKey.Config.Key.ValueString()
				to := new(shared.DestinationAuthMethodAPIKeyConfigTo)
				if !r.AuthMethod.APIKey.Config.To.IsUnknown() && !r.AuthMethod.APIKey.Config.To.IsNull() {
					*to = shared.DestinationAuthMethodAPIKeyConfigTo(r.AuthMethod.APIKey.Config.To.ValueString())
				} else {
					to = nil
				}
				config2 = &shared.DestinationAuthMethodAPIKeyConfig{
					APIKey: apiKey1,
					Key:    key,
					To:     to,
				}
			}
			typeVar2 := shared.APIKeyType(r.AuthMethod.APIKey.Type.ValueString())
			apiKey = &shared.APIKey{
				Config: config2,
				Type:   typeVar2,
			}
		}
		if apiKey != nil {
			authMethod = &shared.DestinationAuthMethodConfig{
				APIKey: apiKey,
			}
		}
		var bearerToken *shared.BearerToken
		if r.AuthMethod.BearerToken != nil {
			var config3 *shared.DestinationAuthMethodBearerTokenConfig
			if r.AuthMethod.BearerToken.Config != nil {
				token := r.AuthMethod.BearerToken.Config.Token.ValueString()
				config3 = &shared.DestinationAuthMethodBearerTokenConfig{
					Token: token,
				}
			}
			typeVar3 := shared.BearerTokenType(r.AuthMethod.BearerToken.Type.ValueString())
			bearerToken = &shared.BearerToken{
				Config: config3,
				Type:   typeVar3,
			}
		}
		if bearerToken != nil {
			authMethod = &shared.DestinationAuthMethodConfig{
				BearerToken: bearerToken,
			}
		}
		var customSignature *shared.CustomSignature
		if r.AuthMethod.CustomSignature != nil {
			key1 := r.AuthMethod.CustomSignature.Config.Key.ValueString()
			signingSecret := new(string)
			if !r.AuthMethod.CustomSignature.Config.SigningSecret.IsUnknown() && !r.AuthMethod.CustomSignature.Config.SigningSecret.IsNull() {
				*signingSecret = r.AuthMethod.CustomSignature.Config.SigningSecret.ValueString()
			} else {
				signingSecret = nil
			}
			config4 := shared.DestinationAuthMethodCustomSignatureConfig{
				Key:           key1,
				SigningSecret: signingSecret,
			}
			typeVar4 := shared.CustomSignatureType(r.AuthMethod.CustomSignature.Type.ValueString())
			customSignature = &shared.CustomSignature{
				Config: config4,
				Type:   typeVar4,
			}
		}
		if customSignature != nil {
			authMethod = &shared.DestinationAuthMethodConfig{
				CustomSignature: customSignature,
			}
		}
	}
	cliPath := new(string)
	if !r.CliPath.IsUnknown() && !r.CliPath.IsNull() {
		*cliPath = r.CliPath.ValueString()
	} else {
		cliPath = nil
	}
	httpMethod := new(shared.DestinationHTTPMethod)
	if !r.HTTPMethod.IsUnknown() && !r.HTTPMethod.IsNull() {
		*httpMethod = shared.DestinationHTTPMethod(r.HTTPMethod.ValueString())
	} else {
		httpMethod = nil
	}
	name := r.Name.ValueString()
	pathForwardingDisabled := new(bool)
	if !r.PathForwardingDisabled.IsUnknown() && !r.PathForwardingDisabled.IsNull() {
		*pathForwardingDisabled = r.PathForwardingDisabled.ValueBool()
	} else {
		pathForwardingDisabled = nil
	}
	rateLimit := new(int64)
	if !r.RateLimit.IsUnknown() && !r.RateLimit.IsNull() {
		*rateLimit = r.RateLimit.ValueInt64()
	} else {
		rateLimit = nil
	}
	rateLimitPeriod := new(operations.CreateDestinationRequestBodyRateLimitPeriod)
	if !r.RateLimitPeriod.IsUnknown() && !r.RateLimitPeriod.IsNull() {
		*rateLimitPeriod = operations.CreateDestinationRequestBodyRateLimitPeriod(r.RateLimitPeriod.ValueString())
	} else {
		rateLimitPeriod = nil
	}
	url := new(string)
	if !r.URL.IsUnknown() && !r.URL.IsNull() {
		*url = r.URL.ValueString()
	} else {
		url = nil
	}
	out := operations.CreateDestinationRequestBody{
		AuthMethod:             authMethod,
		CliPath:                cliPath,
		HTTPMethod:             httpMethod,
		Name:                   name,
		PathForwardingDisabled: pathForwardingDisabled,
		RateLimit:              rateLimit,
		RateLimitPeriod:        rateLimitPeriod,
		URL:                    url,
	}
	return &out
}

func (r *DestinationResourceModel) ToGetSDKType() *operations.CreateDestinationRequestBody {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationResourceModel) ToDeleteSDKType() *operations.CreateDestinationRequestBody {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationResourceModel) RefreshFromGetResponse(resp *shared.Destination) {
	if resp.ArchivedAt != nil {
		r.ArchivedAt = types.StringValue(resp.ArchivedAt.Format(time.RFC3339Nano))
	} else {
		r.ArchivedAt = types.StringNull()
	}
	if resp.AuthMethod == nil {
		r.AuthMethod = nil
	} else {
		r.AuthMethod = &DestinationAuthMethodConfig{}
		if resp.AuthMethod.APIKey != nil {
			r.AuthMethod.APIKey = &APIKey{}
			if resp.AuthMethod.APIKey.Config == nil {
				r.AuthMethod.APIKey.Config = nil
			} else {
				r.AuthMethod.APIKey.Config = &DestinationAuthMethodAPIKeyConfig{}
				r.AuthMethod.APIKey.Config.APIKey = types.StringValue(resp.AuthMethod.APIKey.Config.APIKey)
				r.AuthMethod.APIKey.Config.Key = types.StringValue(resp.AuthMethod.APIKey.Config.Key)
				if resp.AuthMethod.APIKey.Config.To != nil {
					r.AuthMethod.APIKey.Config.To = types.StringValue(string(*resp.AuthMethod.APIKey.Config.To))
				} else {
					r.AuthMethod.APIKey.Config.To = types.StringNull()
				}
			}
			r.AuthMethod.APIKey.Type = types.StringValue(string(resp.AuthMethod.APIKey.Type))
		}
		if resp.AuthMethod.BasicAuth != nil {
			r.AuthMethod.BasicAuth = &BasicAuth{}
			if resp.AuthMethod.BasicAuth.Config == nil {
				r.AuthMethod.BasicAuth.Config = nil
			} else {
				r.AuthMethod.BasicAuth.Config = &DestinationAuthMethodBasicAuthConfig{}
				r.AuthMethod.BasicAuth.Config.Password = types.StringValue(resp.AuthMethod.BasicAuth.Config.Password)
				r.AuthMethod.BasicAuth.Config.Username = types.StringValue(resp.AuthMethod.BasicAuth.Config.Username)
			}
			r.AuthMethod.BasicAuth.Type = types.StringValue(string(resp.AuthMethod.BasicAuth.Type))
		}
		if resp.AuthMethod.BearerToken != nil {
			r.AuthMethod.BearerToken = &BearerToken{}
			if resp.AuthMethod.BearerToken.Config == nil {
				r.AuthMethod.BearerToken.Config = nil
			} else {
				r.AuthMethod.BearerToken.Config = &DestinationAuthMethodBearerTokenConfig{}
				r.AuthMethod.BearerToken.Config.Token = types.StringValue(resp.AuthMethod.BearerToken.Config.Token)
			}
			r.AuthMethod.BearerToken.Type = types.StringValue(string(resp.AuthMethod.BearerToken.Type))
		}
		if resp.AuthMethod.CustomSignature != nil {
			r.AuthMethod.CustomSignature = &CustomSignature{}
			r.AuthMethod.CustomSignature.Config.Key = types.StringValue(resp.AuthMethod.CustomSignature.Config.Key)
			if resp.AuthMethod.CustomSignature.Config.SigningSecret != nil {
				r.AuthMethod.CustomSignature.Config.SigningSecret = types.StringValue(*resp.AuthMethod.CustomSignature.Config.SigningSecret)
			} else {
				r.AuthMethod.CustomSignature.Config.SigningSecret = types.StringNull()
			}
			r.AuthMethod.CustomSignature.Type = types.StringValue(string(resp.AuthMethod.CustomSignature.Type))
		}
		if resp.AuthMethod.HookdeckSignature != nil {
			r.AuthMethod.HookdeckSignature = &HookdeckSignature{}
			if resp.AuthMethod.HookdeckSignature.Config == nil {
				r.AuthMethod.HookdeckSignature.Config = nil
			} else {
				r.AuthMethod.HookdeckSignature.Config = &DestinationAuthMethodSignatureConfig{}
			}
			r.AuthMethod.HookdeckSignature.Type = types.StringValue(string(resp.AuthMethod.HookdeckSignature.Type))
		}
	}
	if resp.CliPath != nil {
		r.CliPath = types.StringValue(*resp.CliPath)
	} else {
		r.CliPath = types.StringNull()
	}
	r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339Nano))
	if resp.HTTPMethod != nil {
		r.HTTPMethod = types.StringValue(string(*resp.HTTPMethod))
	} else {
		r.HTTPMethod = types.StringNull()
	}
	r.ID = types.StringValue(resp.ID)
	r.Name = types.StringValue(resp.Name)
	if resp.PathForwardingDisabled != nil {
		r.PathForwardingDisabled = types.BoolValue(*resp.PathForwardingDisabled)
	} else {
		r.PathForwardingDisabled = types.BoolNull()
	}
	if resp.RateLimit != nil {
		r.RateLimit = types.Int64Value(*resp.RateLimit)
	} else {
		r.RateLimit = types.Int64Null()
	}
	if resp.RateLimitPeriod != nil {
		r.RateLimitPeriod = types.StringValue(string(*resp.RateLimitPeriod))
	} else {
		r.RateLimitPeriod = types.StringNull()
	}
	r.TeamID = types.StringValue(resp.TeamID)
	r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
	if resp.URL != nil {
		r.URL = types.StringValue(*resp.URL)
	} else {
		r.URL = types.StringNull()
	}
}

func (r *DestinationResourceModel) RefreshFromCreateResponse(resp *shared.Destination) {
	r.RefreshFromGetResponse(resp)
}
