// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"hashicups/internal/sdk"
	"hashicups/internal/sdk/pkg/models/operations"
	"hashicups/internal/sdk/pkg/models/shared"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"hashicups/internal/validators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &DestinationResource{}
var _ resource.ResourceWithImportState = &DestinationResource{}

func NewDestinationResource() resource.Resource {
	return &DestinationResource{}
}

// DestinationResource defines the resource implementation.
type DestinationResource struct {
	client *sdk.SDK
}

// DestinationResourceModel describes the resource data model.
type DestinationResourceModel struct {
	ArchivedAt             types.String                 `tfsdk:"archived_at"`
	AuthMethod             *DestinationAuthMethodConfig `tfsdk:"auth_method"`
	CliPath                types.String                 `tfsdk:"cli_path"`
	CreatedAt              types.String                 `tfsdk:"created_at"`
	HTTPMethod             types.String                 `tfsdk:"http_method"`
	ID                     types.String                 `tfsdk:"id"`
	Name                   types.String                 `tfsdk:"name"`
	PathForwardingDisabled types.Bool                   `tfsdk:"path_forwarding_disabled"`
	RateLimit              types.Int64                  `tfsdk:"rate_limit"`
	RateLimitPeriod        types.String                 `tfsdk:"rate_limit_period"`
	TeamID                 types.String                 `tfsdk:"team_id"`
	UpdatedAt              types.String                 `tfsdk:"updated_at"`
	URL                    types.String                 `tfsdk:"url"`
}

func (r *DestinationResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_destination"
}

func (r *DestinationResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Destination Resource",

		Attributes: map[string]schema.Attribute{
			"archived_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
				Description: `Date the destination was archived`,
			},
			"auth_method": schema.SingleNestedAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"api_key": schema.SingleNestedAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplace(),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"config": schema.SingleNestedAttribute{
								Computed: true,
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplace(),
								},
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"api_key": schema.StringAttribute{
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplace(),
										},
										Required:    true,
										Description: `API key for the API key auth`,
									},
									"key": schema.StringAttribute{
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplace(),
										},
										Required:    true,
										Description: `Key for the API key auth`,
									},
									"to": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplace(),
										},
										Optional: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"header",
												"query",
											),
										},
										MarkdownDescription: `must be one of [header, query]` + "\n" +
											`Whether the API key should be sent as a header or a query parameter`,
									},
								},
								Description: `API key config for the destination's auth method`,
							},
							"type": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Required: true,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"API_KEY",
									),
								},
								MarkdownDescription: `must be one of [API_KEY]` + "\n" +
									`Type of auth method`,
							},
						},
						Description: `API Key`,
					},
					"basic_auth": schema.SingleNestedAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplace(),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"config": schema.SingleNestedAttribute{
								Computed: true,
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplace(),
								},
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"password": schema.StringAttribute{
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplace(),
										},
										Required:    true,
										Description: `Password for basic auth`,
									},
									"username": schema.StringAttribute{
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplace(),
										},
										Required:    true,
										Description: `Username for basic auth`,
									},
								},
								Description: `Basic auth config for the destination's auth method`,
							},
							"type": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Required: true,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"BASIC_AUTH",
									),
								},
								MarkdownDescription: `must be one of [BASIC_AUTH]` + "\n" +
									`Type of auth method`,
							},
						},
						Description: `Basic Auth`,
					},
					"bearer_token": schema.SingleNestedAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplace(),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"config": schema.SingleNestedAttribute{
								Computed: true,
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplace(),
								},
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"token": schema.StringAttribute{
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplace(),
										},
										Required:    true,
										Description: `Token for the bearer token auth`,
									},
								},
								Description: `Bearer token config for the destination's auth method`,
							},
							"type": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Required: true,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"BEARER_TOKEN",
									),
								},
								MarkdownDescription: `must be one of [BEARER_TOKEN]` + "\n" +
									`Type of auth method`,
							},
						},
						Description: `Bearer Token`,
					},
					"custom_signature": schema.SingleNestedAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplace(),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"config": schema.SingleNestedAttribute{
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplace(),
								},
								Required: true,
								Attributes: map[string]schema.Attribute{
									"key": schema.StringAttribute{
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplace(),
										},
										Required:    true,
										Description: `Key for the custom signature auth`,
									},
									"signing_secret": schema.StringAttribute{
										Computed: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplace(),
										},
										Optional:    true,
										Description: `Signing secret for the custom signature auth. If left empty a secret will be generated for you.`,
									},
								},
								Description: `Custom signature config for the destination's auth method`,
							},
							"type": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Required: true,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"CUSTOM_SIGNATURE",
									),
								},
								MarkdownDescription: `must be one of [CUSTOM_SIGNATURE]` + "\n" +
									`Type of auth method`,
							},
						},
						Description: `Custom Signature`,
					},
					"hookdeck_signature": schema.SingleNestedAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplace(),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"config": schema.SingleNestedAttribute{
								Computed: true,
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplace(),
								},
								Optional:    true,
								Attributes:  map[string]schema.Attribute{},
								Description: `Empty config for the destination's auth method`,
							},
							"type": schema.StringAttribute{
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplace(),
								},
								Required: true,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"HOOKDECK_SIGNATURE",
									),
								},
								MarkdownDescription: `must be one of [HOOKDECK_SIGNATURE]` + "\n" +
									`Type of auth method`,
							},
						},
						Description: `Hookdeck Signature`,
					},
				},
				Validators: []validator.Object{
					validators.ExactlyOneChild(),
				},
				Description: `Config for the destination's auth method`,
			},
			"cli_path": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional:    true,
				Description: `Path for the CLI destination`,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
				Description: `Date the destination was created`,
			},
			"http_method": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"<nil>",
						"GET",
						"POST",
						"PUT",
						"PATCH",
						"DELETE",
					),
				},
				MarkdownDescription: `must be one of [<nil>, GET, POST, PUT, PATCH, DELETE]` + "\n" +
					`HTTP method used on requests sent to the destination, overrides the method used on requests sent to the source.`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `ID of the destination`,
			},
			"name": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Required:    true,
				Description: `A unique, human-friendly name for the destination`,
			},
			"path_forwarding_disabled": schema.BoolAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplace(),
				},
				Optional: true,
			},
			"rate_limit": schema.Int64Attribute{
				Computed: true,
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.RequiresReplace(),
				},
				Optional:    true,
				Description: `Limit event attempts to receive per period. Max value is workspace plan's max attempts thoughput.`,
			},
			"rate_limit_period": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional: true,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"<nil>",
						"second",
						"minute",
						"hour",
					),
				},
				MarkdownDescription: `must be one of [<nil>, second, minute, hour]` + "\n" +
					`Period to rate limit attempts`,
			},
			"team_id": schema.StringAttribute{
				Computed:    true,
				Description: `ID of the workspace`,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
				Description: `Date the destination was last updated`,
			},
			"url": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional:    true,
				Description: `HTTP endpoint of the destination`,
			},
		},
	}
}

func (r *DestinationResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *DestinationResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *DestinationResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var authMethod *shared.DestinationAuthMethodConfig
	if data.AuthMethod != nil {
		var hookdeckSignature *shared.HookdeckSignature
		if data.AuthMethod != nil {
			var config *shared.DestinationAuthMethodSignatureConfig
			if data.AuthMethod != nil {
				config = &shared.DestinationAuthMethodSignatureConfig{}
			}
			type1 := shared.HookdeckSignatureType(data.AuthMethod.Type.ValueString())
			hookdeckSignature = &shared.HookdeckSignature{
				Config: config,
				Type:   type1,
			}
		}
		if hookdeckSignature != nil {
			authMethod = &shared.DestinationAuthMethodConfig{
				HookdeckSignature: hookdeckSignature,
			}
		}
		var basicAuth *shared.BasicAuth
		if data.AuthMethod != nil {
			var config1 *shared.DestinationAuthMethodBasicAuthConfig
			if data.AuthMethod != nil {
				password := data.AuthMethod.Password.ValueString()
				username := data.AuthMethod.Username.ValueString()
				config1 = &shared.DestinationAuthMethodBasicAuthConfig{
					Password: password,
					Username: username,
				}
			}
			type2 := shared.BasicAuthType(data.AuthMethod.Type.ValueString())
			basicAuth = &shared.BasicAuth{
				Config: config1,
				Type:   type2,
			}
		}
		if basicAuth != nil {
			authMethod = &shared.DestinationAuthMethodConfig{
				BasicAuth: basicAuth,
			}
		}
		var apiKey *shared.APIKey
		if data.AuthMethod != nil {
			var config2 *shared.DestinationAuthMethodAPIKeyConfig
			if data.AuthMethod != nil {
				apiKey1 := data.AuthMethod.Config.ValueString()
				key := data.AuthMethod.Config.ValueString()
				to := new(shared.DestinationAuthMethodAPIKeyConfigTo)
				if !data.AuthMethod.Config.IsUnknown() && !data.AuthMethod.Config.IsNull() {
					*to = shared.DestinationAuthMethodAPIKeyConfigTo(data.AuthMethod.Config.ValueString())
				} else {
					to = nil
				}
				config2 = &shared.DestinationAuthMethodAPIKeyConfig{
					APIKey: apiKey1,
					Key:    key,
					To:     to,
				}
			}
			type3 := shared.APIKeyType(data.AuthMethod.Type.ValueString())
			apiKey = &shared.APIKey{
				Config: config2,
				Type:   type3,
			}
		}
		if apiKey != nil {
			authMethod = &shared.DestinationAuthMethodConfig{
				APIKey: apiKey,
			}
		}
		var bearerToken *shared.BearerToken
		if data.AuthMethod != nil {
			var config3 *shared.DestinationAuthMethodBearerTokenConfig
			token := data.AuthMethod.Config.ValueString()
			config3 = &shared.DestinationAuthMethodBearerTokenConfig{
				Token: token,
			}
			type4 := shared.BearerTokenType(data.AuthMethod.Type.ValueString())
			bearerToken = &shared.BearerToken{
				Config: config3,
				Type:   type4,
			}
		}
		if bearerToken != nil {
			authMethod = &shared.DestinationAuthMethodConfig{
				BearerToken: bearerToken,
			}
		}
		var customSignature *shared.CustomSignature
		if data.AuthMethod != nil {
			key1 := data.AuthMethod.Config.ValueString()
			signingSecret := new(string)
			if !data.AuthMethod.Config.IsUnknown() && !data.AuthMethod.Config.IsNull() {
				*signingSecret = data.AuthMethod.Config.ValueString()
			} else {
				signingSecret = nil
			}
			config4 := shared.DestinationAuthMethodCustomSignatureConfig{
				Key:           key1,
				SigningSecret: signingSecret,
			}
			type5 := shared.CustomSignatureType(data.AuthMethod.Type.ValueString())
			customSignature = &shared.CustomSignature{
				Config: config4,
				Type:   type5,
			}
		}
		if customSignature != nil {
			authMethod = &shared.DestinationAuthMethodConfig{
				CustomSignature: customSignature,
			}
		}
	}
	cliPath := new(string)
	if !data.CliPath.IsUnknown() && !data.CliPath.IsNull() {
		*cliPath = data.CliPath.ValueString()
	} else {
		cliPath = nil
	}
	httpMethod := new(shared.DestinationHTTPMethod)
	if !data.HTTPMethod.IsUnknown() && !data.HTTPMethod.IsNull() {
		*httpMethod = shared.DestinationHTTPMethod(data.HTTPMethod.ValueString())
	} else {
		httpMethod = nil
	}
	name := data.Name.ValueString()
	pathForwardingDisabled := new(bool)
	if !data.PathForwardingDisabled.IsUnknown() && !data.PathForwardingDisabled.IsNull() {
		*pathForwardingDisabled = data.PathForwardingDisabled.ValueBool()
	} else {
		pathForwardingDisabled = nil
	}
	var rateLimit interface{}
	if data.RateLimit != nil {
	}
	rateLimitPeriod := new(operations.CreateDestinationRequestBodyRateLimitPeriod)
	if !data.RateLimitPeriod.IsUnknown() && !data.RateLimitPeriod.IsNull() {
		*rateLimitPeriod = operations.CreateDestinationRequestBodyRateLimitPeriod(data.RateLimitPeriod.ValueString())
	} else {
		rateLimitPeriod = nil
	}
	url := new(string)
	if !data.URL.IsUnknown() && !data.URL.IsNull() {
		*url = data.URL.ValueString()
	} else {
		url = nil
	}
	request := operations.CreateDestinationRequestBody{
		AuthMethod:             authMethod,
		CliPath:                cliPath,
		HTTPMethod:             httpMethod,
		Name:                   name,
		PathForwardingDisabled: pathForwardingDisabled,
		RateLimit:              rateLimit,
		RateLimitPeriod:        rateLimitPeriod,
		URL:                    url,
	}
	res, err := r.client.Destination.CreateDestination(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.Destination == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromCreateResponse(res.Destination)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *DestinationResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *DestinationResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	id := data.ID.ValueString()
	request := operations.GetDestinationRequest{
		ID: id,
	}
	res, err := r.client.Destination.GetDestination(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.Destination == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromGetResponse(res.Destination)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *DestinationResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *DestinationResourceModel
	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; all attributes marked as RequiresReplace

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *DestinationResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *DestinationResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	id := data.ID.ValueString()
	request := operations.DeleteDestinationRequest{
		ID: id,
	}
	res, err := r.client.Destination.DeleteDestination(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *DestinationResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)
}
