// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"hashicups/internal/sdk/pkg/models/shared"
	"math/big"
	"time"
)

func (r *ConnectionDataSourceModel) RefreshFromGetResponse(resp *shared.Connection) {
	if resp.ArchivedAt != nil {
		r.ArchivedAt = types.StringValue(resp.ArchivedAt.Format(time.RFC3339))
	} else {
		r.ArchivedAt = types.StringNull()
	}
	r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339))
	if resp.Destination.ArchivedAt != nil {
		r.Destination.ArchivedAt = types.StringValue(resp.Destination.ArchivedAt.Format(time.RFC3339))
	} else {
		r.Destination.ArchivedAt = types.StringNull()
	}
	if resp.Destination.AuthMethod == nil {
		r.Destination.AuthMethod = nil
	} else {
		r.Destination.AuthMethod = &DestinationAuthMethodConfig{}
		if resp.Destination.AuthMethod.HookdeckSignature != nil {
			r.Destination.AuthMethod.HookdeckSignature = &HookdeckSignature{}
			if r.Destination.AuthMethod.HookdeckSignature.Config == nil {
				r.Destination.AuthMethod.HookdeckSignature.Config = &DestinationAuthMethodSignatureConfig{}
			}
			if resp.Destination.AuthMethod.HookdeckSignature.Config == nil {
				r.Destination.AuthMethod.HookdeckSignature.Config = nil
			} else {
				r.Destination.AuthMethod.HookdeckSignature.Config = &DestinationAuthMethodSignatureConfig{}
			}
			r.Destination.AuthMethod.HookdeckSignature.Type = types.StringValue(string(resp.Destination.AuthMethod.HookdeckSignature.Type))
		}
		if resp.Destination.AuthMethod.BasicAuth != nil {
			r.Destination.AuthMethod.BasicAuth = &BasicAuth{}
			if r.Destination.AuthMethod.BasicAuth.Config == nil {
				r.Destination.AuthMethod.BasicAuth.Config = &DestinationAuthMethodBasicAuthConfig{}
			}
			if resp.Destination.AuthMethod.BasicAuth.Config == nil {
				r.Destination.AuthMethod.BasicAuth.Config = nil
			} else {
				r.Destination.AuthMethod.BasicAuth.Config = &DestinationAuthMethodBasicAuthConfig{}
				r.Destination.AuthMethod.BasicAuth.Config.Password = types.StringValue(resp.Destination.AuthMethod.BasicAuth.Config.Password)
				r.Destination.AuthMethod.BasicAuth.Config.Username = types.StringValue(resp.Destination.AuthMethod.BasicAuth.Config.Username)
			}
			r.Destination.AuthMethod.BasicAuth.Type = types.StringValue(string(resp.Destination.AuthMethod.BasicAuth.Type))
		}
		if resp.Destination.AuthMethod.APIKey != nil {
			r.Destination.AuthMethod.APIKey = &APIKey{}
			if r.Destination.AuthMethod.APIKey.Config == nil {
				r.Destination.AuthMethod.APIKey.Config = &DestinationAuthMethodAPIKeyConfig{}
			}
			if resp.Destination.AuthMethod.APIKey.Config == nil {
				r.Destination.AuthMethod.APIKey.Config = nil
			} else {
				r.Destination.AuthMethod.APIKey.Config = &DestinationAuthMethodAPIKeyConfig{}
				r.Destination.AuthMethod.APIKey.Config.APIKey = types.StringValue(resp.Destination.AuthMethod.APIKey.Config.APIKey)
				r.Destination.AuthMethod.APIKey.Config.Key = types.StringValue(resp.Destination.AuthMethod.APIKey.Config.Key)
				if resp.Destination.AuthMethod.APIKey.Config.To != nil {
					r.Destination.AuthMethod.APIKey.Config.To = types.StringValue(string(*resp.Destination.AuthMethod.APIKey.Config.To))
				} else {
					r.Destination.AuthMethod.APIKey.Config.To = types.StringNull()
				}
			}
			r.Destination.AuthMethod.APIKey.Type = types.StringValue(string(resp.Destination.AuthMethod.APIKey.Type))
		}
		if resp.Destination.AuthMethod.BearerToken != nil {
			r.Destination.AuthMethod.BearerToken = &BearerToken{}
			if r.Destination.AuthMethod.BearerToken.Config == nil {
				r.Destination.AuthMethod.BearerToken.Config = &DestinationAuthMethodBearerTokenConfig{}
			}
			if resp.Destination.AuthMethod.BearerToken.Config == nil {
				r.Destination.AuthMethod.BearerToken.Config = nil
			} else {
				r.Destination.AuthMethod.BearerToken.Config = &DestinationAuthMethodBearerTokenConfig{}
				r.Destination.AuthMethod.BearerToken.Config.Token = types.StringValue(resp.Destination.AuthMethod.BearerToken.Config.Token)
			}
			r.Destination.AuthMethod.BearerToken.Type = types.StringValue(string(resp.Destination.AuthMethod.BearerToken.Type))
		}
		if resp.Destination.AuthMethod.CustomSignature != nil {
			r.Destination.AuthMethod.CustomSignature = &CustomSignature{}
			r.Destination.AuthMethod.CustomSignature.Config.Key = types.StringValue(resp.Destination.AuthMethod.CustomSignature.Config.Key)
			if resp.Destination.AuthMethod.CustomSignature.Config.SigningSecret != nil {
				r.Destination.AuthMethod.CustomSignature.Config.SigningSecret = types.StringValue(*resp.Destination.AuthMethod.CustomSignature.Config.SigningSecret)
			} else {
				r.Destination.AuthMethod.CustomSignature.Config.SigningSecret = types.StringNull()
			}
			r.Destination.AuthMethod.CustomSignature.Type = types.StringValue(string(resp.Destination.AuthMethod.CustomSignature.Type))
		}
	}
	if resp.Destination.CliPath != nil {
		r.Destination.CliPath = types.StringValue(*resp.Destination.CliPath)
	} else {
		r.Destination.CliPath = types.StringNull()
	}
	r.Destination.CreatedAt = types.StringValue(resp.Destination.CreatedAt.Format(time.RFC3339))
	if resp.Destination.HTTPMethod != nil {
		r.Destination.HTTPMethod = types.StringValue(string(*resp.Destination.HTTPMethod))
	} else {
		r.Destination.HTTPMethod = types.StringNull()
	}
	r.Destination.ID = types.StringValue(resp.Destination.ID)
	r.Destination.Name = types.StringValue(resp.Destination.Name)
	if resp.Destination.PathForwardingDisabled != nil {
		r.Destination.PathForwardingDisabled = types.BoolValue(*resp.Destination.PathForwardingDisabled)
	} else {
		r.Destination.PathForwardingDisabled = types.BoolNull()
	}
	if resp.Destination.RateLimit != nil {
		r.Destination.RateLimit = types.Int64Value(*resp.Destination.RateLimit)
	} else {
		r.Destination.RateLimit = types.Int64Null()
	}
	if resp.Destination.RateLimitPeriod != nil {
		r.Destination.RateLimitPeriod = types.StringValue(string(*resp.Destination.RateLimitPeriod))
	} else {
		r.Destination.RateLimitPeriod = types.StringNull()
	}
	r.Destination.TeamID = types.StringValue(resp.Destination.TeamID)
	r.Destination.UpdatedAt = types.StringValue(resp.Destination.UpdatedAt.Format(time.RFC3339))
	if resp.Destination.URL != nil {
		r.Destination.URL = types.StringValue(*resp.Destination.URL)
	} else {
		r.Destination.URL = types.StringNull()
	}
	r.ID = types.StringValue(resp.ID)
	r.Name = types.StringValue(resp.Name)
	if resp.PausedAt != nil {
		r.PausedAt = types.StringValue(resp.PausedAt.Format(time.RFC3339))
	} else {
		r.PausedAt = types.StringNull()
	}
	r.ResolvedRules = nil
	for _, resolvedRulesItem := range resp.ResolvedRules {
		var resolvedRules1 Rule3
		if resolvedRulesItem.RetryRule != nil {
			resolvedRules1.RetryRule = &RetryRule{}
			if resolvedRulesItem.RetryRule.Count != nil {
				resolvedRules1.RetryRule.Count = types.Int64Value(*resolvedRulesItem.RetryRule.Count)
			} else {
				resolvedRules1.RetryRule.Count = types.Int64Null()
			}
			if resolvedRulesItem.RetryRule.Interval != nil {
				resolvedRules1.RetryRule.Interval = types.Int64Value(*resolvedRulesItem.RetryRule.Interval)
			} else {
				resolvedRules1.RetryRule.Interval = types.Int64Null()
			}
			resolvedRules1.RetryRule.Strategy = types.StringValue(string(resolvedRulesItem.RetryRule.Strategy))
			resolvedRules1.RetryRule.Type = types.StringValue(string(resolvedRulesItem.RetryRule.Type))
		}
		if resolvedRulesItem.AlertRule != nil {
			resolvedRules1.AlertRule = &AlertRule{}
			resolvedRules1.AlertRule.Strategy = types.StringValue(string(resolvedRulesItem.AlertRule.Strategy))
			resolvedRules1.AlertRule.Type = types.StringValue(string(resolvedRulesItem.AlertRule.Type))
		}
		if resolvedRulesItem.FilterRule != nil {
			resolvedRules1.FilterRule = &FilterRule3{}
			if resolvedRulesItem.FilterRule.Body == nil {
				resolvedRules1.FilterRule.Body = nil
			} else {
				resolvedRules1.FilterRule.Body = &ConnectionFilterProperty13{}
				if resolvedRulesItem.FilterRule.Body.Str != nil {
					if resolvedRulesItem.FilterRule.Body.Str != nil {
						resolvedRules1.FilterRule.Body.Str = types.StringValue(*resolvedRulesItem.FilterRule.Body.Str)
					} else {
						resolvedRules1.FilterRule.Body.Str = types.StringNull()
					}
				}
				if resolvedRulesItem.FilterRule.Body.Float32 != nil {
					if resolvedRulesItem.FilterRule.Body.Float32 != nil {
						resolvedRules1.FilterRule.Body.Float32 = types.NumberValue(big.NewFloat(float64(*resolvedRulesItem.FilterRule.Body.Float32)))
					} else {
						resolvedRules1.FilterRule.Body.Float32 = types.NumberNull()
					}
				}
				if resolvedRulesItem.FilterRule.Body.Boolean != nil {
					if resolvedRulesItem.FilterRule.Body.Boolean != nil {
						resolvedRules1.FilterRule.Body.Boolean = types.BoolValue(*resolvedRulesItem.FilterRule.Body.Boolean)
					} else {
						resolvedRules1.FilterRule.Body.Boolean = types.BoolNull()
					}
				}
				if resolvedRulesItem.FilterRule.Body.ConnectionFilterProperty4 != nil {
					resolvedRules1.FilterRule.Body.ConnectionFilterProperty4 = &ConnectionFilterProperty4{}
				}
			}
			if resolvedRulesItem.FilterRule.Headers == nil {
				resolvedRules1.FilterRule.Headers = nil
			} else {
				resolvedRules1.FilterRule.Headers = &ConnectionFilterProperty14{}
				if resolvedRulesItem.FilterRule.Headers.Str != nil {
					if resolvedRulesItem.FilterRule.Headers.Str != nil {
						resolvedRules1.FilterRule.Headers.Str = types.StringValue(*resolvedRulesItem.FilterRule.Headers.Str)
					} else {
						resolvedRules1.FilterRule.Headers.Str = types.StringNull()
					}
				}
				if resolvedRulesItem.FilterRule.Headers.Float32 != nil {
					if resolvedRulesItem.FilterRule.Headers.Float32 != nil {
						resolvedRules1.FilterRule.Headers.Float32 = types.NumberValue(big.NewFloat(float64(*resolvedRulesItem.FilterRule.Headers.Float32)))
					} else {
						resolvedRules1.FilterRule.Headers.Float32 = types.NumberNull()
					}
				}
				if resolvedRulesItem.FilterRule.Headers.Boolean != nil {
					if resolvedRulesItem.FilterRule.Headers.Boolean != nil {
						resolvedRules1.FilterRule.Headers.Boolean = types.BoolValue(*resolvedRulesItem.FilterRule.Headers.Boolean)
					} else {
						resolvedRules1.FilterRule.Headers.Boolean = types.BoolNull()
					}
				}
				if resolvedRulesItem.FilterRule.Headers.ConnectionFilterProperty4 != nil {
					resolvedRules1.FilterRule.Headers.ConnectionFilterProperty4 = &ConnectionFilterProperty4{}
				}
			}
			if resolvedRulesItem.FilterRule.Path == nil {
				resolvedRules1.FilterRule.Path = nil
			} else {
				resolvedRules1.FilterRule.Path = &ConnectionFilterProperty15{}
				if resolvedRulesItem.FilterRule.Path.Str != nil {
					if resolvedRulesItem.FilterRule.Path.Str != nil {
						resolvedRules1.FilterRule.Path.Str = types.StringValue(*resolvedRulesItem.FilterRule.Path.Str)
					} else {
						resolvedRules1.FilterRule.Path.Str = types.StringNull()
					}
				}
				if resolvedRulesItem.FilterRule.Path.Float32 != nil {
					if resolvedRulesItem.FilterRule.Path.Float32 != nil {
						resolvedRules1.FilterRule.Path.Float32 = types.NumberValue(big.NewFloat(float64(*resolvedRulesItem.FilterRule.Path.Float32)))
					} else {
						resolvedRules1.FilterRule.Path.Float32 = types.NumberNull()
					}
				}
				if resolvedRulesItem.FilterRule.Path.Boolean != nil {
					if resolvedRulesItem.FilterRule.Path.Boolean != nil {
						resolvedRules1.FilterRule.Path.Boolean = types.BoolValue(*resolvedRulesItem.FilterRule.Path.Boolean)
					} else {
						resolvedRules1.FilterRule.Path.Boolean = types.BoolNull()
					}
				}
				if resolvedRulesItem.FilterRule.Path.ConnectionFilterProperty4 != nil {
					resolvedRules1.FilterRule.Path.ConnectionFilterProperty4 = &ConnectionFilterProperty4{}
				}
			}
			if resolvedRulesItem.FilterRule.Query == nil {
				resolvedRules1.FilterRule.Query = nil
			} else {
				resolvedRules1.FilterRule.Query = &ConnectionFilterProperty16{}
				if resolvedRulesItem.FilterRule.Query.Str != nil {
					if resolvedRulesItem.FilterRule.Query.Str != nil {
						resolvedRules1.FilterRule.Query.Str = types.StringValue(*resolvedRulesItem.FilterRule.Query.Str)
					} else {
						resolvedRules1.FilterRule.Query.Str = types.StringNull()
					}
				}
				if resolvedRulesItem.FilterRule.Query.Float32 != nil {
					if resolvedRulesItem.FilterRule.Query.Float32 != nil {
						resolvedRules1.FilterRule.Query.Float32 = types.NumberValue(big.NewFloat(float64(*resolvedRulesItem.FilterRule.Query.Float32)))
					} else {
						resolvedRules1.FilterRule.Query.Float32 = types.NumberNull()
					}
				}
				if resolvedRulesItem.FilterRule.Query.Boolean != nil {
					if resolvedRulesItem.FilterRule.Query.Boolean != nil {
						resolvedRules1.FilterRule.Query.Boolean = types.BoolValue(*resolvedRulesItem.FilterRule.Query.Boolean)
					} else {
						resolvedRules1.FilterRule.Query.Boolean = types.BoolNull()
					}
				}
				if resolvedRulesItem.FilterRule.Query.ConnectionFilterProperty4 != nil {
					resolvedRules1.FilterRule.Query.ConnectionFilterProperty4 = &ConnectionFilterProperty4{}
				}
			}
			resolvedRules1.FilterRule.Type = types.StringValue(string(resolvedRulesItem.FilterRule.Type))
		}
		if resolvedRulesItem.TransformRule != nil {
			resolvedRules1.TransformRule = &TransformRule{}
			if resolvedRulesItem.TransformRule.TransformReference != nil {
				resolvedRules1.TransformRule.TransformReference = &TransformReference{}
				resolvedRules1.TransformRule.TransformReference.TransformationID = types.StringValue(resolvedRulesItem.TransformRule.TransformReference.TransformationID)
				resolvedRules1.TransformRule.TransformReference.Type = types.StringValue(string(resolvedRulesItem.TransformRule.TransformReference.Type))
			}
			if resolvedRulesItem.TransformRule.TransformFull != nil {
				resolvedRules1.TransformRule.TransformFull = &TransformFull{}
				if resolvedRules1.TransformRule.TransformFull.Transformation == nil {
					resolvedRules1.TransformRule.TransformFull.Transformation = &TransformFullTransformation{}
				}
				if resolvedRulesItem.TransformRule.TransformFull.Transformation == nil {
					resolvedRules1.TransformRule.TransformFull.Transformation = nil
				} else {
					resolvedRules1.TransformRule.TransformFull.Transformation = &TransformFullTransformation{}
					resolvedRules1.TransformRule.TransformFull.Transformation.Code = types.StringValue(resolvedRulesItem.TransformRule.TransformFull.Transformation.Code)
					if resolvedRules1.TransformRule.TransformFull.Transformation.Env == nil && len(resolvedRulesItem.TransformRule.TransformFull.Transformation.Env) > 0 {
						resolvedRules1.TransformRule.TransformFull.Transformation.Env = make(map[string]types.String)
						for key2, value := range resolvedRulesItem.TransformRule.TransformFull.Transformation.Env {
							resolvedRules1.TransformRule.TransformFull.Transformation.Env[key2] = types.StringValue(value)
						}
					}
					resolvedRules1.TransformRule.TransformFull.Transformation.Name = types.StringValue(resolvedRulesItem.TransformRule.TransformFull.Transformation.Name)
				}
				if resolvedRulesItem.TransformRule.TransformFull.TransformationID != nil {
					resolvedRules1.TransformRule.TransformFull.TransformationID = types.StringValue(*resolvedRulesItem.TransformRule.TransformFull.TransformationID)
				} else {
					resolvedRules1.TransformRule.TransformFull.TransformationID = types.StringNull()
				}
				resolvedRules1.TransformRule.TransformFull.Type = types.StringValue(string(resolvedRulesItem.TransformRule.TransformFull.Type))
			}
		}
		if resolvedRulesItem.DelayRule != nil {
			resolvedRules1.DelayRule = &DelayRule{}
			resolvedRules1.DelayRule.Delay = types.Int64Value(resolvedRulesItem.DelayRule.Delay)
			resolvedRules1.DelayRule.Type = types.StringValue(string(resolvedRulesItem.DelayRule.Type))
		}
		r.ResolvedRules = append(r.ResolvedRules, resolvedRules1)
	}
	r.Rules = nil
	for _, rulesItem := range resp.Rules {
		var rules1 Rule4
		if rulesItem.RetryRule != nil {
			rules1.RetryRule = &RetryRule{}
			if rulesItem.RetryRule.Count != nil {
				rules1.RetryRule.Count = types.Int64Value(*rulesItem.RetryRule.Count)
			} else {
				rules1.RetryRule.Count = types.Int64Null()
			}
			if rulesItem.RetryRule.Interval != nil {
				rules1.RetryRule.Interval = types.Int64Value(*rulesItem.RetryRule.Interval)
			} else {
				rules1.RetryRule.Interval = types.Int64Null()
			}
			rules1.RetryRule.Strategy = types.StringValue(string(rulesItem.RetryRule.Strategy))
			rules1.RetryRule.Type = types.StringValue(string(rulesItem.RetryRule.Type))
		}
		if rulesItem.AlertRule != nil {
			rules1.AlertRule = &AlertRule{}
			rules1.AlertRule.Strategy = types.StringValue(string(rulesItem.AlertRule.Strategy))
			rules1.AlertRule.Type = types.StringValue(string(rulesItem.AlertRule.Type))
		}
		if rulesItem.FilterRule != nil {
			rules1.FilterRule = &FilterRule4{}
			if rulesItem.FilterRule.Body == nil {
				rules1.FilterRule.Body = nil
			} else {
				rules1.FilterRule.Body = &ConnectionFilterProperty17{}
				if rulesItem.FilterRule.Body.Str != nil {
					if rulesItem.FilterRule.Body.Str != nil {
						rules1.FilterRule.Body.Str = types.StringValue(*rulesItem.FilterRule.Body.Str)
					} else {
						rules1.FilterRule.Body.Str = types.StringNull()
					}
				}
				if rulesItem.FilterRule.Body.Float32 != nil {
					if rulesItem.FilterRule.Body.Float32 != nil {
						rules1.FilterRule.Body.Float32 = types.NumberValue(big.NewFloat(float64(*rulesItem.FilterRule.Body.Float32)))
					} else {
						rules1.FilterRule.Body.Float32 = types.NumberNull()
					}
				}
				if rulesItem.FilterRule.Body.Boolean != nil {
					if rulesItem.FilterRule.Body.Boolean != nil {
						rules1.FilterRule.Body.Boolean = types.BoolValue(*rulesItem.FilterRule.Body.Boolean)
					} else {
						rules1.FilterRule.Body.Boolean = types.BoolNull()
					}
				}
				if rulesItem.FilterRule.Body.ConnectionFilterProperty4 != nil {
					rules1.FilterRule.Body.ConnectionFilterProperty4 = &ConnectionFilterProperty4{}
				}
			}
			if rulesItem.FilterRule.Headers == nil {
				rules1.FilterRule.Headers = nil
			} else {
				rules1.FilterRule.Headers = &ConnectionFilterProperty18{}
				if rulesItem.FilterRule.Headers.Str != nil {
					if rulesItem.FilterRule.Headers.Str != nil {
						rules1.FilterRule.Headers.Str = types.StringValue(*rulesItem.FilterRule.Headers.Str)
					} else {
						rules1.FilterRule.Headers.Str = types.StringNull()
					}
				}
				if rulesItem.FilterRule.Headers.Float32 != nil {
					if rulesItem.FilterRule.Headers.Float32 != nil {
						rules1.FilterRule.Headers.Float32 = types.NumberValue(big.NewFloat(float64(*rulesItem.FilterRule.Headers.Float32)))
					} else {
						rules1.FilterRule.Headers.Float32 = types.NumberNull()
					}
				}
				if rulesItem.FilterRule.Headers.Boolean != nil {
					if rulesItem.FilterRule.Headers.Boolean != nil {
						rules1.FilterRule.Headers.Boolean = types.BoolValue(*rulesItem.FilterRule.Headers.Boolean)
					} else {
						rules1.FilterRule.Headers.Boolean = types.BoolNull()
					}
				}
				if rulesItem.FilterRule.Headers.ConnectionFilterProperty4 != nil {
					rules1.FilterRule.Headers.ConnectionFilterProperty4 = &ConnectionFilterProperty4{}
				}
			}
			if rulesItem.FilterRule.Path == nil {
				rules1.FilterRule.Path = nil
			} else {
				rules1.FilterRule.Path = &ConnectionFilterProperty19{}
				if rulesItem.FilterRule.Path.Str != nil {
					if rulesItem.FilterRule.Path.Str != nil {
						rules1.FilterRule.Path.Str = types.StringValue(*rulesItem.FilterRule.Path.Str)
					} else {
						rules1.FilterRule.Path.Str = types.StringNull()
					}
				}
				if rulesItem.FilterRule.Path.Float32 != nil {
					if rulesItem.FilterRule.Path.Float32 != nil {
						rules1.FilterRule.Path.Float32 = types.NumberValue(big.NewFloat(float64(*rulesItem.FilterRule.Path.Float32)))
					} else {
						rules1.FilterRule.Path.Float32 = types.NumberNull()
					}
				}
				if rulesItem.FilterRule.Path.Boolean != nil {
					if rulesItem.FilterRule.Path.Boolean != nil {
						rules1.FilterRule.Path.Boolean = types.BoolValue(*rulesItem.FilterRule.Path.Boolean)
					} else {
						rules1.FilterRule.Path.Boolean = types.BoolNull()
					}
				}
				if rulesItem.FilterRule.Path.ConnectionFilterProperty4 != nil {
					rules1.FilterRule.Path.ConnectionFilterProperty4 = &ConnectionFilterProperty4{}
				}
			}
			if rulesItem.FilterRule.Query == nil {
				rules1.FilterRule.Query = nil
			} else {
				rules1.FilterRule.Query = &ConnectionFilterProperty20{}
				if rulesItem.FilterRule.Query.Str != nil {
					if rulesItem.FilterRule.Query.Str != nil {
						rules1.FilterRule.Query.Str = types.StringValue(*rulesItem.FilterRule.Query.Str)
					} else {
						rules1.FilterRule.Query.Str = types.StringNull()
					}
				}
				if rulesItem.FilterRule.Query.Float32 != nil {
					if rulesItem.FilterRule.Query.Float32 != nil {
						rules1.FilterRule.Query.Float32 = types.NumberValue(big.NewFloat(float64(*rulesItem.FilterRule.Query.Float32)))
					} else {
						rules1.FilterRule.Query.Float32 = types.NumberNull()
					}
				}
				if rulesItem.FilterRule.Query.Boolean != nil {
					if rulesItem.FilterRule.Query.Boolean != nil {
						rules1.FilterRule.Query.Boolean = types.BoolValue(*rulesItem.FilterRule.Query.Boolean)
					} else {
						rules1.FilterRule.Query.Boolean = types.BoolNull()
					}
				}
				if rulesItem.FilterRule.Query.ConnectionFilterProperty4 != nil {
					rules1.FilterRule.Query.ConnectionFilterProperty4 = &ConnectionFilterProperty4{}
				}
			}
			rules1.FilterRule.Type = types.StringValue(string(rulesItem.FilterRule.Type))
		}
		if rulesItem.TransformRule != nil {
			rules1.TransformRule = &TransformRule{}
			if rulesItem.TransformRule.TransformReference != nil {
				rules1.TransformRule.TransformReference = &TransformReference{}
				rules1.TransformRule.TransformReference.TransformationID = types.StringValue(rulesItem.TransformRule.TransformReference.TransformationID)
				rules1.TransformRule.TransformReference.Type = types.StringValue(string(rulesItem.TransformRule.TransformReference.Type))
			}
			if rulesItem.TransformRule.TransformFull != nil {
				rules1.TransformRule.TransformFull = &TransformFull{}
				if rules1.TransformRule.TransformFull.Transformation == nil {
					rules1.TransformRule.TransformFull.Transformation = &TransformFullTransformation{}
				}
				if rulesItem.TransformRule.TransformFull.Transformation == nil {
					rules1.TransformRule.TransformFull.Transformation = nil
				} else {
					rules1.TransformRule.TransformFull.Transformation = &TransformFullTransformation{}
					rules1.TransformRule.TransformFull.Transformation.Code = types.StringValue(rulesItem.TransformRule.TransformFull.Transformation.Code)
					if rules1.TransformRule.TransformFull.Transformation.Env == nil && len(rulesItem.TransformRule.TransformFull.Transformation.Env) > 0 {
						rules1.TransformRule.TransformFull.Transformation.Env = make(map[string]types.String)
						for key3, value1 := range rulesItem.TransformRule.TransformFull.Transformation.Env {
							rules1.TransformRule.TransformFull.Transformation.Env[key3] = types.StringValue(value1)
						}
					}
					rules1.TransformRule.TransformFull.Transformation.Name = types.StringValue(rulesItem.TransformRule.TransformFull.Transformation.Name)
				}
				if rulesItem.TransformRule.TransformFull.TransformationID != nil {
					rules1.TransformRule.TransformFull.TransformationID = types.StringValue(*rulesItem.TransformRule.TransformFull.TransformationID)
				} else {
					rules1.TransformRule.TransformFull.TransformationID = types.StringNull()
				}
				rules1.TransformRule.TransformFull.Type = types.StringValue(string(rulesItem.TransformRule.TransformFull.Type))
			}
		}
		if rulesItem.DelayRule != nil {
			rules1.DelayRule = &DelayRule{}
			rules1.DelayRule.Delay = types.Int64Value(rulesItem.DelayRule.Delay)
			rules1.DelayRule.Type = types.StringValue(string(rulesItem.DelayRule.Type))
		}
		r.Rules = append(r.Rules, rules1)
	}
	if r.Ruleset == nil {
		r.Ruleset = &Ruleset1{}
	}
	if resp.Ruleset == nil {
		r.Ruleset = nil
	} else {
		r.Ruleset = &Ruleset1{}
		if resp.Ruleset.ArchivedAt != nil {
			r.Ruleset.ArchivedAt = types.StringValue(resp.Ruleset.ArchivedAt.Format(time.RFC3339))
		} else {
			r.Ruleset.ArchivedAt = types.StringNull()
		}
		r.Ruleset.CreatedAt = types.StringValue(resp.Ruleset.CreatedAt.Format(time.RFC3339))
		r.Ruleset.ID = types.StringValue(resp.Ruleset.ID)
		r.Ruleset.IsTeamDefault = types.BoolValue(resp.Ruleset.IsTeamDefault)
		r.Ruleset.Name = types.StringValue(resp.Ruleset.Name)
		r.Ruleset.Rules = nil
		for _, rulesItem1 := range resp.Ruleset.Rules {
			var rules3 Rule5
			if rulesItem1.RetryRule != nil {
				rules3.RetryRule = &RetryRule{}
				if rulesItem1.RetryRule.Count != nil {
					rules3.RetryRule.Count = types.Int64Value(*rulesItem1.RetryRule.Count)
				} else {
					rules3.RetryRule.Count = types.Int64Null()
				}
				if rulesItem1.RetryRule.Interval != nil {
					rules3.RetryRule.Interval = types.Int64Value(*rulesItem1.RetryRule.Interval)
				} else {
					rules3.RetryRule.Interval = types.Int64Null()
				}
				rules3.RetryRule.Strategy = types.StringValue(string(rulesItem1.RetryRule.Strategy))
				rules3.RetryRule.Type = types.StringValue(string(rulesItem1.RetryRule.Type))
			}
			if rulesItem1.AlertRule != nil {
				rules3.AlertRule = &AlertRule{}
				rules3.AlertRule.Strategy = types.StringValue(string(rulesItem1.AlertRule.Strategy))
				rules3.AlertRule.Type = types.StringValue(string(rulesItem1.AlertRule.Type))
			}
			if rulesItem1.FilterRule != nil {
				rules3.FilterRule = &FilterRule5{}
				if rulesItem1.FilterRule.Body == nil {
					rules3.FilterRule.Body = nil
				} else {
					rules3.FilterRule.Body = &ConnectionFilterProperty21{}
					if rulesItem1.FilterRule.Body.Str != nil {
						if rulesItem1.FilterRule.Body.Str != nil {
							rules3.FilterRule.Body.Str = types.StringValue(*rulesItem1.FilterRule.Body.Str)
						} else {
							rules3.FilterRule.Body.Str = types.StringNull()
						}
					}
					if rulesItem1.FilterRule.Body.Float32 != nil {
						if rulesItem1.FilterRule.Body.Float32 != nil {
							rules3.FilterRule.Body.Float32 = types.NumberValue(big.NewFloat(float64(*rulesItem1.FilterRule.Body.Float32)))
						} else {
							rules3.FilterRule.Body.Float32 = types.NumberNull()
						}
					}
					if rulesItem1.FilterRule.Body.Boolean != nil {
						if rulesItem1.FilterRule.Body.Boolean != nil {
							rules3.FilterRule.Body.Boolean = types.BoolValue(*rulesItem1.FilterRule.Body.Boolean)
						} else {
							rules3.FilterRule.Body.Boolean = types.BoolNull()
						}
					}
					if rulesItem1.FilterRule.Body.ConnectionFilterProperty4 != nil {
						rules3.FilterRule.Body.ConnectionFilterProperty4 = &ConnectionFilterProperty4{}
					}
				}
				if rulesItem1.FilterRule.Headers == nil {
					rules3.FilterRule.Headers = nil
				} else {
					rules3.FilterRule.Headers = &ConnectionFilterProperty22{}
					if rulesItem1.FilterRule.Headers.Str != nil {
						if rulesItem1.FilterRule.Headers.Str != nil {
							rules3.FilterRule.Headers.Str = types.StringValue(*rulesItem1.FilterRule.Headers.Str)
						} else {
							rules3.FilterRule.Headers.Str = types.StringNull()
						}
					}
					if rulesItem1.FilterRule.Headers.Float32 != nil {
						if rulesItem1.FilterRule.Headers.Float32 != nil {
							rules3.FilterRule.Headers.Float32 = types.NumberValue(big.NewFloat(float64(*rulesItem1.FilterRule.Headers.Float32)))
						} else {
							rules3.FilterRule.Headers.Float32 = types.NumberNull()
						}
					}
					if rulesItem1.FilterRule.Headers.Boolean != nil {
						if rulesItem1.FilterRule.Headers.Boolean != nil {
							rules3.FilterRule.Headers.Boolean = types.BoolValue(*rulesItem1.FilterRule.Headers.Boolean)
						} else {
							rules3.FilterRule.Headers.Boolean = types.BoolNull()
						}
					}
					if rulesItem1.FilterRule.Headers.ConnectionFilterProperty4 != nil {
						rules3.FilterRule.Headers.ConnectionFilterProperty4 = &ConnectionFilterProperty4{}
					}
				}
				if rulesItem1.FilterRule.Path == nil {
					rules3.FilterRule.Path = nil
				} else {
					rules3.FilterRule.Path = &ConnectionFilterProperty23{}
					if rulesItem1.FilterRule.Path.Str != nil {
						if rulesItem1.FilterRule.Path.Str != nil {
							rules3.FilterRule.Path.Str = types.StringValue(*rulesItem1.FilterRule.Path.Str)
						} else {
							rules3.FilterRule.Path.Str = types.StringNull()
						}
					}
					if rulesItem1.FilterRule.Path.Float32 != nil {
						if rulesItem1.FilterRule.Path.Float32 != nil {
							rules3.FilterRule.Path.Float32 = types.NumberValue(big.NewFloat(float64(*rulesItem1.FilterRule.Path.Float32)))
						} else {
							rules3.FilterRule.Path.Float32 = types.NumberNull()
						}
					}
					if rulesItem1.FilterRule.Path.Boolean != nil {
						if rulesItem1.FilterRule.Path.Boolean != nil {
							rules3.FilterRule.Path.Boolean = types.BoolValue(*rulesItem1.FilterRule.Path.Boolean)
						} else {
							rules3.FilterRule.Path.Boolean = types.BoolNull()
						}
					}
					if rulesItem1.FilterRule.Path.ConnectionFilterProperty4 != nil {
						rules3.FilterRule.Path.ConnectionFilterProperty4 = &ConnectionFilterProperty4{}
					}
				}
				if rulesItem1.FilterRule.Query == nil {
					rules3.FilterRule.Query = nil
				} else {
					rules3.FilterRule.Query = &ConnectionFilterProperty24{}
					if rulesItem1.FilterRule.Query.Str != nil {
						if rulesItem1.FilterRule.Query.Str != nil {
							rules3.FilterRule.Query.Str = types.StringValue(*rulesItem1.FilterRule.Query.Str)
						} else {
							rules3.FilterRule.Query.Str = types.StringNull()
						}
					}
					if rulesItem1.FilterRule.Query.Float32 != nil {
						if rulesItem1.FilterRule.Query.Float32 != nil {
							rules3.FilterRule.Query.Float32 = types.NumberValue(big.NewFloat(float64(*rulesItem1.FilterRule.Query.Float32)))
						} else {
							rules3.FilterRule.Query.Float32 = types.NumberNull()
						}
					}
					if rulesItem1.FilterRule.Query.Boolean != nil {
						if rulesItem1.FilterRule.Query.Boolean != nil {
							rules3.FilterRule.Query.Boolean = types.BoolValue(*rulesItem1.FilterRule.Query.Boolean)
						} else {
							rules3.FilterRule.Query.Boolean = types.BoolNull()
						}
					}
					if rulesItem1.FilterRule.Query.ConnectionFilterProperty4 != nil {
						rules3.FilterRule.Query.ConnectionFilterProperty4 = &ConnectionFilterProperty4{}
					}
				}
				rules3.FilterRule.Type = types.StringValue(string(rulesItem1.FilterRule.Type))
			}
			if rulesItem1.TransformRule != nil {
				rules3.TransformRule = &TransformRule{}
				if rulesItem1.TransformRule.TransformReference != nil {
					rules3.TransformRule.TransformReference = &TransformReference{}
					rules3.TransformRule.TransformReference.TransformationID = types.StringValue(rulesItem1.TransformRule.TransformReference.TransformationID)
					rules3.TransformRule.TransformReference.Type = types.StringValue(string(rulesItem1.TransformRule.TransformReference.Type))
				}
				if rulesItem1.TransformRule.TransformFull != nil {
					rules3.TransformRule.TransformFull = &TransformFull{}
					if rules3.TransformRule.TransformFull.Transformation == nil {
						rules3.TransformRule.TransformFull.Transformation = &TransformFullTransformation{}
					}
					if rulesItem1.TransformRule.TransformFull.Transformation == nil {
						rules3.TransformRule.TransformFull.Transformation = nil
					} else {
						rules3.TransformRule.TransformFull.Transformation = &TransformFullTransformation{}
						rules3.TransformRule.TransformFull.Transformation.Code = types.StringValue(rulesItem1.TransformRule.TransformFull.Transformation.Code)
						if rules3.TransformRule.TransformFull.Transformation.Env == nil && len(rulesItem1.TransformRule.TransformFull.Transformation.Env) > 0 {
							rules3.TransformRule.TransformFull.Transformation.Env = make(map[string]types.String)
							for key4, value2 := range rulesItem1.TransformRule.TransformFull.Transformation.Env {
								rules3.TransformRule.TransformFull.Transformation.Env[key4] = types.StringValue(value2)
							}
						}
						rules3.TransformRule.TransformFull.Transformation.Name = types.StringValue(rulesItem1.TransformRule.TransformFull.Transformation.Name)
					}
					if rulesItem1.TransformRule.TransformFull.TransformationID != nil {
						rules3.TransformRule.TransformFull.TransformationID = types.StringValue(*rulesItem1.TransformRule.TransformFull.TransformationID)
					} else {
						rules3.TransformRule.TransformFull.TransformationID = types.StringNull()
					}
					rules3.TransformRule.TransformFull.Type = types.StringValue(string(rulesItem1.TransformRule.TransformFull.Type))
				}
			}
			if rulesItem1.DelayRule != nil {
				rules3.DelayRule = &DelayRule{}
				rules3.DelayRule.Delay = types.Int64Value(rulesItem1.DelayRule.Delay)
				rules3.DelayRule.Type = types.StringValue(string(rulesItem1.DelayRule.Type))
			}
			r.Ruleset.Rules = append(r.Ruleset.Rules, rules3)
		}
		r.Ruleset.TeamID = types.StringValue(resp.Ruleset.TeamID)
		r.Ruleset.UpdatedAt = types.StringValue(resp.Ruleset.UpdatedAt.Format(time.RFC3339))
	}
	r.Source.AllowedHTTPMethods = nil
	for _, v := range resp.Source.AllowedHTTPMethods {
		r.Source.AllowedHTTPMethods = append(r.Source.AllowedHTTPMethods, types.StringValue(string(v)))
	}
	if resp.Source.ArchivedAt != nil {
		r.Source.ArchivedAt = types.StringValue(resp.Source.ArchivedAt.Format(time.RFC3339))
	} else {
		r.Source.ArchivedAt = types.StringNull()
	}
	r.Source.CreatedAt = types.StringValue(resp.Source.CreatedAt.Format(time.RFC3339))
	if r.Source.CustomResponse == nil {
		r.Source.CustomResponse = &SourceCustomResponse{}
	}
	if resp.Source.CustomResponse == nil {
		r.Source.CustomResponse = nil
	} else {
		r.Source.CustomResponse = &SourceCustomResponse{}
		r.Source.CustomResponse.Body = types.StringValue(resp.Source.CustomResponse.Body)
		r.Source.CustomResponse.ContentType = types.StringValue(string(resp.Source.CustomResponse.ContentType))
	}
	r.Source.ID = types.StringValue(resp.Source.ID)
	if r.Source.Integration == nil {
		r.Source.Integration = &SourceIntegration{}
	}
	if resp.Source.Integration == nil {
		r.Source.Integration = nil
	} else {
		r.Source.Integration = &SourceIntegration{}
		r.Source.Integration.Features = nil
		for _, v := range resp.Source.Integration.Features {
			r.Source.Integration.Features = append(r.Source.Integration.Features, types.StringValue(string(v)))
		}
		r.Source.Integration.ID = types.StringValue(resp.Source.Integration.ID)
		r.Source.Integration.Label = types.StringValue(resp.Source.Integration.Label)
		r.Source.Integration.Provider = types.StringValue(string(resp.Source.Integration.Provider))
	}
	if resp.Source.IntegrationID != nil {
		r.Source.IntegrationID = types.StringValue(*resp.Source.IntegrationID)
	} else {
		r.Source.IntegrationID = types.StringNull()
	}
	r.Source.Name = types.StringValue(resp.Source.Name)
	r.Source.TeamID = types.StringValue(resp.Source.TeamID)
	r.Source.UpdatedAt = types.StringValue(resp.Source.UpdatedAt.Format(time.RFC3339))
	r.Source.URL = types.StringValue(resp.Source.URL)
	r.TeamID = types.StringValue(resp.TeamID)
	r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339))
}
