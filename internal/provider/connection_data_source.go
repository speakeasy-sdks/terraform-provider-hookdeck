// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"hashicups/internal/sdk"
	"hashicups/internal/sdk/pkg/models/operations"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"hashicups/internal/validators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &ConnectionDataSource{}
var _ datasource.DataSourceWithConfigure = &ConnectionDataSource{}

func NewConnectionDataSource() datasource.DataSource {
	return &ConnectionDataSource{}
}

// ConnectionDataSource is the data source implementation.
type ConnectionDataSource struct {
	client *sdk.SDK
}

// ConnectionDataSourceModel describes the data model.
type ConnectionDataSourceModel struct {
	ArchivedAt    types.String `tfsdk:"archived_at"`
	CreatedAt     types.String `tfsdk:"created_at"`
	Destination   Destination  `tfsdk:"destination"`
	ID            types.String `tfsdk:"id"`
	Name          types.String `tfsdk:"name"`
	PausedAt      types.String `tfsdk:"paused_at"`
	ResolvedRules []Rule       `tfsdk:"resolved_rules"`
	Rules         []Rule       `tfsdk:"rules"`
	Ruleset       *Ruleset     `tfsdk:"ruleset"`
	Source        Source       `tfsdk:"source"`
	TeamID        types.String `tfsdk:"team_id"`
	UpdatedAt     types.String `tfsdk:"updated_at"`
}

// Metadata returns the data source type name.
func (r *ConnectionDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_connection"
}

// Schema defines the schema for the data source.
func (r *ConnectionDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Connection DataSource",

		Attributes: map[string]schema.Attribute{
			"archived_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
				Description: `Date the connection was archived`,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
				Description: `Date the connection was created`,
			},
			"destination": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"archived_at": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
						Description: `Date the destination was archived`,
					},
					"auth_method": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"hookdeck_signature": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"config": schema.SingleNestedAttribute{
										Computed:    true,
										Attributes:  map[string]schema.Attribute{},
										Description: `Empty config for the destination's auth method`,
									},
									"type": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"HOOKDECK_SIGNATURE",
											),
										},
										MarkdownDescription: `must be one of ["HOOKDECK_SIGNATURE"]` + "\n" +
											`Type of auth method`,
									},
								},
								Description: `Hookdeck Signature`,
							},
							"basic_auth": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"config": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"password": schema.StringAttribute{
												Computed:    true,
												Description: `Password for basic auth`,
											},
											"username": schema.StringAttribute{
												Computed:    true,
												Description: `Username for basic auth`,
											},
										},
										Description: `Basic auth config for the destination's auth method`,
									},
									"type": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"BASIC_AUTH",
											),
										},
										MarkdownDescription: `must be one of ["BASIC_AUTH"]` + "\n" +
											`Type of auth method`,
									},
								},
								Description: `Basic Auth`,
							},
							"api_key": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"config": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"api_key": schema.StringAttribute{
												Computed:    true,
												Description: `API key for the API key auth`,
											},
											"key": schema.StringAttribute{
												Computed:    true,
												Description: `Key for the API key auth`,
											},
											"to": schema.StringAttribute{
												Computed: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"header",
														"query",
													),
												},
												MarkdownDescription: `must be one of ["header", "query"]` + "\n" +
													`Whether the API key should be sent as a header or a query parameter`,
											},
										},
										Description: `API key config for the destination's auth method`,
									},
									"type": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"API_KEY",
											),
										},
										MarkdownDescription: `must be one of ["API_KEY"]` + "\n" +
											`Type of auth method`,
									},
								},
								Description: `API Key`,
							},
							"bearer_token": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"config": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"token": schema.StringAttribute{
												Computed:    true,
												Description: `Token for the bearer token auth`,
											},
										},
										Description: `Bearer token config for the destination's auth method`,
									},
									"type": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"BEARER_TOKEN",
											),
										},
										MarkdownDescription: `must be one of ["BEARER_TOKEN"]` + "\n" +
											`Type of auth method`,
									},
								},
								Description: `Bearer Token`,
							},
							"custom_signature": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"config": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"key": schema.StringAttribute{
												Computed:    true,
												Description: `Key for the custom signature auth`,
											},
											"signing_secret": schema.StringAttribute{
												Computed:    true,
												Description: `Signing secret for the custom signature auth. If left empty a secret will be generated for you.`,
											},
										},
										Description: `Custom signature config for the destination's auth method`,
									},
									"type": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"CUSTOM_SIGNATURE",
											),
										},
										MarkdownDescription: `must be one of ["CUSTOM_SIGNATURE"]` + "\n" +
											`Type of auth method`,
									},
								},
								Description: `Custom Signature`,
							},
						},
						Validators: []validator.Object{
							validators.ExactlyOneChild(),
						},
						Description: `Config for the destination's auth method`,
					},
					"cli_path": schema.StringAttribute{
						Computed:    true,
						Description: `Path for the CLI destination`,
					},
					"created_at": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
						Description: `Date the destination was created`,
					},
					"http_method": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"<nil>",
								"GET",
								"POST",
								"PUT",
								"PATCH",
								"DELETE",
							),
						},
						MarkdownDescription: `must be one of ["<nil>", "GET", "POST", "PUT", "PATCH", "DELETE"]` + "\n" +
							`HTTP method used on requests sent to the destination, overrides the method used on requests sent to the source.`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Description: `ID of the destination`,
					},
					"name": schema.StringAttribute{
						Computed:    true,
						Description: `A unique, human-friendly name for the destination`,
					},
					"path_forwarding_disabled": schema.BoolAttribute{
						Computed: true,
					},
					"rate_limit": schema.Int64Attribute{
						Computed:    true,
						Description: `Limit event attempts to receive per period. Max value is workspace plan's max attempts thoughput.`,
					},
					"rate_limit_period": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"<nil>",
								"second",
								"minute",
								"hour",
							),
						},
						MarkdownDescription: `must be one of ["<nil>", "second", "minute", "hour"]` + "\n" +
							`Period to rate limit attempts`,
					},
					"team_id": schema.StringAttribute{
						Computed:    true,
						Description: `ID of the workspace`,
					},
					"updated_at": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
						Description: `Date the destination was last updated`,
					},
					"url": schema.StringAttribute{
						Computed:    true,
						Description: `HTTP endpoint of the destination`,
					},
				},
				Description: `Associated [Destination](#destination-object) object`,
			},
			"id": schema.StringAttribute{
				Required:    true,
				Description: `ID of the connection`,
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Description: `Unique name of the connection for this source`,
			},
			"paused_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
				Description: `Date the connection was paused`,
			},
			"resolved_rules": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"retry_rule": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"count": schema.Int64Attribute{
									Computed:    true,
									Description: `Maximum number of retries to attempt`,
								},
								"interval": schema.Int64Attribute{
									Computed:    true,
									Description: `Time in MS between each retry`,
								},
								"strategy": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"linear",
											"exponential",
										),
									},
									MarkdownDescription: `must be one of ["linear", "exponential"]` + "\n" +
										`Algorithm to use when calculating delay between retries`,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"retry",
										),
									},
									MarkdownDescription: `must be one of ["retry"]` + "\n" +
										`A retry rule must be of type ` + "`" + `retry` + "`" + ``,
								},
							},
						},
						"alert_rule": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"strategy": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"each_attempt",
											"last_attempt",
										),
									},
									MarkdownDescription: `must be one of ["each_attempt", "last_attempt"]` + "\n" +
										`Alert strategy to use`,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"alert",
										),
									},
									MarkdownDescription: `must be one of ["alert"]` + "\n" +
										`An alert rule must be of type ` + "`" + `alert` + "`" + ``,
								},
							},
						},
						"filter_rule": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"body": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"str": schema.StringAttribute{
											Computed: true,
										},
										"float32": schema.NumberAttribute{
											Computed: true,
										},
										"boolean": schema.BoolAttribute{
											Computed: true,
										},
										"connection_filter_property_4": schema.SingleNestedAttribute{
											Computed:    true,
											Attributes:  map[string]schema.Attribute{},
											Description: `JSON using our filter syntax to filter on request headers`,
										},
									},
									Validators: []validator.Object{
										validators.ExactlyOneChild(),
									},
									Description: `JSON using our filter syntax to filter on request headers`,
								},
								"headers": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"str": schema.StringAttribute{
											Computed: true,
										},
										"float32": schema.NumberAttribute{
											Computed: true,
										},
										"boolean": schema.BoolAttribute{
											Computed: true,
										},
										"connection_filter_property_4": schema.SingleNestedAttribute{
											Computed:    true,
											Attributes:  map[string]schema.Attribute{},
											Description: `JSON using our filter syntax to filter on request headers`,
										},
									},
									Validators: []validator.Object{
										validators.ExactlyOneChild(),
									},
									Description: `JSON using our filter syntax to filter on request headers`,
								},
								"path": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"str": schema.StringAttribute{
											Computed: true,
										},
										"float32": schema.NumberAttribute{
											Computed: true,
										},
										"boolean": schema.BoolAttribute{
											Computed: true,
										},
										"connection_filter_property_4": schema.SingleNestedAttribute{
											Computed:    true,
											Attributes:  map[string]schema.Attribute{},
											Description: `JSON using our filter syntax to filter on request headers`,
										},
									},
									Validators: []validator.Object{
										validators.ExactlyOneChild(),
									},
									Description: `JSON using our filter syntax to filter on request headers`,
								},
								"query": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"str": schema.StringAttribute{
											Computed: true,
										},
										"float32": schema.NumberAttribute{
											Computed: true,
										},
										"boolean": schema.BoolAttribute{
											Computed: true,
										},
										"connection_filter_property_4": schema.SingleNestedAttribute{
											Computed:    true,
											Attributes:  map[string]schema.Attribute{},
											Description: `JSON using our filter syntax to filter on request headers`,
										},
									},
									Validators: []validator.Object{
										validators.ExactlyOneChild(),
									},
									Description: `JSON using our filter syntax to filter on request headers`,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"filter",
										),
									},
									MarkdownDescription: `must be one of ["filter"]` + "\n" +
										`A filter rule must be of type ` + "`" + `filter` + "`" + ``,
								},
							},
						},
						"transform_rule": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"transform_reference": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"transformation_id": schema.StringAttribute{
											Computed:    true,
											Description: `ID of the attached transformation object. Optional input, always set once the rule is defined`,
										},
										"type": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"transform",
												),
											},
											MarkdownDescription: `must be one of ["transform"]` + "\n" +
												`A transformation rule must be of type ` + "`" + `transformation` + "`" + ``,
										},
									},
								},
								"transform_full": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"transformation": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"code": schema.StringAttribute{
													Computed:    true,
													Description: `A string representation of your JavaScript (ES6) code to run`,
												},
												"env": schema.MapAttribute{
													Computed:    true,
													ElementType: types.StringType,
													Description: `A key-value object of environment variables to encrypt and expose to your transformation code`,
												},
												"name": schema.StringAttribute{
													Computed:    true,
													Description: `The unique name of the transformation`,
												},
											},
											Description: `You can optionally define a new transformation while creating a transform rule`,
										},
										"transformation_id": schema.StringAttribute{
											Computed:    true,
											Description: `ID of the attached transformation object. Optional input, always set once the rule is defined`,
										},
										"type": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"transform",
												),
											},
											MarkdownDescription: `must be one of ["transform"]` + "\n" +
												`A transformation rule must be of type ` + "`" + `transformation` + "`" + ``,
										},
									},
								},
							},
							Validators: []validator.Object{
								validators.ExactlyOneChild(),
							},
						},
						"delay_rule": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"delay": schema.Int64Attribute{
									Computed:    true,
									Description: `Delay to introduce in MS`,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"delay",
										),
									},
									MarkdownDescription: `must be one of ["delay"]` + "\n" +
										`A delay rule must be of type ` + "`" + `delay` + "`" + ``,
								},
							},
						},
					},
					Validators: []validator.Object{
						validators.ExactlyOneChild(),
					},
				},
				Description: `Array of rules applied to connection after factoring for the ruleset`,
			},
			"rules": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"retry_rule": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"count": schema.Int64Attribute{
									Computed:    true,
									Description: `Maximum number of retries to attempt`,
								},
								"interval": schema.Int64Attribute{
									Computed:    true,
									Description: `Time in MS between each retry`,
								},
								"strategy": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"linear",
											"exponential",
										),
									},
									MarkdownDescription: `must be one of ["linear", "exponential"]` + "\n" +
										`Algorithm to use when calculating delay between retries`,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"retry",
										),
									},
									MarkdownDescription: `must be one of ["retry"]` + "\n" +
										`A retry rule must be of type ` + "`" + `retry` + "`" + ``,
								},
							},
						},
						"alert_rule": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"strategy": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"each_attempt",
											"last_attempt",
										),
									},
									MarkdownDescription: `must be one of ["each_attempt", "last_attempt"]` + "\n" +
										`Alert strategy to use`,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"alert",
										),
									},
									MarkdownDescription: `must be one of ["alert"]` + "\n" +
										`An alert rule must be of type ` + "`" + `alert` + "`" + ``,
								},
							},
						},
						"filter_rule": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"body": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"str": schema.StringAttribute{
											Computed: true,
										},
										"float32": schema.NumberAttribute{
											Computed: true,
										},
										"boolean": schema.BoolAttribute{
											Computed: true,
										},
										"connection_filter_property_4": schema.SingleNestedAttribute{
											Computed:    true,
											Attributes:  map[string]schema.Attribute{},
											Description: `JSON using our filter syntax to filter on request headers`,
										},
									},
									Validators: []validator.Object{
										validators.ExactlyOneChild(),
									},
									Description: `JSON using our filter syntax to filter on request headers`,
								},
								"headers": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"str": schema.StringAttribute{
											Computed: true,
										},
										"float32": schema.NumberAttribute{
											Computed: true,
										},
										"boolean": schema.BoolAttribute{
											Computed: true,
										},
										"connection_filter_property_4": schema.SingleNestedAttribute{
											Computed:    true,
											Attributes:  map[string]schema.Attribute{},
											Description: `JSON using our filter syntax to filter on request headers`,
										},
									},
									Validators: []validator.Object{
										validators.ExactlyOneChild(),
									},
									Description: `JSON using our filter syntax to filter on request headers`,
								},
								"path": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"str": schema.StringAttribute{
											Computed: true,
										},
										"float32": schema.NumberAttribute{
											Computed: true,
										},
										"boolean": schema.BoolAttribute{
											Computed: true,
										},
										"connection_filter_property_4": schema.SingleNestedAttribute{
											Computed:    true,
											Attributes:  map[string]schema.Attribute{},
											Description: `JSON using our filter syntax to filter on request headers`,
										},
									},
									Validators: []validator.Object{
										validators.ExactlyOneChild(),
									},
									Description: `JSON using our filter syntax to filter on request headers`,
								},
								"query": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"str": schema.StringAttribute{
											Computed: true,
										},
										"float32": schema.NumberAttribute{
											Computed: true,
										},
										"boolean": schema.BoolAttribute{
											Computed: true,
										},
										"connection_filter_property_4": schema.SingleNestedAttribute{
											Computed:    true,
											Attributes:  map[string]schema.Attribute{},
											Description: `JSON using our filter syntax to filter on request headers`,
										},
									},
									Validators: []validator.Object{
										validators.ExactlyOneChild(),
									},
									Description: `JSON using our filter syntax to filter on request headers`,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"filter",
										),
									},
									MarkdownDescription: `must be one of ["filter"]` + "\n" +
										`A filter rule must be of type ` + "`" + `filter` + "`" + ``,
								},
							},
						},
						"transform_rule": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"transform_reference": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"transformation_id": schema.StringAttribute{
											Computed:    true,
											Description: `ID of the attached transformation object. Optional input, always set once the rule is defined`,
										},
										"type": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"transform",
												),
											},
											MarkdownDescription: `must be one of ["transform"]` + "\n" +
												`A transformation rule must be of type ` + "`" + `transformation` + "`" + ``,
										},
									},
								},
								"transform_full": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"transformation": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"code": schema.StringAttribute{
													Computed:    true,
													Description: `A string representation of your JavaScript (ES6) code to run`,
												},
												"env": schema.MapAttribute{
													Computed:    true,
													ElementType: types.StringType,
													Description: `A key-value object of environment variables to encrypt and expose to your transformation code`,
												},
												"name": schema.StringAttribute{
													Computed:    true,
													Description: `The unique name of the transformation`,
												},
											},
											Description: `You can optionally define a new transformation while creating a transform rule`,
										},
										"transformation_id": schema.StringAttribute{
											Computed:    true,
											Description: `ID of the attached transformation object. Optional input, always set once the rule is defined`,
										},
										"type": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"transform",
												),
											},
											MarkdownDescription: `must be one of ["transform"]` + "\n" +
												`A transformation rule must be of type ` + "`" + `transformation` + "`" + ``,
										},
									},
								},
							},
							Validators: []validator.Object{
								validators.ExactlyOneChild(),
							},
						},
						"delay_rule": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"delay": schema.Int64Attribute{
									Computed:    true,
									Description: `Delay to introduce in MS`,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"delay",
										),
									},
									MarkdownDescription: `must be one of ["delay"]` + "\n" +
										`A delay rule must be of type ` + "`" + `delay` + "`" + ``,
								},
							},
						},
					},
					Validators: []validator.Object{
						validators.ExactlyOneChild(),
					},
				},
				Description: `Array of rules configured on the connection`,
			},
			"ruleset": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"archived_at": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
						Description: `Date the ruleset was archived`,
					},
					"created_at": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
						Description: `Date the ruleset was created`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Description: `ID of the ruleset`,
					},
					"is_team_default": schema.BoolAttribute{
						Computed:    true,
						Description: `Default ruleset of Workspace`,
					},
					"name": schema.StringAttribute{
						Computed:    true,
						Description: `A unique name for the ruleset`,
					},
					"rules": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"retry_rule": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"count": schema.Int64Attribute{
											Computed:    true,
											Description: `Maximum number of retries to attempt`,
										},
										"interval": schema.Int64Attribute{
											Computed:    true,
											Description: `Time in MS between each retry`,
										},
										"strategy": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"linear",
													"exponential",
												),
											},
											MarkdownDescription: `must be one of ["linear", "exponential"]` + "\n" +
												`Algorithm to use when calculating delay between retries`,
										},
										"type": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"retry",
												),
											},
											MarkdownDescription: `must be one of ["retry"]` + "\n" +
												`A retry rule must be of type ` + "`" + `retry` + "`" + ``,
										},
									},
								},
								"alert_rule": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"strategy": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"each_attempt",
													"last_attempt",
												),
											},
											MarkdownDescription: `must be one of ["each_attempt", "last_attempt"]` + "\n" +
												`Alert strategy to use`,
										},
										"type": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"alert",
												),
											},
											MarkdownDescription: `must be one of ["alert"]` + "\n" +
												`An alert rule must be of type ` + "`" + `alert` + "`" + ``,
										},
									},
								},
								"filter_rule": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"body": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"str": schema.StringAttribute{
													Computed: true,
												},
												"float32": schema.NumberAttribute{
													Computed: true,
												},
												"boolean": schema.BoolAttribute{
													Computed: true,
												},
												"connection_filter_property_4": schema.SingleNestedAttribute{
													Computed:    true,
													Attributes:  map[string]schema.Attribute{},
													Description: `JSON using our filter syntax to filter on request headers`,
												},
											},
											Validators: []validator.Object{
												validators.ExactlyOneChild(),
											},
											Description: `JSON using our filter syntax to filter on request headers`,
										},
										"headers": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"str": schema.StringAttribute{
													Computed: true,
												},
												"float32": schema.NumberAttribute{
													Computed: true,
												},
												"boolean": schema.BoolAttribute{
													Computed: true,
												},
												"connection_filter_property_4": schema.SingleNestedAttribute{
													Computed:    true,
													Attributes:  map[string]schema.Attribute{},
													Description: `JSON using our filter syntax to filter on request headers`,
												},
											},
											Validators: []validator.Object{
												validators.ExactlyOneChild(),
											},
											Description: `JSON using our filter syntax to filter on request headers`,
										},
										"path": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"str": schema.StringAttribute{
													Computed: true,
												},
												"float32": schema.NumberAttribute{
													Computed: true,
												},
												"boolean": schema.BoolAttribute{
													Computed: true,
												},
												"connection_filter_property_4": schema.SingleNestedAttribute{
													Computed:    true,
													Attributes:  map[string]schema.Attribute{},
													Description: `JSON using our filter syntax to filter on request headers`,
												},
											},
											Validators: []validator.Object{
												validators.ExactlyOneChild(),
											},
											Description: `JSON using our filter syntax to filter on request headers`,
										},
										"query": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"str": schema.StringAttribute{
													Computed: true,
												},
												"float32": schema.NumberAttribute{
													Computed: true,
												},
												"boolean": schema.BoolAttribute{
													Computed: true,
												},
												"connection_filter_property_4": schema.SingleNestedAttribute{
													Computed:    true,
													Attributes:  map[string]schema.Attribute{},
													Description: `JSON using our filter syntax to filter on request headers`,
												},
											},
											Validators: []validator.Object{
												validators.ExactlyOneChild(),
											},
											Description: `JSON using our filter syntax to filter on request headers`,
										},
										"type": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"filter",
												),
											},
											MarkdownDescription: `must be one of ["filter"]` + "\n" +
												`A filter rule must be of type ` + "`" + `filter` + "`" + ``,
										},
									},
								},
								"transform_rule": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"transform_reference": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"transformation_id": schema.StringAttribute{
													Computed:    true,
													Description: `ID of the attached transformation object. Optional input, always set once the rule is defined`,
												},
												"type": schema.StringAttribute{
													Computed: true,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"transform",
														),
													},
													MarkdownDescription: `must be one of ["transform"]` + "\n" +
														`A transformation rule must be of type ` + "`" + `transformation` + "`" + ``,
												},
											},
										},
										"transform_full": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"transformation": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"code": schema.StringAttribute{
															Computed:    true,
															Description: `A string representation of your JavaScript (ES6) code to run`,
														},
														"env": schema.MapAttribute{
															Computed:    true,
															ElementType: types.StringType,
															Description: `A key-value object of environment variables to encrypt and expose to your transformation code`,
														},
														"name": schema.StringAttribute{
															Computed:    true,
															Description: `The unique name of the transformation`,
														},
													},
													Description: `You can optionally define a new transformation while creating a transform rule`,
												},
												"transformation_id": schema.StringAttribute{
													Computed:    true,
													Description: `ID of the attached transformation object. Optional input, always set once the rule is defined`,
												},
												"type": schema.StringAttribute{
													Computed: true,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"transform",
														),
													},
													MarkdownDescription: `must be one of ["transform"]` + "\n" +
														`A transformation rule must be of type ` + "`" + `transformation` + "`" + ``,
												},
											},
										},
									},
									Validators: []validator.Object{
										validators.ExactlyOneChild(),
									},
								},
								"delay_rule": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"delay": schema.Int64Attribute{
											Computed:    true,
											Description: `Delay to introduce in MS`,
										},
										"type": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"delay",
												),
											},
											MarkdownDescription: `must be one of ["delay"]` + "\n" +
												`A delay rule must be of type ` + "`" + `delay` + "`" + ``,
										},
									},
								},
							},
							Validators: []validator.Object{
								validators.ExactlyOneChild(),
							},
						},
						Description: `Array of rules to apply`,
					},
					"team_id": schema.StringAttribute{
						Computed:    true,
						Description: `ID of the workspace`,
					},
					"updated_at": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
						Description: `Date the ruleset was last updated`,
					},
				},
				Description: `Associated [Ruleset](#ruleset-object) object`,
			},
			"source": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"allowed_http_methods": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `List of allowed HTTP methods. Defaults to PUT, POST, PATCH, DELETE.`,
					},
					"archived_at": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
						Description: `Date the source was archived`,
					},
					"created_at": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
						Description: `Date the source was created`,
					},
					"custom_response": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"body": schema.StringAttribute{
								Computed:    true,
								Description: `Body of the custom response`,
							},
							"content_type": schema.StringAttribute{
								Computed: true,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"json",
										"text",
										"xml",
									),
								},
								MarkdownDescription: `must be one of ["json", "text", "xml"]` + "\n" +
									`Content type of the custom response`,
							},
						},
						Description: `Custom response object`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Description: `ID of the source`,
					},
					"integration": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"features": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
								Description: `List of enabled features`,
							},
							"id": schema.StringAttribute{
								Computed:    true,
								Description: `ID of the integration`,
							},
							"label": schema.StringAttribute{
								Computed:    true,
								Description: `Label of the integration`,
							},
							"provider": schema.StringAttribute{
								Computed: true,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"twitter",
										"stripe",
										"recharge",
										"github",
										"shopify",
										"postmark",
										"typeform",
										"hmac",
										"basic_auth",
										"api_key",
										"xero",
										"svix",
										"zoom",
										"akeneo",
										"adyen",
										"gitlab",
										"property-finder",
										"woocommerce",
										"oura",
										"commercelayer",
										"mailgun",
										"pipedrive",
										"sendgrid",
										"workos",
										"synctera",
										"aws_sns",
									),
								},
								MarkdownDescription: `must be one of ["twitter", "stripe", "recharge", "github", "shopify", "postmark", "typeform", "hmac", "basic_auth", "api_key", "xero", "svix", "zoom", "akeneo", "adyen", "gitlab", "property-finder", "woocommerce", "oura", "commercelayer", "mailgun", "pipedrive", "sendgrid", "workos", "synctera", "aws_sns"]` + "\n" +
									`The provider name`,
							},
						},
						Description: `Integration object`,
					},
					"integration_id": schema.StringAttribute{
						Computed:    true,
						Description: `ID of the integration`,
					},
					"name": schema.StringAttribute{
						Computed:    true,
						Description: `Name for the source`,
					},
					"team_id": schema.StringAttribute{
						Computed:    true,
						Description: `ID of the workspace`,
					},
					"updated_at": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
						Description: `Date the source was last updated`,
					},
					"url": schema.StringAttribute{
						Computed:    true,
						Description: `A unique URL that must be supplied to your webhook's provider`,
					},
				},
				Description: `Associated [Source](#source-object) object`,
			},
			"team_id": schema.StringAttribute{
				Computed:    true,
				Description: `ID of the workspace`,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
				Description: `Date the connection was last updated`,
			},
		},
	}
}

func (r *ConnectionDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *ConnectionDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *ConnectionDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	id := data.ID.ValueString()
	request := operations.GetConnectionRequest{
		ID: id,
	}
	res, err := r.client.Connection.GetConnection(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.Connection == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromGetResponse(res.Connection)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
